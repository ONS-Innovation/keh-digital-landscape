{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digital Landscape Documentation","text":"<p>Welcome to the Digital Landscape documentation. This tool provides comprehensive insights into technology usage across your organisation, featuring:</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#tech-radar","title":"Tech Radar","text":"<p>Interactive visualisation of technology adoption status and trends across the organisation. The radar provides insights into:</p> <ul> <li>Technology adoption rings (Adopt, Trial, Assess, Hold)</li> <li>Categorised quadrant view of technologies (Languages, Frameworks, Supporting Tools, Infrastructure)</li> <li>Historical timeline for movement of technologies between rings</li> <li>Detailed information about each technology and linked projects</li> </ul>"},{"location":"#statistics","title":"Statistics","text":"<p>Detailed analytics of repository statistics and language usage, including:</p> <ul> <li>Repository counts and status</li> <li>Language distribution</li> <li>Technology adoption trends</li> <li>Data-based, repository status and project filters</li> <li>Alphabetical, repository count, usage and size ascending/descending sorting filters</li> <li>Average/total size toggle and Tech Radar ring toggle</li> </ul>"},{"location":"#projects","title":"Projects","text":"<p>Comprehensive project management interface offering:</p> <ul> <li>Overview of all projects from Tech Audit Tool</li> <li>Technology stack details</li> <li>Repository information and statistics from GitHub scraping</li> </ul>"},{"location":"#review","title":"Review","text":"<p>Administrative interface for managing the Tech Radar:</p> <ul> <li>Technology status updates</li> <li>New technology additions from Tech Audit Tool</li> <li>Technology management (change ring, name, quadrant)</li> <li>Add new technology</li> </ul>"},{"location":"#admin","title":"Admin","text":"<p>Advanced administrative tools for managing the platform:</p> <ul> <li>Banner management for site-wide notifications</li> <li>Technology reference list management</li> <li>Technology normalisation and consistency tools</li> <li>Untracked technology detection and auditing</li> </ul>"},{"location":"#terraform","title":"Terraform","text":"<p>The terraform code is undocumented within this documentation as it reflects similar infrastructure to applications deployed within the team. It uses a Cognito module, AWS Fargate, AWS ECR and AWS S3. There are no external APIs or services used.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Tech Radar Documentation</li> <li>Statistics Documentation</li> <li>Projects Documentation</li> <li>Review Documentation</li> <li>Admin Documentation</li> </ul>"},{"location":"documentation/","title":"Documentation","text":"<p>This site uses MkDocs to build its documentation and GitHub Pages for hosting.</p>"},{"location":"documentation/#format","title":"Format","text":"<p>Documentation within this project follows the following pattern:</p> <ul> <li>A <code>README.md</code> for each component</li> <li>A <code>/docs</code> folder for the project</li> </ul> <p>Each <code>README.md</code> should contain:</p> <ul> <li>A description of what the component is/does</li> <li>A list of any prerequisites</li> <li>Setup instructions</li> <li>Execution instructions</li> <li>Deployment instructions</li> </ul> <p>The <code>/docs</code> folder should contain:</p> <ul> <li>A description of what the project is</li> <li>An overview of how the everything fits together in the project</li> <li>An explanation of the tech stack</li> <li>Details of the underlying dataset</li> </ul> <p>A majority of the information should reside within the <code>/docs</code> directory over the <code>README</code>. The <code>README</code>s in this project should be kept for concise instructions on how to use each component. Any detailed explanation should be kept within <code>/docs</code>.</p>"},{"location":"documentation/#getting-mkdocs-setup","title":"Getting MkDocs Setup","text":"<p>In order to build an MkDocs deployment or serve the documentation locally, we need to install MkDocs and its dependencies.</p> <ol> <li> <p>Navigate into the mkdocs directory.</p> </li> <li> <p>Activate the virtual environment.</p> </li> </ol> <pre><code>source venv/bin/activate\n</code></pre> <ol> <li>Install MkDocs and its dependencies.</li> </ol> <pre><code>pip install -r mkdocs_requirements.txt\n</code></pre> <ol> <li>You can now use MkDocs. To see a list of commands run the following:</li> </ol> <pre><code>mkdocs --help\n</code></pre> <p>Please Note: Python's package manager, PIP, is required to install MkDocs. Please make sure you have Python installed beforehand.</p>"},{"location":"documentation/#updating-mkdocs-deployment","title":"Updating MkDocs Deployment","text":""},{"location":"documentation/#github-action-to-deploy-documentation","title":"GitHub Action to Deploy Documentation","text":"<p>A GitHub Action is set up to automatically deploy the documentation to GitHub Pages whenever a commit is made to the <code>main</code> branch. This action is triggered by a push event to the <code>main</code> branch and runs the <code>mkdocs gh-deploy</code> command to build and deploy the documentation.</p>"},{"location":"additionalNotes/directorateSupport/","title":"Multiple Directorate Support","text":""},{"location":"additionalNotes/directorateSupport/#overview","title":"Overview","text":"<p>This page outlines how multiple directorates are supported within the digital landscape.</p>"},{"location":"additionalNotes/directorateSupport/#where-are-directorates-defined","title":"Where are Directorates Defined?","text":"<p>Directorates are defined in <code>directorates.json</code> on AWS S3. This file contains an array of directorate objects, each with its own attributes (importantly an <code>id</code>, <code>name</code> and <code>colour</code>).</p> <p>In order to get this file from S3, the frontend application makes a request to the backend API, which retrieves the file and returns it to the frontend.</p>"},{"location":"additionalNotes/directorateSupport/#example-directorate-entries","title":"Example Directorate Entries","text":"<pre><code>[\n  {\n    \"id\": 0,\n    \"name\": \"Digital Services (DS)\",\n    \"colour\": \"#1f77b4\",\n    \"default\": true,\n    \"enabled\": true\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Data Science Campus (DSC)\",\n    \"colour\": \"#ff7f0e\",\n    \"default\": false,\n    \"enabled\": true\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Data Growth and Operations (DGO)\",\n    \"colour\": \"#2ca02c\",\n    \"default\": false,\n    \"enabled\": true\n  }\n]\n</code></pre>"},{"location":"additionalNotes/directorateSupport/#key-attributes","title":"Key Attributes","text":"Attribute Description <code>id</code> A unique identifier for the directorate. This is used to reference the directorate in each technology's timeline entries. Using an id over its name is required to avoid having to change existing data should the directorate name change. <code>name</code> The full name of the directorate. This is displayed in the UI when selecting a directorate. This will typically be in the format \"Directorate Name (Abbreviation)\". <code>colour</code> The colour associated with the directorate. This is used for visual differentiation in the UI. <code>default</code> A boolean indicating whether this is the default directorate. Only one directorate can be the default. This key is unlikely to be changed as Digital Services should always be the default. <code>enabled</code> A boolean indicating whether the directorate is enabled for use. This will allow us to disable directorates should the need arise."},{"location":"additionalNotes/directorateSupport/#tech-radar-review-page","title":"Tech Radar + Review Page","text":"<p>The Tech Radar and Review page both support multiple directorates, allowing technologies to be positioned in different radar rings based on directorate. This functionality supports scenarios where a technology is discouraged in one directorate but widely used and accepted in another. An example of this is R for statistical analysis, which is widely used and encouraged within Data Science teams but should be avoided in other directorates (i.e. Digital Services).</p> <p>When it comes to creating radar views for directorates, Digital Services is used as a default view if other directorates have no specific technology positions. This means that if a technology is in the Adopt ring for Digital Services but has no position for Data Science, it will also appear in the Adopt ring for Data Science. This has been decided so that user don't have to position every technology for every directorate, which would be a significant overhead, additionally we want to try and keep the directorates as aligned as possible.</p> <p>To give a high level picture of how this works, all directorates use the Digital Services radar as a base, and then apply any specific positions on top of that.</p> <p>To facilitate technologies having different positions in different directorates, a <code>directorate</code> key has been added to timeline entries within <code>onsRadarSkeleton.json</code>.</p>"},{"location":"additionalNotes/directorateSupport/#example-technology-entry","title":"Example Technology Entry","text":"<pre><code>entries [\n    {\n      \"id\": \"technology-id\",\n      \"title\": \"example technology\",\n      \"description\": \"Languages\",\n      \"key\": \"example-tech\",\n      \"url\": \"#\",\n      \"quadrant\": \"1\",\n      \"timeline\": [\n        ... &lt;-- This part is where technologies get assigned to different rings\n      ],\n      \"links\": []\n    },\n]\n</code></pre>"},{"location":"additionalNotes/directorateSupport/#example-timeline-entry-pre-directorate-support","title":"Example Timeline Entry Pre-Directorate Support","text":"<pre><code>{\n    \"moved\": 5,\n    \"ringId\": \"adopt\",\n    \"date\": \"2025-09-09 16:32:13\",\n    \"description\": \"Moved from ignore to adopt.\",\n    \"author\": \"dev@ons.gov.uk\"\n},\n</code></pre>"},{"location":"additionalNotes/directorateSupport/#example-timeline-entry-post-directorate-support","title":"Example Timeline Entry Post-Directorate Support","text":"<pre><code>{\n    \"moved\": -3,\n    \"ringId\": \"hold\",\n    \"date\": \"2025-09-09 16:39:18\",\n    \"description\": \"Moved from adopt to hold for Data Science directorate.\",\n    \"author\": \"dev@ons.gov.uk\",\n    \"directorate\": 2 &lt;-- This integer corresponds to the directorate id in directorates.json\n},\n</code></pre> <p>The value of the <code>directorate</code> key corresponds to the <code>id</code> of the directorate in <code>directorates.json</code>.</p>"},{"location":"additionalNotes/directorateSupport/#how-do-we-deal-with-old-timeline-entries","title":"How do we deal with old timeline entries?","text":"<p>Since timeline records created before directorate support was added do not have a <code>directorate</code> key, it is assumed that these entries are for the Digital Services directorate.</p> <p>Think of the following structure for timeline entries without a <code>directorate</code> key:</p> <pre><code>{\n    \"moved\": -3,\n    \"ringId\": \"hold\",\n    \"date\": \"2025-09-09 16:39:18\",\n    \"description\": \"Moved from adopt to hold for Data Science directorate.\",\n    \"author\": \"dev@ons.gov.uk\",\n    \"directorate\": \"Digital Services\" &lt;-- This key is assumed to be Digital Services if not present\n},\n</code></pre>"},{"location":"additionalNotes/directorateSupport/#how-do-we-find-the-current-position-of-a-technology-for-a-specific-directorate","title":"How do we find the current position of a technology for a specific directorate?","text":"<p>On both pages, we first filter the timeline of each technology to only include entries for the selected directorate.</p> <p>i.e. if the selected directorate is Data Science, the timeline will only include entries with <code>\"directorate\": \"Data Science\"</code>.</p> <p>If the filtered timeline is then empty, we fall back to the timeline for Digital Services. This is because we want Digital Service to be the default view if no specific positions exist for a directorate. Digital Services is like the master copy of the radar that should apply to all directorates unless otherwise specified.</p> <p>Once filtered, we can simply look at the last entry in the timeline to determine the current position of the technology for that directorate. This is because the timeline list is treated as a stack within the code, so the last entry is always the most recent.</p>"},{"location":"additionalNotes/directorateSupport/#worked-example","title":"Worked Example","text":"<p>Let's say we have a technology with the following timeline entries:</p> <pre><code>\"timeline\": [\n    {\n        \"moved\": 5,\n        \"ringId\": \"adopt\",\n        \"date\": \"2025-09-09 16:32:13\",\n        \"description\": \"Moved from ignore to adopt.\",\n        \"author\": \"dev@ons.gov.uk\"\n    },\n    {\n        \"moved\": -3,\n        \"ringId\": \"hold\",\n        \"date\": \"2025-09-09 16:39:18\",\n        \"description\": \"Moved from adopt to hold for Data Science directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 1\n    },\n    {\n        \"moved\": 2,\n        \"ringId\": \"trial\",\n        \"date\": \"2025-10-01 10:00:00\",\n        \"description\": \"Moved from hold to trial for Data Science directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 1\n    },\n    {\n        \"moved\": -1,\n        \"ringId\": \"assess\",\n        \"date\": \"2025-11-01 10:00:00\",\n        \"description\": \"Moved from trial to assess for Digital Services directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 0\n    }\n]\n</code></pre> <p>If the selected directorate is Data Science Campus (DSC), we filter the timeline to only include entries with <code>\"directorate\": 2</code> (the id for Data Science in <code>directorates.json</code>):</p> <pre><code>\"timeline\": [\n    {\n        \"moved\": -3,\n        \"ringId\": \"hold\",\n        \"date\": \"2025-09-09 16:39:18\",\n        \"description\": \"Moved from adopt to hold for Data Science directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 2\n    },\n    {\n        \"moved\": 2,\n        \"ringId\": \"trial\",\n        \"date\": \"2025-10-01 10:00:00\",\n        \"description\": \"Moved from hold to trial for Data Science directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 2\n    }\n]\n</code></pre> <p>The last entry in this filtered timeline indicates that the current position of the technology for the Data Science directorate is in the Trial ring.</p> <p>If the selected directorate is Digital Services, we filter the timeline to only include entries with <code>\"directorate\": 0</code> or entries without a <code>directorate</code> key:</p> <pre><code>\"timeline\": [\n    {\n        \"moved\": 5,\n        \"ringId\": \"adopt\",\n        \"date\": \"2025-09-09 16:32:13\",\n        \"description\": \"Moved from ignore to adopt.\",\n        \"author\": \"dev@ons.gov.uk\"\n    },\n    {\n        \"moved\": -1,\n        \"ringId\": \"assess\",\n        \"date\": \"2025-11-01 10:00:00\",\n        \"description\": \"Moved from trial to assess for Digital Services directorate.\",\n        \"author\": \"dev@ons.gov.uk\",\n        \"directorate\": 0\n    }\n]\n</code></pre> <p>The last entry in this filtered timeline indicates that the current position of the technology for the Digital Services directorate is in the Assess ring.</p>"},{"location":"additionalNotes/directorateSupport/#highlighting-technologies-visuals","title":"Highlighting Technologies + Visuals","text":"<p>To help users quickly identify which technologies are or have been moved specifically for their directorate, some visual cues are used:</p> <ul> <li>On the Tech Radar page, technologies that have any timeline entries for the selected directorate are highlighted with a small margin on the left side of the technology card.</li> </ul> <p></p> <ul> <li>On the Review page, technologies that are in a position specifically for the selected directorate are highlighted with a border around the technology card.</li> </ul> <p></p> <ul> <li>On both pages, a gradient background is applied to the top of the page to indicate which directorate is currently selected.</li> </ul> <p></p> <p>Note: The colours used in these visuals correspond to the <code>colour</code> attribute defined for each directorate in <code>directorates.json</code>. This allows us to easily change the colours associated with each directorate by simply updating the JSON file - i.e. if accessibility requirements change.</p>"},{"location":"additionalNotes/directorateSupport/#project-page-future-plans-tbc","title":"Project Page (Future Plans / TBC)","text":"<p>Should we ever need to extend directorate support to the Project Page, the same principles would apply. Each project would have a <code>directorate</code> key which, when filtering projects, would be used to show only projects relevant to the selected directorate. This would allow users to see projects specific to their directorate, while still having the option to view all projects if needed.</p> <p>Note: This functionality would require the Tech Audit Tool to start collecting and storing the <code>directorate</code> key for each project, which is not currently implemented. As above, project that do not have a <code>directorate</code> key would be assumed to belong to the Digital Services directorate.</p>"},{"location":"backend/","title":"Backend Documentation","text":"<p>The Digital Landscape backend is built with Node.js and Express, providing a RESTful API to serve data for the frontend application. The backend follows a modular architecture with separate concerns for routing, services, utilities, and configuration.</p>"},{"location":"backend/#architecture-overview","title":"Architecture Overview","text":"<p>The backend is organised into the following key directories:</p> <ul> <li><code>routes/</code> - HTTP endpoint definitions grouped by functionality</li> <li><code>services/</code> - Business logic and external service integrations</li> <li><code>utilities/</code> - Helper functions and data transformers</li> <li><code>config/</code> - Application configuration including logging</li> </ul>"},{"location":"backend/#authentication-authorisation","title":"Authentication &amp; Authorisation","text":"<p>The backend uses AWS Cognito for authentication and role-based access control through the <code>aws-jwt-verify</code> library. The system utilises a single Cognito User Pool with group-based permissions.</p>"},{"location":"backend/#cognito-service-servicescognitoservicejs","title":"Cognito Service (<code>services/cognitoService.js</code>)","text":"<p>The authentication system provides:</p> <ul> <li>JWT Token Verification - Validates ALB and Cognito access tokens</li> <li>Role-based Middleware - Enforces access control based on user groups</li> <li>Development Mode - Bypasses authentication for local development</li> <li>User Information Extraction - Retrieves user email and group memberships</li> </ul>"},{"location":"backend/#user-groups-permissions","title":"User Groups &amp; Permissions","text":"<p>Users are assigned to groups in Cognito that determine their access levels:</p> <ul> <li><code>admin</code> - Full administrative access to all backend endpoints</li> <li><code>reviewer</code> - Access to review functionality and technology radar updates</li> <li>Combined roles - Users can belong to multiple groups for expanded permissions</li> </ul>"},{"location":"backend/#authentication-middleware","title":"Authentication Middleware","text":"<p>The service provides three main middleware functions:</p> <ul> <li><code>verifyJwt</code> - Base authentication middleware for all protected routes</li> <li><code>requireAdmin</code> - Restricts access to admin-only endpoints</li> <li><code>requireReviewer</code> - Restricts access to reviewer-only endpoints</li> </ul>"},{"location":"backend/#development-mode","title":"Development Mode","text":"<p>In development environments (<code>NODE_ENV=development</code>), authentication is bypassed and a default developer user is provided with both admin and reviewer permissions.</p>"},{"location":"backend/#frontend-integration","title":"Frontend Integration","text":"<p>The authentication system integrates seamlessly with the frontend:</p> <ul> <li>User Profile Display - Shows user email, roles, and appropriate icons in the sidebar and dropdown menu</li> <li>Role-based UI - Displays restricted sections based on user permissions</li> <li>Author Attribution - When reviewers add descriptions during technology moves, their email is automatically captured as the author</li> <li>Logout Functionality - Handles secure logout through Cognito endpoints</li> </ul>"},{"location":"backend/#main-application-indexjs","title":"Main Application (<code>index.js</code>)","text":"<p>The main application file sets up:</p> <ul> <li>Express server with CORS configuration</li> <li>Route mounting for different API endpoints</li> <li>Error handling for uncaught exceptions and rejections</li> <li>Application logging</li> </ul>"},{"location":"backend/#route-mounting","title":"Route Mounting","text":"<p>The application mounts four main route groups:</p> <pre><code>app.use('/api', default);           // Default API routes that points to /routes/default.js\napp.use('/admin/api', admin);       // Admin functionality that points to /routes/admin.js\napp.use('/review/api', review);     // Review functionality that points to /routes/review.js\napp.use('/copilot/api', copilot);   // GitHub Copilot metrics that points to /routes/copilot.js\napp.use('/user/api', userRoutes);   // User authentication endpoints\n</code></pre>"},{"location":"backend/#route-modules","title":"Route Modules","text":""},{"location":"backend/#user-routes-userapi","title":"User Routes (<code>/user/api</code>)","text":"<p>Located in <code>routes/userRoutes.js</code>, these provide authentication functionality:</p> <ul> <li>GET <code>/info</code> - Retrieve authenticated user information including email and groups</li> <li>POST <code>/logout</code> - Handle user logout and return Cognito logout URL</li> </ul>"},{"location":"backend/#default-routes-api","title":"Default Routes (<code>/api</code>)","text":"<p>Located in <code>routes/default.js</code>, these provide core application functionality:</p> <ul> <li>GET <code>/csv</code> - Retrieve project data in CSV format</li> <li>GET <code>/json</code> - Retrieve project data in JSON format</li> <li>GET <code>/tech-radar/json</code> - Fetch technology radar data</li> <li>GET <code>/repository/project/json</code> - Get repository statistics</li> <li>GET <code>/directorates/json</code> - Get directorate data in JSON format from S3</li> <li>GET <code>/banners</code> - Retrieve active banner messages</li> <li>GET <code>/banners/all</code> - Retrieve all banner messages (includes inactive banners)</li> <li>GET <code>/health</code> - Health check endpoint</li> </ul>"},{"location":"backend/#admin-routes-adminapi","title":"Admin Routes (<code>/admin/api</code>)","text":"<p>Located in <code>routes/admin.js</code>, these provide administrative functionality requiring admin group membership:</p> <ul> <li>POST <code>/banners</code> - Update the banner messages in S3 from admin</li> <li>POST <code>/banners/update</code> - Update banner message</li> <li>POST <code>/banners/toggle</code> - Toggle the visibility of a banner message</li> <li>POST <code>/banners/delete</code> - Delete a banner message</li> <li>GET <code>/array-data</code> - Get array data from the Tech Audit Tool bucket</li> <li>POST <code>/array-data/update</code> - Update the array data in the Tech Audit Tool bucket</li> <li>GET <code>/tech-radar</code> - Get the tech radar JSON from S3</li> <li>POST <code>/tech-radar/update</code> - Update the tech radar JSON in S3 from admin</li> <li>POST <code>/normalise/technology</code> - Normalise the technology names across projects in S3 from admin</li> </ul>"},{"location":"backend/#review-routes-reviewapi","title":"Review Routes (<code>/review/api</code>)","text":"<p>Located in <code>routes/review.js</code>, these provide review functionality requiring reviewer group membership:</p> <ul> <li>POST <code>/tech-radar/update</code> - Update the tech radar JSON in S3 with reviewer attribution</li> </ul>"},{"location":"backend/#copilot-routes-copilotapi","title":"Copilot Routes (<code>/copilot/api</code>)","text":"<p>Located in <code>routes/copilot.js</code>, these provide GitHub Copilot metrics:</p> <ul> <li>GET <code>/org/live</code> - Get Copilot organisation live usage data</li> <li>GET <code>/org/historic</code> - Get Copilot organisation historic usage data</li> <li>GET <code>/seats</code> - Get Copilot seat information</li> <li>GET <code>/team/live</code> - Get Copilot live usage data for a specific team in the organisation</li> <li>GET <code>/teams</code> - Get all teams the user is a member of in the organisation</li> <li>GET <code>/team/seats</code> - Get Copilot seat information filtered by a specific team in the organisation</li> <li>POST <code>/github/oauth/token</code> - Exchange GitHub OAuth code for access token</li> <li>GET <code>/github/oauth/login</code> - Redirect to GitHub OAuth login</li> </ul>"},{"location":"backend/#services","title":"Services","text":"<p>The backend uses centralised services to handle external integrations and business logic:</p>"},{"location":"backend/#cognito-service-servicescognitoservicejs_1","title":"Cognito Service (<code>services/cognitoService.js</code>)","text":"<p>Manages AWS Cognito authentication and authorisation:</p> <ul> <li>JWT token verification using <code>aws-jwt-verify</code></li> <li>Role-based access control middleware</li> <li>User information extraction from tokens</li> <li>Development mode authentication bypass</li> <li>Secure logout handling</li> </ul>"},{"location":"backend/#s3-service-servicess3servicejs","title":"S3 Service (<code>services/s3Service.js</code>)","text":"<p>Manages all Amazon S3 operations:</p> <ul> <li>Singleton pattern for consistent S3 client instances</li> <li>Supports multiple buckets (main, TAT, Copilot)</li> <li>Methods: <code>getObject()</code>, <code>putObject()</code>, <code>getObjectViaSignedUrl()</code></li> <li>Centralised error handling and logging</li> </ul>"},{"location":"backend/#github-service-servicesgithubservicejs","title":"GitHub Service (<code>services/githubService.js</code>)","text":"<p>Handles GitHub API interactions:</p> <ul> <li>Copilot metrics retrieval with automatic pagination</li> <li>Seat information management</li> <li>Integration with GitHub App authentication</li> </ul>"},{"location":"backend/#tech-radar-service-servicestechradarservicejs","title":"Tech Radar Service (<code>services/techRadarService.js</code>)","text":"<p>Manages technology radar operations:</p> <ul> <li>Data retrieval and parsing</li> <li>Entry updates with validation and author attribution</li> <li>Consistent error handling</li> </ul>"},{"location":"backend/#utilities","title":"Utilities","text":"<p>Helper functions and data transformation utilities:</p>"},{"location":"backend/#github-app-authentication-utilitiesgetappandinstallationjs","title":"GitHub App Authentication (<code>utilities/getAppAndInstallation.js</code>)","text":"<ul> <li>Handles GitHub App authentication using AWS Secrets Manager</li> <li>Returns authenticated Octokit instance for API calls</li> </ul>"},{"location":"backend/#project-data-transformer-utilitiesprojectdatatransformerjs","title":"Project Data Transformer (<code>utilities/projectDataTransformer.js</code>)","text":"<ul> <li>Transforms project objects from raw JSON to CSV format</li> <li>Handles user role extraction and contact information</li> <li>Formats technology arrays and metadata</li> </ul>"},{"location":"backend/#technology-array-updater-utilitiesupdatetechnologyinarrayjs","title":"Technology Array Updater (<code>utilities/updateTechnologyInArray.js</code>)","text":"<ul> <li>Helper function for updating technology names in arrays</li> <li>Used in technology normalisation processes</li> </ul>"},{"location":"backend/#configuration","title":"Configuration","text":""},{"location":"backend/#logger-configloggerjs","title":"Logger (<code>config/logger.js</code>)","text":"<p>Provides centralised logging using Winston:</p> <ul> <li>Console logging with colour formatting</li> <li>Optional CloudWatch integration for AWS environments</li> <li>Structured JSON logging format</li> <li>Environment-specific log levels</li> </ul>"},{"location":"backend/#environment-variables","title":"Environment Variables","text":"<p>Key environment variables used by the backend:</p>"},{"location":"backend/#server-configuration","title":"Server Configuration","text":"<ul> <li><code>PORT</code> - Server port (default: 5001)</li> <li><code>LOG_LEVEL</code> - Logging level (default: info)</li> <li><code>NODE_ENV</code> - Environment mode (development/production)</li> </ul>"},{"location":"backend/#aws-configuration","title":"AWS Configuration","text":"<ul> <li><code>AWS_REGION</code> - AWS region for services</li> <li><code>ALB_ARN</code> - Application Load Balancer ARN for JWT verification</li> <li><code>AWS_SECRET_NAME</code> - AWS Secrets Manager secret name</li> </ul>"},{"location":"backend/#cognito-configuration","title":"Cognito Configuration","text":"<ul> <li><code>COGNITO_USER_POOL_ID</code> - Cognito User Pool ID</li> <li><code>COGNITO_USER_POOL_CLIENT_ID</code> - Cognito User Pool Client ID</li> </ul>"},{"location":"backend/#development-configuration","title":"Development Configuration","text":"<ul> <li><code>DEV_USER_GROUPS</code> - Comma-separated list of groups for development user</li> </ul>"},{"location":"backend/#github-configuration","title":"GitHub Configuration","text":"<ul> <li><code>GITHUB_ORG</code> - GitHub organisation name</li> <li><code>GITHUB_APP_ID</code> - GitHub App ID</li> </ul>"},{"location":"backend/#logging-configuration","title":"Logging Configuration","text":"<ul> <li><code>CLOUDWATCH_GROUP_NAME</code> - CloudWatch log group</li> </ul>"},{"location":"backend/#error-handling","title":"Error Handling","text":"<p>The application implements comprehensive error handling:</p> <ul> <li>Global uncaught exception handling</li> <li>Unhandled promise rejection handling</li> <li>Service-level error logging with authentication context</li> <li>Consistent error response formats</li> <li>401 Unauthorised responses for authentication failures</li> <li>403 Forbidden responses for insufficient permissions</li> </ul>"},{"location":"backend/#development-considerations","title":"Development Considerations","text":"<ul> <li>All services use singleton patterns to optimise resource usage</li> <li>Modular architecture allows for easy testing and maintenance</li> <li>Centralised configuration management</li> <li>Consistent logging patterns across all modules</li> <li>Environment-specific behaviour through configuration</li> <li>Role-based access control ensures security at the API level</li> <li>Author attribution tracks reviewer actions for audit purposes</li> <li>Frontend-backend integration provides seamless user experience</li> </ul>"},{"location":"backend/utilities/","title":"Backend Utilities","text":"<p>The backend utilities provide essential helper functions and transformers that support the core application functionality. These utilities handle common tasks such as authentication, data transformation, and array manipulation.</p>"},{"location":"backend/utilities/#overview","title":"Overview","text":"<p>The utilities directory contains:</p> <ul> <li>GitHub App Authentication - Secure authentication with GitHub APIs</li> <li>Project Data Transformation - Converting between data formats</li> <li>Technology Array Management - Updating technology arrays</li> </ul>"},{"location":"backend/utilities/#github-app-authentication","title":"GitHub App Authentication","text":""},{"location":"backend/utilities/#getappandinstallationjs","title":"<code>getAppAndInstallation.js</code>","text":"<p>Provides secure authentication for GitHub API operations using GitHub App credentials stored in AWS Secrets Manager.</p>"},{"location":"backend/utilities/#configuration","title":"Configuration","text":"<p>The utility requires the following environment variables:</p> <ul> <li><code>GITHUB_ORG</code> - Target GitHub organisation (default: \"ONSdigital\")</li> <li><code>GITHUB_APP_ID</code> - GitHub App ID for authentication</li> <li><code>AWS_SECRET_NAME</code> - AWS Secrets Manager secret containing the private key</li> <li><code>AWS_REGION</code> - AWS region for Secrets Manager (configured as \"eu-west-2\")</li> </ul>"},{"location":"backend/utilities/#method-getappandinstallation","title":"Method: <code>getAppAndInstallation()</code>","text":"<p>Authenticates with GitHub and returns an installation-scoped Octokit instance.</p> <p>Returns: Promise resolving to authenticated Octokit instance</p> <p>Process:</p> <ol> <li>Retrieves GitHub App private key from AWS Secrets Manager</li> <li>Creates GitHub App instance using App ID and private key</li> <li>Gets installation details for the specified organisation</li> <li>Returns installation-scoped Octokit client</li> </ol> <p>Example:</p> <pre><code>const { getAppAndInstallation } = require('./utilities/getAppAndInstallation');\n\nasync function getRepositories() {\n  try {\n    const octokit = await getAppAndInstallation();\n    const response = await octokit.request('GET /orgs/{org}/repos', {\n      org: 'ONSdigital',\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Authentication failed:', error);\n  }\n}\n</code></pre>"},{"location":"backend/utilities/#project-data-transformation","title":"Project Data Transformation","text":""},{"location":"backend/utilities/#projectdatatransformerjs","title":"<code>projectDataTransformer.js</code>","text":"<p>Transforms project data from raw JSON format to structured CSV format for export and analysis.</p>"},{"location":"backend/utilities/#method-transformprojecttocsvformatproject","title":"Method: <code>transformProjectToCSVFormat(project)</code>","text":"<p>Converts a project object from JSON structure to CSV-compatible format.</p> <p>Parameters:</p> <ul> <li><code>project</code> (object) - Raw project data object</li> </ul> <p>Returns: Transformed project object in CSV format</p> <p>Key Transformations:</p>"},{"location":"backend/utilities/#user-role-extraction","title":"User Role Extraction","text":"<pre><code>// Technical contact with ONS email\nconst technicalContactUser = project.user.find(\n  (u) =&gt;\n    u.roles.includes('Technical Contact') &amp;&amp;\n    (u.email?.includes('@ons.gov.uk') || u.email?.includes('@ext.ons.gov.uk'))\n);\n\n// Format: email (grade)\nconst technicalContact = technicalContactUser\n  ? `${technicalContactUser.email} (${technicalContactUser.grade})`\n  : '';\n</code></pre>"},{"location":"backend/utilities/#technology-array-formatting","title":"Technology Array Formatting","text":"<pre><code>const mainLanguages = project.architecture.languages.main.join('; ');\nconst frameworks = project.architecture.frameworks.others.join('; ');\n</code></pre>"},{"location":"backend/utilities/#development-context","title":"Development Context","text":"<pre><code>const developed =\n  project.developed[1] != ''\n    ? `${project.developed[0]} with ${project.developed.slice(1).join(', ')}`\n    : project.developed[0];\n</code></pre> <p>Output Structure:</p> <pre><code>{\n  Project: string,                    // Project name\n  Project_Short: string,              // Short project name\n  Programme: string,                  // Programme name\n  Programme_Short: string,            // Short programme name\n  Description: string,                // Project description\n  Stage: string,                      // Development stage\n  Developed: string,                  // Development context\n  Technical_Contact: string,          // Technical contact (email + grade)\n  Delivery_Manager: string,           // Delivery manager (email + grade)\n  Language_Main: string,              // Main programming languages\n  Language_Others: string,            // Other languages\n  Language_Frameworks: string,        // Frameworks used\n  Hosted: string,                     // Hosting platforms\n  Architectures: string,              // Architecture details\n  Source_Control: string,             // Source control system\n  Repo: string,                       // Repository URLs\n  CICD: string,                       // CI/CD tools\n  Datastores: string,                 // Data storage solutions\n  Database_Technologies: string,      // Database technologies\n  Project_Tools: string,              // Project tracking tools\n  Documentation: string,              // Documentation links\n  Infrastructure: string,             // Infrastructure tools\n  Code_Editors: string,               // Code editors used\n  Communication: string,              // Communication tools\n  Collaboration: string,              // Collaboration tools\n  Incident_Management: string,        // Incident management tools\n  Documentation_Tools: string,        // Documentation tools\n  UI_Tools: string,                   // UI/UX tools\n  Diagram_Tools: string               // Diagramming tools\n}\n</code></pre> <p>Example Usage:</p> <pre><code>const { transformProjectToCSVFormat } = require('./utilities/projectDataTransformer');\n\nconst rawProject = {\n  details: [{ name: 'Digital Platform', short_name: 'DP' }],\n  user: [\n    {\n      email: 'tech.lead@ons.gov.uk',\n      grade: 'Senior Developer',\n      roles: ['Technical Contact'],\n    },\n  ],\n  architecture: {\n    languages: {\n      main: ['JavaScript', 'Python'],\n      others: ['Go'],\n    },\n  },\n  // ... other project data\n};\n\nconst csvProject = transformProjectToCSVFormat(rawProject);\nconsole.log(csvProject.Technical_Contact); // \"tech.lead@ons.gov.uk (Senior Developer)\"\n</code></pre>"},{"location":"backend/utilities/#technology-array-management","title":"Technology Array Management","text":""},{"location":"backend/utilities/#updatetechnologyinarrayjs","title":"<code>updateTechnologyInArray.js</code>","text":"<p>Provides helper functionality for updating technology names within arrays, supporting technology normalisation processes.</p>"},{"location":"backend/utilities/#method-updatetechnologyinarrayarray-from-to","title":"Method: <code>updateTechnologyInArray(array, from, to)</code>","text":"<p>Updates technology names in arrays while tracking whether changes occurred.</p> <p>Parameters:</p> <ul> <li><code>array</code> (string[]) - Array of technology names</li> <li><code>from</code> (string) - Original technology name to replace</li> <li><code>to</code> (string) - New technology name</li> </ul> <p>Returns: Object containing updated array and change status</p> <pre><code>{\n  array: string[],    // Updated array\n  updated: boolean    // Whether an update occurred\n}\n</code></pre> <p>Features:</p> <ul> <li>Case-sensitive matching</li> <li>Non-destructive operation (returns new array)</li> <li>Change tracking for audit purposes</li> <li>Handles null/undefined arrays gracefully</li> </ul> <p>Example Usage:</p> <pre><code>const { updateTechnologyInArray } = require('./utilities/updateTechnologyInArray');\n\nconst technologies = ['React', 'Vue.js', 'Angular'];\n\n// Update Vue.js to Vue\nconst result = updateTechnologyInArray(technologies, 'Vue.js', 'Vue');\nconsole.log(result.array); // [\"React\", \"Vue\", \"Angular\"]\nconsole.log(result.updated); // true\n\n// Attempt to update non-existent technology\nconst noChange = updateTechnologyInArray(technologies, 'Svelte', 'SvelteKit');\nconsole.log(noChange.updated); // false\n</code></pre>"},{"location":"backend/utilities/#integration-examples","title":"Integration Examples","text":""},{"location":"backend/utilities/#complete-authentication-flow","title":"Complete Authentication Flow","text":"<pre><code>const { getAppAndInstallation } = require('./utilities/getAppAndInstallation');\n\nasync function authenticatedGitHubOperation() {\n  try {\n    // Get authenticated client\n    const octokit = await getAppAndInstallation();\n\n    // Perform GitHub API operations\n    const repos = await octokit.request('GET /orgs/{org}/repos', {\n      org: process.env.GITHUB_ORG,\n    });\n\n    return repos.data;\n  } catch (error) {\n    console.error('GitHub operation failed:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"backend/utilities/#bulk-data-transformation","title":"Bulk Data Transformation","text":"<pre><code>const { transformProjectToCSVFormat } = require('./utilities/projectDataTransformer');\n\nasync function exportProjectsToCSV(projects) {\n  const csvData = projects\n    .map((project) =&gt; {\n      try {\n        return transformProjectToCSVFormat(project);\n      } catch (error) {\n        console.error(`Failed to transform project ${project.details?.[0]?.name}:`, error);\n        return null;\n      }\n    })\n    .filter(Boolean);\n\n  return csvData;\n}\n</code></pre>"},{"location":"backend/utilities/#technology-normalisation","title":"Technology Normalisation","text":"<pre><code>const { updateTechnologyInArray } = require('./utilities/updateTechnologyInArray');\n\nfunction normaliseProjectTechnologies(project, normalisationMap) {\n  let updated = false;\n  const updatedProject = { ...project };\n\n  // Update main languages\n  for (const [from, to] of Object.entries(normalisationMap)) {\n    const result = updateTechnologyInArray(project.architecture.languages.main, from, to);\n\n    if (result.updated) {\n      updatedProject.architecture.languages.main = result.array;\n      updated = true;\n    }\n  }\n\n  return { project: updatedProject, updated };\n}\n</code></pre>"},{"location":"backend/utilities/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>All utilities follow consistent error handling patterns</li> <li>Functions are designed to be composable and reusable</li> <li>Authentication utilities handle AWS/GitHub integration securely</li> <li>Data transformers preserve original data structure integrity</li> <li>Array utilities provide audit trails for changes</li> <li>Compatible with both synchronous and asynchronous workflows</li> </ul>"},{"location":"backend/services/cognitoService/","title":"Cognito Service","text":"<p>The Cognito Service (<code>services/cognitoService.js</code>) handles AWS Cognito authentication and authorisation for the Digital Landscape application using the <code>aws-jwt-verify</code> library.</p>"},{"location":"backend/services/cognitoService/#overview","title":"Overview","text":"<p>The service provides a centralised authentication system that:</p> <ul> <li>Validates JWT tokens from AWS Application Load Balancer (ALB) and Cognito</li> <li>Implements role-based access control through Cognito user groups</li> <li>Provides middleware for protecting API endpoints</li> <li>Handles development mode authentication bypass</li> <li>Extracts user information including email and group memberships</li> </ul>"},{"location":"backend/services/cognitoService/#architecture","title":"Architecture","text":""},{"location":"backend/services/cognitoService/#token-verification","title":"Token Verification","text":"<p>The service uses two types of JWT verifiers:</p> <pre><code>// ALB JWT Verifier - validates tokens from Application Load Balancer\nconst verifier = AlbJwtVerifier.create({\n  albArn: process.env.ALB_ARN,\n  issuer: `https://cognito-idp.${process.env.AWS_REGION}.amazonaws.com/${process.env.COGNITO_USER_POOL_ID}`,\n  clientId: process.env.COGNITO_USER_POOL_CLIENT_ID,\n});\n\n// Cognito JWT Verifier - validates access tokens containing group information\nconst cognitoVerifier = CognitoJwtVerifier.create({\n  tokenUse: 'access',\n  userPoolId: process.env.COGNITO_USER_POOL_ID,\n  clientId: process.env.COGNITO_USER_POOL_CLIENT_ID,\n});\n</code></pre>"},{"location":"backend/services/cognitoService/#user-groups-permissions","title":"User Groups &amp; Permissions","text":"<p>The system recognises the following Cognito groups:</p> <ul> <li><code>admin</code> - Full administrative access to all endpoints</li> <li><code>reviewer</code> - Access to review functionality and technology radar updates</li> <li>Multiple groups - Users can belong to both groups for expanded permissions</li> </ul>"},{"location":"backend/services/cognitoService/#core-functions","title":"Core Functions","text":""},{"location":"backend/services/cognitoService/#verifyjwtreq-res-next","title":"<code>verifyJwt(req, res, next)</code>","text":"<p>Base authentication middleware that:</p> <ul> <li>Checks if authentication is disabled (development mode)</li> <li>Validates ALB and Cognito JWT tokens</li> <li>Extracts user information and attaches to <code>req.user</code></li> <li>Returns 401 Unauthorised for invalid tokens</li> </ul> <pre><code>// Example usage\napp.use('/protected-route', verifyJwt, routeHandler);\n</code></pre>"},{"location":"backend/services/cognitoService/#requireadminreq-res-next","title":"<code>requireAdmin(req, res, next)</code>","text":"<p>Administrative access middleware that:</p> <ul> <li>Ensures user is authenticated</li> <li>Verifies user belongs to <code>admin</code> group</li> <li>Returns 403 Forbidden for insufficient permissions</li> </ul> <pre><code>// Example usage\napp.use('/admin/api', verifyJwt, requireAdmin, adminRoutes);\n</code></pre>"},{"location":"backend/services/cognitoService/#requirereviewerreq-res-next","title":"<code>requireReviewer(req, res, next)</code>","text":"<p>Reviewer access middleware that:</p> <ul> <li>Ensures user is authenticated</li> <li>Verifies user belongs to <code>reviewer</code> group</li> <li>Returns 403 Forbidden for insufficient permissions</li> </ul> <pre><code>// Example usage\napp.use('/review/api', verifyJwt, requireReviewer, reviewRoutes);\n</code></pre>"},{"location":"backend/services/cognitoService/#getuserinforeq-res","title":"<code>getUserInfo(req, res)</code>","text":"<p>Endpoint handler for <code>/user/api/info</code> that:</p> <ul> <li>Returns user information including email and groups</li> <li>Handles development mode with mock user data</li> <li>Provides authentication status to frontend</li> </ul>"},{"location":"backend/services/cognitoService/#development-mode","title":"Development Mode","text":"<p>When <code>NODE_ENV=development</code>, the service:</p> <ul> <li>Bypasses all authentication checks</li> <li>Provides a default developer user with admin and reviewer permissions</li> <li>Logs authentication bypass messages</li> <li>Uses configurable groups from <code>DEV_USER_GROUPS</code> environment variable</li> </ul> <pre><code>const getDevUser = () =&gt; ({\n  email: 'dev@ons.gov.uk',\n  groups: process.env.DEV_USER_GROUPS?.split(',') || ['admin', 'reviewer'],\n});\n</code></pre>"},{"location":"backend/services/cognitoService/#user-object-structure","title":"User Object Structure","text":"<p>The service extracts and provides user objects with the following structure:</p> <pre><code>{\n  email: \"user@example.com\",      // User's email from Cognito\n  groups: [\"admin\", \"reviewer\"]   // Array of Cognito groups\n}\n</code></pre>"},{"location":"backend/services/cognitoService/#frontend-integration","title":"Frontend Integration","text":""},{"location":"backend/services/cognitoService/#user-profile-display","title":"User Profile Display","text":"<p>The authentication information is used by frontend components:</p> <ul> <li>Sidebar - Shows user email and role-appropriate icons</li> <li>MenuDropdown - Displays user information and logout option</li> <li>UserProfile - Renders different icons based on user groups:</li> <li><code>TbUser</code> - Default user (no groups)</li> <li><code>TbUserShield</code> - Admin user</li> <li><code>TbEditCircle</code> - Reviewer user</li> <li><code>TbUsers</code> - User with both admin and reviewer roles</li> </ul>"},{"location":"backend/services/cognitoService/#author-attribution","title":"Author Attribution","text":"<p>When reviewers make changes to technologies:</p> <ul> <li>Their email is automatically captured from the authenticated session</li> <li>Changes are attributed to the user for audit purposes</li> <li>No additional input required from the user</li> </ul>"},{"location":"backend/services/cognitoService/#error-handling","title":"Error Handling","text":"<p>The service provides comprehensive error handling:</p>"},{"location":"backend/services/cognitoService/#authentication-errors","title":"Authentication Errors","text":"<ul> <li>Missing Tokens - Returns 401 when ALB or access tokens are missing</li> <li>Invalid Tokens - Returns 401 when JWT verification fails</li> <li>Token Verification Errors - Logs detailed error information</li> </ul>"},{"location":"backend/services/cognitoService/#authorisation-errors","title":"Authorisation Errors","text":"<ul> <li>Missing Authentication - Returns 401 when user object is not present</li> <li>Insufficient Permissions - Returns 403 when user lacks required group membership</li> <li>Role Validation - Checks group membership before granting access</li> </ul>"},{"location":"backend/services/cognitoService/#environment-variables","title":"Environment Variables","text":"<p>The service requires the following environment variables:</p>"},{"location":"backend/services/cognitoService/#required-production","title":"Required (Production)","text":"<pre><code>ALB_ARN=arn:aws:elasticloadbalancing:region:account:loadbalancer/app/name\nAWS_REGION=eu-west-2\nCOGNITO_USER_POOL_ID=eu-west-2_xxxxxxxxx\nCOGNITO_USER_POOL_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"backend/services/cognitoService/#optional-development","title":"Optional (Development)","text":"<pre><code>NODE_ENV=development\nDEV_USER_GROUPS=admin,reviewer\n</code></pre>"},{"location":"backend/services/cognitoService/#security-considerations","title":"Security Considerations","text":""},{"location":"backend/services/cognitoService/#token-validation","title":"Token Validation","text":"<ul> <li>Uses AWS-provided <code>aws-jwt-verify</code> library for secure token validation</li> <li>Validates both ALB and Cognito tokens for complete authentication</li> <li>Ensures tokens are from the correct Cognito User Pool and client</li> </ul>"},{"location":"backend/services/cognitoService/#group-based-access","title":"Group-based Access","text":"<ul> <li>Implements principle of least privilege through group-based access</li> <li>Separates administrative and review functions</li> <li>Allows granular permission control through Cognito groups</li> </ul>"},{"location":"backend/services/cognitoService/#development-security","title":"Development Security","text":"<ul> <li>Authentication bypass only available in development environment</li> <li>Clear logging of authentication bypass events</li> <li>Configurable development user permissions</li> </ul>"},{"location":"backend/services/cognitoService/#usage-examples","title":"Usage Examples","text":""},{"location":"backend/services/cognitoService/#protecting-admin-routes","title":"Protecting Admin Routes","text":"<pre><code>const express = require('express');\nconst { verifyJwt, requireAdmin } = require('../services/cognitoService');\n\nconst router = express.Router();\n\n// All admin routes require authentication and admin group membership\nrouter.use(verifyJwt);\nrouter.use(requireAdmin);\n\nrouter.post('/banners', handleBannerUpdate);\nrouter.post('/tech-radar/update', handleTechRadarUpdate);\n\nmodule.exports = router;\n</code></pre>"},{"location":"backend/services/cognitoService/#protecting-review-routes","title":"Protecting Review Routes","text":"<pre><code>const express = require('express');\nconst { verifyJwt, requireReviewer } = require('../services/cognitoService');\n\nconst router = express.Router();\n\n// All review routes require authentication and reviewer group membership\nrouter.use(verifyJwt);\nrouter.use(requireReviewer);\n\nrouter.post('/tech-radar/update', handleReviewerUpdate);\n\nmodule.exports = router;\n</code></pre>"},{"location":"backend/services/cognitoService/#user-information-endpoint","title":"User Information Endpoint","text":"<pre><code>const express = require('express');\nconst { getUserInfo } = require('../services/cognitoService');\n\nconst router = express.Router();\n\n// Public endpoint that handles its own authentication\nrouter.get('/info', getUserInfo);\n\nmodule.exports = router;\n</code></pre>"},{"location":"backend/services/cognitoService/#troubleshooting","title":"Troubleshooting","text":""},{"location":"backend/services/cognitoService/#common-issues","title":"Common Issues","text":"<ol> <li>401 Unauthorised Errors</li> <li>Check ALB configuration and token headers</li> <li>Verify Cognito User Pool and Client ID configuration</li> <li> <p>Ensure tokens are properly forwarded by ALB</p> </li> <li> <p>403 Forbidden Errors</p> </li> <li>Verify user is assigned to correct Cognito groups</li> <li>Check group names match service expectations</li> <li> <p>Confirm user has authenticated successfully</p> </li> <li> <p>Development Mode Issues</p> </li> <li>Ensure <code>NODE_ENV=development</code> is set</li> <li>Check <code>DEV_USER_GROUPS</code> environment variable</li> <li>Verify development user creation</li> </ol>"},{"location":"backend/services/cognitoService/#debugging","title":"Debugging","text":"<p>Enable detailed logging by setting log level to debug:</p> <pre><code>LOG_LEVEL=debug\n</code></pre> <p>This will provide detailed information about:</p> <ul> <li>Token verification attempts</li> <li>Group membership checks</li> <li>Authentication bypass events</li> <li>Error details and stack traces</li> </ul>"},{"location":"backend/services/githubService/","title":"GitHub Service","text":"<p>The GitHub Service provides centralised functionality for interacting with the GitHub API, specifically for retrieving GitHub Copilot metrics and seat information. It handles authentication through the GitHub App integration and provides automatic pagination for large data sets.</p>"},{"location":"backend/services/githubService/#overview","title":"Overview","text":"<p>The service specialises in GitHub Copilot data retrieval:</p> <ul> <li>Organisation-level Copilot metrics</li> <li>Seat information and assignment data</li> <li>Automatic pagination handling</li> <li>Integration with GitHub App authentication</li> </ul>"},{"location":"backend/services/githubService/#dependencies","title":"Dependencies","text":"<p>The service relies on:</p> <ul> <li>GitHub App authentication (via <code>getAppAndInstallation</code> utility)</li> <li>Application logging system</li> <li>Environment variables for organisation configuration</li> </ul>"},{"location":"backend/services/githubService/#methods","title":"Methods","text":""},{"location":"backend/services/githubService/#getcopilotorgmetrics","title":"<code>getCopilotOrgMetrics()</code>","text":"<p>Retrieves comprehensive GitHub Copilot metrics for the organisation.</p> <p>Returns: Promise resolving to Copilot metrics object</p> <p>GitHub API Response:</p> <p>More information on the response structure can be found here.</p> <p>Example:</p> <pre><code>const githubService = require('./githubService');\n\ntry {\n  const metrics = await githubService.getCopilotOrgMetrics();\n  console.log(`Total Copilot seats: ${metrics.seat_breakdown.total}`);\n} catch (error) {\n  console.error('Failed to retrieve Copilot metrics:', error);\n}\n</code></pre>"},{"location":"backend/services/githubService/#getcopilotteammetricsteamslug","title":"<code>getCopilotTeamMetrics(teamSlug)</code>","text":"<p>Retrieves GitHub Copilot metrics for a team in the organisation.</p> <p>Returns: Promise resolving to Copilot metrics object</p> <p>GitHub API Response:</p> <p>More information on the response structure can be found here.</p> <p>Example:</p> <pre><code>const githubService = require('./githubService');\nconst teamSlug = req.query.teamSlug;\n\ntry {\n  const metrics = await githubService.getCopilotTeamMetrics(teamSlug);\n  console.log(`Total Copilot seats for team: ${metrics.seat_breakdown.total}`);\n} catch (error) {\n  console.error('Failed to retrieve Copilot metrics for team:', error);\n}\n</code></pre>"},{"location":"backend/services/githubService/#getteammembersteamslug","title":"<code>getTeamMembers(teamSlug)</code>","text":"<p>Retrieves members of a specific team.</p> <p>Returns: Promise resolving to an array of team members with login, name, and url</p> <p>GitHub API Response:</p> <p>More information on the response structure can be found here.</p> <p>Example:</p> <pre><code>const githubService = require('./githubService');\nconst teamSlug = req.query.teamSlug;\n\ntry {\n  const members = await githubService.getTeamMembers(teamSlug);\n  console.log(`Team members of ${teamSlug}: ${members}`);\n} catch (error) {\n  console.error('Failed to retrieve team members:', error);\n}\n</code></pre>"},{"location":"backend/services/githubService/#getuserteamsusertoken","title":"<code>getUserTeams(userToken)</code>","text":"<p>Retrieves teams the authenticated user is a member of in the organisation.</p> <p>Returns: Promise resolving to an array of teams</p> <p>GitHub API Response:</p> <p>More information on the response structure can be found here.</p> <p>Example:</p> <pre><code>const githubService = require('./githubService');\n\ntry {\n  const userTeams = await githubService.getUserTeams(userToken);\n  console.log(`User teams: ${userTeams}`);\n} catch (error) {\n  console.error('Failed to retrieve user teams:', error);\n}\n</code></pre>"},{"location":"backend/services/githubService/#getcopilotseats","title":"<code>getCopilotSeats()</code>","text":"<p>Retrieves detailed information about all GitHub Copilot seats in the organisation.</p> <p>Returns: Promise resolving to array of seat objects</p> <p>GitHub API Response:</p> <p>More information on the response structure can be found here.</p> <pre><code>[\n  {\n    created_at: string,\n    updated_at: string,\n    pending_cancellation_date: string | null,\n    last_activity_at: string,\n    last_activity_editor: string,\n    assignee: {\n      login: string,\n      id: number,\n      avatar_url: string,\n      // ... other user properties\n    },\n  },\n  // ... more seats\n];\n</code></pre> <p>Features:</p> <ul> <li>Automatic pagination handling for large organisations</li> <li>Complete seat information including activity data</li> <li>User assignee details</li> </ul> <p>Example:</p> <pre><code>const seats = await githubService.getCopilotSeats();\nconsole.log(`Retrieved ${seats.length} Copilot seats`);\n\n// Find recently active seats\nconst recentlyActive = seats.filter(\n  (seat) =&gt; new Date(seat.last_activity_at) &gt; new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n);\nconsole.log(`${recentlyActive.length} seats active in the last 7 days`);\n</code></pre>"},{"location":"backend/services/githubService/#authentication","title":"Authentication","text":"<p>The service uses GitHub App authentication:</p> <ol> <li>Retrieves GitHub App credentials from AWS Secrets Manager</li> <li>Authenticates using the App ID and private key</li> <li>Gets installation access for the configured organisation</li> <li>Uses installation-scoped Octokit instance for API calls</li> </ol>"},{"location":"backend/services/githubService/#pagination-handling","title":"Pagination Handling","text":"<p>The <code>getCopilotSeats()</code> method automatically handles pagination:</p> <ul> <li>Starts with the first page of results</li> <li>Continues fetching until all pages are retrieved</li> <li>Combines results into a single array</li> <li>Logs progress for monitoring</li> </ul> <pre><code>// Automatic pagination example\nlet allSeats = [];\nlet page = 1;\n\nwhile (true) {\n  const response = await octokit.request(`GET /orgs/${GITHUB_ORG}/copilot/billing/seats`, {\n    per_page: 100,\n    page,\n  });\n\n  if (response.data.seats.length === 0) break;\n\n  allSeats = allSeats.concat(response.data.seats);\n  page++;\n}\n</code></pre>"},{"location":"backend/services/githubService/#error-handling","title":"Error Handling","text":"<p>The service implements robust error handling:</p> <ul> <li>Logs authentication failures</li> <li>Handles GitHub API rate limiting</li> <li>Provides descriptive error messages</li> <li>Graceful degradation for failed requests</li> </ul>"},{"location":"backend/services/githubService/#environment-configuration","title":"Environment Configuration","text":"<p>Required environment variables:</p> <ul> <li><code>GITHUB_ORG</code> - Target GitHub organisation name</li> <li><code>GITHUB_APP_ID</code> - GitHub App ID for authentication</li> <li><code>AWS_SECRET_NAME</code> - AWS Secrets Manager secret containing private key</li> <li><code>AWS_REGION</code> - AWS region for Secrets Manager</li> </ul>"},{"location":"backend/services/githubService/#usage-examples","title":"Usage Examples","text":""},{"location":"backend/services/githubService/#retrieve-current-metrics","title":"Retrieve Current Metrics","text":"<pre><code>const githubService = require('../services/githubService');\n\nasync function getCopilotSummary() {\n  try {\n    const metrics = await githubService.getCopilotOrgMetrics();\n    const seats = await githubService.getCopilotSeats();\n\n    return {\n      totalSeats: metrics.seat_breakdown.total,\n      activeSeats: metrics.seat_breakdown.active_this_cycle,\n      seatDetails: seats.length,\n      lastUpdate: new Date().toISOString(),\n    };\n  } catch (error) {\n    console.error('Failed to get Copilot summary:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"backend/services/githubService/#monitor-seat-activity","title":"Monitor Seat Activity","text":"<pre><code>async function getInactiveSeats(daysThreshold = 30) {\n  const seats = await githubService.getCopilotSeats();\n  const cutoffDate = new Date(Date.now() - daysThreshold * 24 * 60 * 60 * 1000);\n\n  return seats\n    .filter((seat) =&gt; new Date(seat.last_activity_at) &lt; cutoffDate)\n    .map((seat) =&gt; ({\n      user: seat.assignee.login,\n      lastActivity: seat.last_activity_at,\n      daysSinceActivity: Math.floor(\n        (Date.now() - new Date(seat.last_activity_at)) / (1000 * 60 * 60 * 24)\n      ),\n    }));\n}\n</code></pre>"},{"location":"backend/services/githubService/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Uses authenticated GitHub App for enhanced rate limits</li> <li>Implements automatic pagination for scalability</li> <li>Provides comprehensive error logging</li> <li>Designed for organisation-level Copilot management</li> <li>Supports monitoring and analytics use cases</li> </ul>"},{"location":"backend/services/s3Service/","title":"S3 Service","text":"<p>The S3 Service provides a centralised interface for all Amazon S3 operations within the Digital Landscape backend. It implements a singleton pattern to ensure consistent S3 client instances and provides methods for common S3 operations.</p>"},{"location":"backend/services/s3Service/#overview","title":"Overview","text":"<p>The service manages three different S3 buckets:</p> <ul> <li>Main bucket - Primary application data storage</li> <li>TAT bucket - Technology Assessment Tool data</li> <li>Copilot bucket - GitHub Copilot metrics and data</li> </ul>"},{"location":"backend/services/s3Service/#configuration","title":"Configuration","text":"<p>The service automatically configures S3 clients based on environment variables:</p> <pre><code>const mainBucket = process.env.S3_BUCKET_NAME;\nconst tatBucket = process.env.S3_BUCKET_NAME_TAT;\nconst copilotBucket = process.env.S3_BUCKET_NAME_COPILOT;\n</code></pre>"},{"location":"backend/services/s3Service/#methods","title":"Methods","text":""},{"location":"backend/services/s3Service/#getobjectbucket-key","title":"<code>getObject(bucket, key)</code>","text":"<p>Retrieves an object from the specified S3 bucket.</p> <p>Parameters:</p> <ul> <li><code>bucket</code> (string) - The S3 bucket name</li> <li><code>key</code> (string) - The object key/path</li> </ul> <p>Returns: Promise resolving to the object data</p> <p>Example:</p> <pre><code>const s3Service = require('./s3Service');\nconst data = await s3Service.getObject('my-bucket', 'data/file.json');\n</code></pre>"},{"location":"backend/services/s3Service/#putobjectbucket-key-body-contenttype-applicationjson","title":"<code>putObject(bucket, key, body, contentType = 'application/json')</code>","text":"<p>Stores an object in the specified S3 bucket.</p> <p>Parameters:</p> <ul> <li><code>bucket</code> (string) - The S3 bucket name</li> <li><code>key</code> (string) - The object key/path</li> <li><code>body</code> (any) - The object data to store</li> <li><code>contentType</code> (string, optional) - MIME type (default: 'application/json')</li> </ul> <p>Returns: Promise resolving to the put operation result</p> <p>Example:</p> <pre><code>const result = await s3Service.putObject('my-bucket', 'data/file.json', { message: 'Hello World' });\n</code></pre>"},{"location":"backend/services/s3Service/#getobjectviasignedurlbucket-key-expiresin-3600","title":"<code>getObjectViaSignedUrl(bucket, key, expiresIn = 3600)</code>","text":"<p>Generates a presigned URL for accessing an S3 object.</p> <p>Parameters:</p> <ul> <li><code>bucket</code> (string) - The S3 bucket name</li> <li><code>key</code> (string) - The object key/path</li> <li><code>expiresIn</code> (number, optional) - URL expiration time in seconds (default: 3600)</li> </ul> <p>Returns: Promise resolving to the signed URL</p> <p>Example:</p> <pre><code>const signedUrl = await s3Service.getObjectViaSignedUrl('my-bucket', 'private/file.pdf', 7200);\n</code></pre>"},{"location":"backend/services/s3Service/#bucket-configuration-methods","title":"Bucket Configuration Methods","text":""},{"location":"backend/services/s3Service/#getmainbucket","title":"<code>getMainBucket()</code>","text":"<p>Returns the main application bucket name.</p>"},{"location":"backend/services/s3Service/#gettatbucket","title":"<code>getTatBucket()</code>","text":"<p>Returns the TAT (Technology Assessment Tool) bucket name.</p>"},{"location":"backend/services/s3Service/#getcopilotbucket","title":"<code>getCopilotBucket()</code>","text":"<p>Returns the Copilot metrics bucket name.</p>"},{"location":"backend/services/s3Service/#error-handling","title":"Error Handling","text":"<p>The service includes comprehensive error handling:</p> <ul> <li>Logs all S3 operations and errors using the application logger</li> <li>Throws descriptive errors for failed operations</li> <li>Handles AWS SDK errors appropriately</li> </ul>"},{"location":"backend/services/s3Service/#usage-example","title":"Usage Example","text":"<pre><code>const s3Service = require('../services/s3Service');\n\n// Get project data\ntry {\n  const projectData = await s3Service.getObject(s3Service.getMainBucket(), 'projects/data.json');\n  console.log('Project data retrieved successfully');\n} catch (error) {\n  console.error('Failed to retrieve project data:', error);\n}\n\n// Store updated data\ntry {\n  await s3Service.putObject(s3Service.getMainBucket(), 'projects/updated-data.json', {\n    projects: updatedProjects,\n  });\n  console.log('Data stored successfully');\n} catch (error) {\n  console.error('Failed to store data:', error);\n}\n</code></pre>"},{"location":"backend/services/s3Service/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Uses singleton pattern to maintain single S3 client instances</li> <li>Automatically stringifies JSON data for storage</li> <li>Provides consistent error logging across all operations</li> <li>Supports multiple bucket configurations for different data types</li> </ul>"},{"location":"backend/services/techRadarService/","title":"Tech Radar Service","text":"<p>The Tech Radar Service provides centralised functionality for managing technology radar data, including retrieval, parsing, and updating of technology entries. It handles the complex logic of technology radar operations with proper validation and error handling.</p>"},{"location":"backend/services/techRadarService/#overview","title":"Overview","text":"<p>The service manages technology radar operations:</p> <ul> <li>Technology radar data retrieval and parsing</li> <li>Entry updates with validation</li> <li>Data structure management</li> <li>Integration with S3 storage</li> <li>Error handling and logging</li> </ul>"},{"location":"backend/services/techRadarService/#dependencies","title":"Dependencies","text":"<p>The service integrates with:</p> <ul> <li>S3 Service for data storage and retrieval</li> <li>Application logging system</li> <li>JSON parsing and validation utilities</li> </ul>"},{"location":"backend/services/techRadarService/#methods","title":"Methods","text":""},{"location":"backend/services/techRadarService/#gettechradardata","title":"<code>getTechRadarData()</code>","text":"<p>Retrieves and parses the complete technology radar dataset.</p> <p>Returns: Promise resolving to parsed tech radar object</p> <p>Response Structure:</p> <pre><code>{\n  quadrants: [\n    {\n      name: string,\n      items: [\n        {\n          name: string,\n          ring: string,\n          quadrant: string,\n          isNew: boolean,\n          description: string,\n        },\n      ],\n    },\n  ];\n}\n</code></pre> <p>Example:</p> <pre><code>const techRadarService = require('./techRadarService');\n\ntry {\n  const radarData = await techRadarService.getTechRadarData();\n  console.log(`Retrieved ${radarData.quadrants.length} quadrants`);\n} catch (error) {\n  console.error('Failed to retrieve tech radar data:', error);\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#updatetechradarentryentrydata","title":"<code>updateTechRadarEntry(entryData)</code>","text":"<p>Updates a specific technology entry in the radar dataset.</p> <p>Parameters:</p> <ul> <li><code>entryData</code> (object) - The technology entry data to update</li> </ul> <p>Entry Data Structure:</p> <pre><code>{\n  name: string,          // Technology name (required)\n  ring: string,          // Technology ring (adopt/trial/assess/hold)\n  quadrant: string,      // Technology quadrant\n  isNew: boolean,        // Whether this is a new entry\n  description: string    // Technology description\n}\n</code></pre> <p>Returns: Promise resolving to update result</p> <p>Validation:</p> <ul> <li>Ensures required fields are present</li> <li>Validates ring values against allowed options</li> <li>Checks for duplicate entries</li> <li>Maintains data integrity</li> </ul> <p>Example:</p> <pre><code>const newEntry = {\n  name: 'React Hooks',\n  ring: 'adopt',\n  quadrant: 'frameworks',\n  isNew: true,\n  description: 'Modern React state management pattern',\n};\n\ntry {\n  const result = await techRadarService.updateTechRadarEntry(newEntry);\n  console.log('Technology entry updated successfully');\n} catch (error) {\n  console.error('Failed to update entry:', error);\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#data-structure-management","title":"Data Structure Management","text":""},{"location":"backend/services/techRadarService/#quadrant-organisation","title":"Quadrant Organisation","text":"<p>The service organises technologies into quadrants:</p> <ul> <li>Languages &amp; Frameworks - Programming languages and development frameworks</li> <li>Tools - Development and operational tools</li> <li>Platforms - Cloud platforms and infrastructure services</li> <li>Techniques - Development practices and methodologies</li> </ul>"},{"location":"backend/services/techRadarService/#ring-classification","title":"Ring Classification","text":"<p>Technologies are classified into rings based on adoption status:</p> <ul> <li>Adopt - Technologies ready for production use</li> <li>Trial - Technologies worth pursuing in proof of concepts</li> <li>Assess - Technologies to explore with the goal of understanding their fit</li> <li>Hold - Technologies to avoid or phase out</li> </ul>"},{"location":"backend/services/techRadarService/#validation-logic","title":"Validation Logic","text":"<p>The service implements comprehensive validation:</p>"},{"location":"backend/services/techRadarService/#entry-validation","title":"Entry Validation","text":"<pre><code>function validateEntry(entry) {\n  const requiredFields = ['name', 'ring', 'quadrant'];\n  const validRings = ['adopt', 'trial', 'assess', 'hold'];\n\n  // Check required fields\n  for (const field of requiredFields) {\n    if (!entry[field]) {\n      throw new Error(`Missing required field: ${field}`);\n    }\n  }\n\n  // Validate ring value\n  if (!validRings.includes(entry.ring.toLowerCase())) {\n    throw new Error(`Invalid ring: ${entry.ring}`);\n  }\n\n  return true;\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#duplicate-detection","title":"Duplicate Detection","text":"<pre><code>function checkForDuplicates(entries, newEntry) {\n  const duplicate = entries.find(\n    (entry) =&gt;\n      entry.name.toLowerCase() === newEntry.name.toLowerCase() &amp;&amp;\n      entry.quadrant === newEntry.quadrant\n  );\n\n  if (duplicate) {\n    throw new Error(`Entry already exists: ${newEntry.name}`);\n  }\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#storage-integration","title":"Storage Integration","text":"<p>The service seamlessly integrates with S3 storage:</p>"},{"location":"backend/services/techRadarService/#data-retrieval","title":"Data Retrieval","text":"<pre><code>// Retrieve current radar data\nconst radarData = await s3Service.getObject(s3Service.getMainBucket(), 'tech-radar-data.json');\n</code></pre>"},{"location":"backend/services/techRadarService/#data-persistence","title":"Data Persistence","text":"<pre><code>// Store updated radar data\nawait s3Service.putObject(\n  s3Service.getMainBucket(),\n  'tech-radar-data.json',\n  updatedRadarData,\n  'application/json'\n);\n</code></pre>"},{"location":"backend/services/techRadarService/#error-handling","title":"Error Handling","text":"<p>The service provides comprehensive error handling:</p> <ul> <li>Validation Errors - Clear messages for invalid data</li> <li>Storage Errors - Handling of S3 operation failures</li> <li>Parsing Errors - Management of malformed JSON data</li> <li>Network Errors - Graceful handling of connectivity issues</li> </ul>"},{"location":"backend/services/techRadarService/#usage-examples","title":"Usage Examples","text":""},{"location":"backend/services/techRadarService/#retrieve-technology-summary","title":"Retrieve Technology Summary","text":"<pre><code>async function getTechnologySummary() {\n  try {\n    const radarData = await techRadarService.getTechRadarData();\n\n    const summary = radarData.quadrants.map((quadrant) =&gt; ({\n      name: quadrant.name,\n      totalTechnologies: quadrant.items.length,\n      newTechnologies: quadrant.items.filter((item) =&gt; item.isNew).length,\n      adoptRing: quadrant.items.filter((item) =&gt; item.ring === 'adopt').length,\n      trialRing: quadrant.items.filter((item) =&gt; item.ring === 'trial').length,\n    }));\n\n    return summary;\n  } catch (error) {\n    console.error('Failed to get technology summary:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#bulk-update-technologies","title":"Bulk Update Technologies","text":"<pre><code>async function bulkUpdateTechnologies(entries) {\n  const results = [];\n\n  for (const entry of entries) {\n    try {\n      await techRadarService.updateTechRadarEntry(entry);\n      results.push({ name: entry.name, status: 'success' });\n    } catch (error) {\n      results.push({ name: entry.name, status: 'error', error: error.message });\n    }\n  }\n\n  return results;\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#search-technologies","title":"Search Technologies","text":"<pre><code>async function searchTechnologies(searchTerm) {\n  const radarData = await techRadarService.getTechRadarData();\n  const allTechnologies = radarData.quadrants.flatMap((q) =&gt; q.items);\n\n  return allTechnologies.filter(\n    (tech) =&gt;\n      tech.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      tech.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n}\n</code></pre>"},{"location":"backend/services/techRadarService/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Uses transaction-like operations for data consistency</li> <li>Implements optimistic locking for concurrent updates</li> <li>Provides audit trail through logging</li> <li>Supports batch operations for efficiency</li> <li>Maintains backward compatibility with existing data formats</li> <li>Includes comprehensive validation to prevent data corruption</li> </ul>"},{"location":"components/infoBox/","title":"InfoBox Component Documentation","text":"<p>The InfoBox component provides a draggable, resizable information panel that displays detailed information about selected items in the Tech Radar and on the Review page.</p>"},{"location":"components/infoBox/#props","title":"Props","text":"<p>The InfoBox component accepts the following props:</p> Prop Type Default Description <code>isAdmin</code> boolean <code>false</code> Whether the current user has administrative privileges <code>selectedItem</code> object <code>undefined</code> The technology item to display details for <code>initialPosition</code> object <code>{ x: 24, y: 80 }</code> Starting coordinates for the InfoBox <code>onClose</code> function Required Handler function called when the InfoBox is closed <code>timelineAscending</code> boolean Required Whether to display timeline in ascending order <code>setTimelineAscending</code> function Required Function to toggle timeline sort order <code>selectedTimelineItem</code> object <code>undefined</code> Currently selected timeline entry <code>setSelectedTimelineItem</code> function Required Function to update selected timeline entry <code>projectsForTech</code> array <code>undefined</code> List of projects using this technology <code>handleProjectClick</code> function Required Handler for project selection <code>onEditConfirm</code> function <code>undefined</code> Handler for confirming edits (admin only) <code>onEditCancel</code> function <code>undefined</code> Handler for cancelling edits (admin only) <code>isHighlighted</code> boolean <code>false</code> Whether the selected technology is highlighted (this indicates a directorate specific move) <code>selectedDirectorate</code> string <code>Digital Services (DS)</code> The currently selected directorate. This is used to provide a context message on the position of the selected technology (i.e. if the directorate isn't Digital Services (DS), say whether the position was imported from Digital Services or if it was moved specifically for the selected directorate) <code>timeline</code> array <code>selectedItem ? selectedItem.timeline : []</code> The timeline data for the selected technology. This allows us to pass in a timeline if we don't want to use the one that comes with the <code>selectedItem</code> (i.e. on the Review Page)."},{"location":"components/infoBox/#usage","title":"Usage","text":"<pre><code>import InfoBox from '../components/InfoBox/InfoBox';\n\nfunction TechRadarView() {\n  const [selectedTech, setSelectedTech] = useState(null);\n  const [timelineAscending, setTimelineAscending] = useState(true);\n  const [selectedTimelineItem, setSelectedTimelineItem] = useState(null);\n\n  return (\n    &lt;div className=\"radar-container\"&gt;\n      {/* Radar visualisation */}\n\n      {selectedTech &amp;&amp; (\n        &lt;InfoBox\n          selectedItem={selectedTech}\n          onClose={() =&gt; setSelectedTech(null)}\n          timelineAscending={timelineAscending}\n          setTimelineAscending={setTimelineAscending}\n          selectedTimelineItem={selectedTimelineItem}\n          setSelectedTimelineItem={setSelectedTimelineItem}\n          projectsForTech={projectsData}\n          handleProjectClick={handleProjectSelection}\n        /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/infoBox/#functionalities","title":"Functionalities","text":"<p>The InfoBox implements a custom drag-and-drop system that:</p> <ul> <li>Allows users to reposition the box by dragging the icon that is to the left of the technology name</li> <li>Maintains the box position during user interaction</li> <li>Provides visual feedback during dragging shadow effects</li> </ul> <p>The timeline section displays the history of a technology's movement through different rings:</p> <ul> <li>Chronological representation of status changes</li> <li>Visual indicators for upward/downward/lateral movements</li> <li>Toggleable sort order (oldest-first or newest-first)</li> <li>Interactive selection to view detailed descriptions of each change</li> </ul> <p>For users with reviewer privileges, the InfoBox provides:</p> <ul> <li>Inline editing of technology title and category</li> <li>Form controls for modifying technology details</li> <li>Confirmation and cancellation options for edits</li> <li>Visual indicators of edit mode</li> </ul> <p>When no item is selected, the InfoBox displays a placeholder message instructing users how to interact with the radar visualisation.</p>"},{"location":"components/multiSelect/","title":"MultiSelect","text":"<p>The MultiSelect component provides an interactive dropdown interface for selecting multiple options from a list.</p>"},{"location":"components/multiSelect/#features","title":"Features","text":"<ul> <li>Allows users to select multiple items from a dropdown list</li> <li>Includes real-time filtering of options as users type</li> <li>Clearly indicates selected items with tags</li> <li>Supports keyboard navigation and interaction</li> <li>Configurable placeholder text when no items are selected</li> <li>Support for disabling the component when needed</li> <li>Automatically closes the dropdown when clicking elsewhere</li> </ul>"},{"location":"components/multiSelect/#props","title":"Props","text":"<p>The MultiSelect component accepts the following props:</p> Prop Type Default Description <code>options</code> array Required Array of option objects with <code>value</code> and <code>label</code> properties <code>value</code> array Required Array of currently selected option objects <code>onChange</code> function Required Handler function called when selections change <code>placeholder</code> string <code>\"Select...\"</code> Text displayed when no options are selected <code>isDisabled</code> boolean <code>false</code> Whether the component is disabled"},{"location":"components/multiSelect/#usage","title":"Usage","text":"<pre><code>import MultiSelect from '../components/MultiSelect/MultiSelect';\n\nfunction FilterForm() {\n  const [selectedTechnologies, setSelectedTechnologies] = useState([]);\n\n  const technologyOptions = [\n    { value: 'react', label: 'React' },\n    { value: 'angular', label: 'Angular' },\n    { value: 'vue', label: 'Vue.js' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'nextjs', label: 'Next.js' },\n  ];\n\n  return (\n    &lt;div className=\"filter-form\"&gt;\n      &lt;label&gt;Technologies:&lt;/label&gt;\n      &lt;MultiSelect\n        options={technologyOptions}\n        value={selectedTechnologies}\n        onChange={setSelectedTechnologies}\n        placeholder=\"Select technologies...\"\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/multiSelect/#interaction-patterns","title":"Interaction Patterns","text":"<p>The MultiSelect component implements several interaction patterns:</p> <ul> <li>Click to Open: Clicking the control area opens the dropdown</li> <li>Search Filtering: Typing in the input filters the available options</li> <li>Click to Select: Clicking an option adds it to the selection</li> <li>Click to Remove: Clicking the close icon on a selected item removes it</li> <li>Click Outside to Close: Clicking outside the component closes the dropdown</li> </ul>"},{"location":"components/multiSelect/#selected-items-display","title":"Selected Items Display","text":"<p>Selected items are displayed as interactive tags within the control area:</p> <ul> <li>Each tag shows the option's label text</li> <li>Tags include a remove button (\u00d7) for quick removal</li> <li>Tags are visually distinct from the input area</li> <li>Multiple tags flow naturally within the available space</li> </ul>"},{"location":"components/multiSelect/#search-functionality","title":"Search Functionality","text":"<p>The component includes built-in search capabilities:</p> <ul> <li>Real-time filtering as the user types</li> <li>Case-insensitive matching against option labels</li> <li>Empty results handling (dropdown hides when no matches)</li> <li>Search term is cleared when a selection is made</li> </ul>"},{"location":"components/multiSelect/#styling","title":"Styling","text":"<p>The MultiSelect uses dedicated CSS defined in <code>../../styles/components/MultiSelect.css</code> with:</p>"},{"location":"components/skeletons/","title":"Skeleton Loading","text":"<p>Skeleton loading components provide visual placeholders that mimic the structure of content while it is being loaded. They improve the perceived performance of the application by reducing the jarring effect of empty spaces and sudden content appearance, creating a smoother, more engaging user experience.</p> <p>What is skeleton loading? (External Link)</p>"},{"location":"components/skeletons/#components","title":"Components","text":"<p>The Digital Landscape application includes several skeleton loading components designed to match the structure of their corresponding content components:</p>"},{"location":"components/skeletons/#skeletonstatcard","title":"SkeletonStatCard","text":"<p>The <code>SkeletonStatCard</code> component renders a placeholder for statistical cards that display metrics and values.</p>"},{"location":"components/skeletons/#props","title":"Props","text":"Prop Type Default Description <code>minWidth</code> string <code>\"0\"</code> Minimum width of the skeleton card"},{"location":"components/skeletons/#usage","title":"Usage","text":"<pre><code>import SkeletonStatCard from '../components/Statistics/Skeletons/SkeletonStatCard';\n\nfunction StatisticsPanel() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState(null);\n\n  // Fetch data and update loading state\n\n  return (\n    &lt;div className=\"statistics-panel\"&gt;\n      {isLoading ? (\n        &lt;&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n        &lt;/&gt;\n      ) : (\n        // Render actual stat cards with data\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/skeletons/#skeletonlanguagecard","title":"SkeletonLanguageCard","text":"<p>The <code>SkeletonLanguageCard</code> component renders a placeholder for language cards that display programming language statistics.</p>"},{"location":"components/skeletons/#usage_1","title":"Usage","text":"<pre><code>import SkeletonLanguageCard from '../components/Statistics/Skeletons/SkeletonLanguageCard';\n\nfunction LanguagePanel() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [languages, setLanguages] = useState([]);\n\n  // Fetch data and update loading state\n\n  return (\n    &lt;div className=\"language-panel\"&gt;\n      {isLoading ? (\n        &lt;&gt;\n          &lt;SkeletonLanguageCard /&gt;\n          &lt;SkeletonLanguageCard /&gt;\n          &lt;SkeletonLanguageCard /&gt;\n        &lt;/&gt;\n      ) : (\n        // Render actual language cards with data\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/skeletons/#animation","title":"Animation","text":"<p>All skeleton components feature a subtle pulsing animation.</p> <p>The animation is implemented using CSS keyframes that gradually fade the opacity in and out, creating a gentle pulsing effect.</p>"},{"location":"components/skeletons/#styling","title":"Styling","text":"<p>The skeleton components use dedicated CSS defined in <code>../../styles/components/SkeletonLoading.css</code> with:</p>"},{"location":"components/skeletons/#css-structure","title":"CSS Structure","text":"<p>The skeleton styling includes:</p> <ul> <li>Base <code>.skeleton</code> class with the pulsing animation</li> <li>Element-specific classes (e.g., <code>.skeleton-title</code>, <code>.skeleton-value</code>)</li> <li>Varied widths for different elements to create a natural appearance</li> <li>Responsive dimensions that adapt to different screen sizes</li> </ul>"},{"location":"components/skeletons/#implementation-details","title":"Implementation Details","text":"<p>Skeleton components are designed to be:</p> <ol> <li>Lightweight components with minimal logic</li> <li>Using CSS variables to match the application's theme</li> <li>Not interfering with screen readers or keyboard navigation</li> <li>Using CSS animations rather than JavaScript for smooth performance</li> </ol>"},{"location":"components/skeletons/#integration-with-components","title":"Integration with Components","text":"<p>Skeleton components are typically used in conditional rendering patterns:</p> <pre><code>{\n  isLoading ? &lt;SkeletonComponent /&gt; : &lt;ActualComponent data={data} /&gt;;\n}\n</code></pre>"},{"location":"components/statistics/","title":"Statistics","text":"<p>The Statistics component provides a visualisation of repository and programming language data across the organisation. It enables users to analyse technology usage patterns, filter data by various criteria, and interact with language statistics.</p>"},{"location":"components/statistics/#features","title":"Features","text":"<ul> <li>Displays detailed metrics for each programming language</li> <li>Filter statistics by various time periods including custom date ranges</li> <li>Toggle between active, archived, or all repositories</li> <li>Sort languages by name, repository count, or code size</li> <li>Highlight languages that appear in the Tech Radar</li> <li>Filter statistics by specific projects</li> <li>Search functionality to quickly find specific languages</li> <li>Visual indicators to match Tech Radar rings</li> </ul>"},{"location":"components/statistics/#props","title":"Props","text":"<p>The Statistics component accepts the following props:</p> Prop Type Default Description <code>data</code> object Required Object containing repository and language statistics <code>onTechClick</code> function Required Handler function called when a technology is clicked <code>onDateChange</code> function Required Handler function called when the date filter changes <code>isLoading</code> boolean Required Whether the statistics data is currently loading <code>projectsData</code> array Required Array of project objects for project filtering <code>onProjectsChange</code> function Required Handler function called when selected projects change <code>searchTerm</code> string <code>\"\"</code> Current search term for filtering languages"},{"location":"components/statistics/#usage","title":"Usage","text":"<pre><code>import Statistics from '../components/Statistics/Statistics';\n\nfunction StatisticsPage() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [projectsData, setProjectsData] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleTechClick = (techName) =&gt; {\n    // Navigate to tech radar or show tech details\n  };\n\n  const handleDateChange = (date, repoView) =&gt; {\n    // Fetch data for the selected date range and repository view\n    fetchStatistics(date, repoView).then((data) =&gt; {\n      setData(data);\n      setIsLoading(false);\n    });\n  };\n\n  const handleProjectsChange = (selectedProjects) =&gt; {\n    // Filter statistics by selected projects\n    fetchProjectStatistics(selectedProjects).then((data) =&gt; {\n      setData(data);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    &lt;div className=\"statistics-page\"&gt;\n      &lt;Statistics\n        data={data}\n        onTechClick={handleTechClick}\n        onDateChange={handleDateChange}\n        isLoading={isLoading}\n        projectsData={projectsData}\n        onProjectsChange={handleProjectsChange}\n        searchTerm={searchTerm}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/statistics/#date-filtering","title":"Date Filtering","text":"<p>The Statistics component provides several date filtering options:</p> <ul> <li>All Time: Shows statistics across the entire history</li> <li>Last Month: Filters to the past 30 days</li> <li>Last 3 Months: Filters to the past 90 days</li> <li>Last 6 Months: Filters to the past 180 days</li> <li>Last Year: Filters to the past 365 days</li> <li>Custom Date: Allows selection of a specific date to filter from</li> </ul> <p>When a date filter is applied, all statistics are recalculated to include only repositories with activity after the selected date.</p>"},{"location":"components/statistics/#repository-views","title":"Repository Views","text":"<p>The component offers three different repository view modes:</p> <ul> <li>Active Repositories: Shows only non-archived repositories (default)</li> <li>Archived Repositories: Shows only archived repositories</li> <li>All Repositories: Shows both active and archived repositories</li> </ul> <p>Each view provides different insights into the organisation's technology usage patterns.</p>"},{"location":"components/statistics/#language-statistics","title":"Language Statistics","text":"<p>For each programming language, the component displays:</p> <ul> <li>Repository Count: Number of repositories using the language</li> <li>Lines of Code: Total lines of code written in the language</li> <li>Average Size: Average size of the language usage per repository</li> <li>Tech Radar Status: Visual indicator of the language's status in the Tech Radar</li> </ul> <p>Languages can be sorted by any of these metrics in ascending or descending order.</p>"},{"location":"components/statistics/#tech-radar-integration","title":"Tech Radar Integration","text":"<p>Languages that appear in the Tech Radar are highlighted with their corresponding ring colour:</p> <ul> <li>Adopt: Technologies recommended for adoption</li> <li>Trial: Technologies in trial phase</li> <li>Assess: Technologies being assessed</li> <li>Hold: Technologies not recommended for new projects</li> </ul> <p>Clicking on a language with Tech Radar status navigates to its entry in the Tech Radar visualisation.</p>"},{"location":"components/statistics/#project-filtering","title":"Project Filtering","text":"<p>The component includes a multi-select dropdown that allows filtering statistics by specific projects:</p> <ul> <li>Select one or more projects to see statistics for only those projects</li> <li>Clear the selection to view statistics across all projects</li> <li>Project options are automatically generated from the provided project data</li> </ul>"},{"location":"components/statistics/#styling","title":"Styling","text":"<p>The Statistics component uses dedicated CSS defined in <code>../../styles/components/Statistics.css</code> with:</p>"},{"location":"components/statistics/#loading-states","title":"Loading States","text":"<p>During data fetching, the component displays skeleton loading states:</p> <ul> <li>Skeleton cards for summary statistics</li> <li>Skeleton language cards for the language list</li> <li>Smooth transition from loading to data display</li> </ul>"},{"location":"components/themeToggle/","title":"ThemeToggle","text":"<p>The ThemeToggle component provides a simple button that allows users to switch between light and dark themes throughout the application. It integrates with the ThemeContext to maintain consistent theme state across all components and is used in the Header component.</p>"},{"location":"components/themeToggle/#features","title":"Features","text":"<ul> <li>Clear visual indication of the current theme with appropriate icons</li> <li>Includes proper ARIA labels for screen readers</li> <li>Works directly with the application's theme context</li> <li>Minimal footprint suitable for header placement</li> <li>Icon changes to reflect the current theme state</li> </ul>"},{"location":"components/themeToggle/#usage","title":"Usage","text":"<pre><code>import ThemeToggle from '../components/ThemeToggle/ThemeToggle';\n\nfunction Header() {\n  return (\n    &lt;header className=\"app-header\"&gt;\n      &lt;div className=\"logo\"&gt;Digital Landscape&lt;/div&gt;\n      &lt;nav&gt;{/* Navigation items */}&lt;/nav&gt;\n      &lt;ThemeToggle /&gt;\n    &lt;/header&gt;\n  );\n}\n</code></pre>"},{"location":"components/themeToggle/#implementation-details","title":"Implementation Details","text":"<p>The ThemeToggle component:</p> <ol> <li>Uses the <code>useTheme</code> hook from ThemeContext to access the current theme state and toggle function</li> <li>Renders a button with an icon that changes based on the current theme (sun for light mode, moon for dark mode)</li> <li>Includes appropriate ARIA labels that update based on the current theme</li> <li>Calls the <code>toggleTheme</code> function from the context when clicked</li> </ol>"},{"location":"components/themeToggle/#code-example","title":"Code Example","text":"<pre><code>function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    &lt;button\n      onClick={toggleTheme}\n      className=\"theme-toggle\"\n      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\n    &gt;\n      {theme === 'light' ? &lt;SunIcon /&gt; : &lt;MoonIcon /&gt;}\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"components/themeToggle/#styling","title":"Styling","text":"<p>The ThemeToggle component uses dedicated CSS defined in <code>../../styles/components/ThemeToggle.css</code> with:</p>"},{"location":"components/themeToggle/#integration-with-themecontext","title":"Integration with ThemeContext","text":"<p>The ThemeToggle component relies on the ThemeContext to:</p> <ul> <li>Access the current theme state (<code>light</code> or <code>dark</code>)</li> <li>Trigger theme changes via the <code>toggleTheme</code> function</li> <li>Ensure theme changes persist across the application</li> </ul>"},{"location":"components/admin/bannerManagement/","title":"Banner Management Component","text":"<p>The BannerManage component provides an interface for administrators to create and manage notification banners that appear across different pages of the Digital Landscape application.</p>"},{"location":"components/admin/bannerManagement/#overview","title":"Overview","text":"<p>Site-wide banners are useful for communicating important information to users, such as upcoming maintenance, new features, or important notices. The BannerManage component allows administrators to control these messages without requiring code changes.</p>"},{"location":"components/admin/bannerManagement/#features","title":"Features","text":"<ul> <li>Banner Creation: Create new banner messages with configurable properties</li> <li>Banner Visibility Control: Toggle visibility of existing banners</li> <li>Banner Deletion: Remove outdated or unnecessary banners</li> <li>Multi-page Targeting: Specify which pages should display each banner</li> <li>Banner Types: Choose from different banner types (info, warning, error) with appropriate styling</li> <li>Centralised Management: View and manage all banners from a single interface</li> </ul>"},{"location":"components/admin/bannerManagement/#implementation","title":"Implementation","text":"<p>The BannerManage component is implemented with these key elements:</p> <ul> <li>State Management:</li> <li>Banner properties (title, message, type)</li> <li>Target pages selection</li> <li>Existing banners list</li> <li> <p>Confirmation modals</p> </li> <li> <p>Banner Properties:</p> </li> <li>Title (optional heading for the banner)</li> <li>Message (main content of the banner)</li> <li>Type (info, warning, or error)</li> <li>Target pages (where the banner will appear)</li> <li> <p>Visibility status (active or hidden)</p> </li> <li> <p>API Integration:</p> </li> <li>Fetches existing banners from backend API</li> <li>Saves new banners to backend storage</li> <li>Updates banner visibility status</li> <li>Deletes banners from the system</li> </ul>"},{"location":"components/admin/bannerManagement/#usage","title":"Usage","text":""},{"location":"components/admin/bannerManagement/#creating-a-banner","title":"Creating a Banner","text":"<ol> <li>Enter a banner title (used as the heading for the banner)</li> <li>Compose the banner message (the main content to display)</li> <li>Select a banner type:</li> <li>Info (blue): For general announcements</li> <li>Warning (yellow): For important notices</li> <li>Error (red): For critical alerts</li> <li>Choose target pages where the banner should appear</li> <li>Click \"Save Banner\" to create the banner</li> <li>Confirm the action in the confirmation modal</li> </ol>"},{"location":"components/admin/bannerManagement/#managing-existing-banners","title":"Managing Existing Banners","text":"<p>The \"Existing Banners\" section displays all banners in the system and offers these management options:</p> <ul> <li>View Details: See banner title, message, type, target pages, and status</li> <li>Toggle Visibility: Show or hide a banner without deleting it</li> <li>Delete: Permanently remove a banner from the system</li> </ul>"},{"location":"components/admin/bannerManagement/#banner-display-logic","title":"Banner Display Logic","text":"<p>Banners are displayed on the selected pages based on these rules:</p> <ol> <li>Only active banners (show = true) are displayed to users</li> <li>Banners appear on all pages selected during creation</li> <li>Banners appear at the top of the page in order of creation (newest first)</li> <li>Banner styling is determined by the selected type</li> </ol>"},{"location":"components/admin/bannerManagement/#integration-with-frontend","title":"Integration with Frontend","text":"<p>The banner management system integrates with the frontend application through these components:</p> <ol> <li>Banner Component: Displays active banners on specified pages</li> <li>Admin API: Handles banner CRUD operations</li> <li>Banner Utilities: Provides functions for fetching and managing banners</li> </ol> <p>This integration ensures that administrators can easily communicate with users across the application without requiring code changes or deployments.</p>"},{"location":"components/admin/techManagement/","title":"Technology Management Components","text":"<p>The Admin interface includes specialised components for technology management that help administrators track, normalise, and organise technologies across the organisation.</p>"},{"location":"components/admin/techManagement/#techmanage-component","title":"TechManage Component","text":"<p>The TechManage component is the primary interface for managing technologies in the reference lists and detecting untracked technologies used in projects.</p>"},{"location":"components/admin/techManagement/#key-features","title":"Key Features","text":"<ul> <li>Untracked Technology Detection: Automatically scans project data to identify technologies not yet tracked in reference lists or Tech Radar</li> <li>Reference List Management: View, add, edit, and remove technologies in categorised reference lists</li> <li>Similarity Detection: Uses advanced string similarity algorithms to identify potential duplicate or similar technologies</li> <li>Technology Normalisation: Standardise technology names across all projects</li> <li>Batch Operations: Add multiple technologies to reference lists or the Tech Radar in bulk</li> </ul>"},{"location":"components/admin/techManagement/#implementation-details","title":"Implementation Details","text":"<p>The component is implemented with the following key elements:</p> <ul> <li>Data Sources:</li> <li>Tech Radar JSON from S3</li> <li>Project CSV data from S3</li> <li> <p>Reference list array data from API</p> </li> <li> <p>Similarity Algorithm:</p> </li> <li>Configurable threshold (default 80%)</li> <li>Case-insensitive matching</li> <li>Acronym detection</li> <li> <p>Common prefix handling</p> </li> <li> <p>Technology Status:</p> </li> <li>Technologies can be tracked in the reference list, Tech Radar, both, or untracked</li> <li> <p>Tracked status is visually indicated with different colors</p> </li> <li> <p>Sorting Options:</p> </li> <li>Name (A-Z or Z-A)</li> <li>Project count (high to low or low to high)</li> <li>Quadrant</li> <li>Location (where the technology is tracked)</li> </ul>"},{"location":"components/admin/techManagement/#similaritymodal-component","title":"SimilarityModal Component","text":"<p>The SimilarityModal component displays potential matches for technologies and allows administrators to normalise technology names efficiently.</p>"},{"location":"components/admin/techManagement/#features","title":"Features","text":"<ul> <li>Match Visualisation: Displays similar technologies with their match percentage and source</li> <li>Case Difference Highlighting: Visually highlights case differences between technology names</li> <li>One-Click Normalisation: Apply normalisation with a single click</li> <li>Source Indication: Shows whether similar technologies come from the Tech Radar or reference lists</li> <li>Threshold Display: Shows the current similarity threshold percentage</li> </ul>"},{"location":"components/admin/techManagement/#usage","title":"Usage","text":"<ol> <li>Click on a match count in the untracked technologies table</li> <li>Review the list of similar technologies in the modal</li> <li>View the match percentage and source for each suggestion</li> <li>Click \"Use\" on a technology to normalise the untracked technology to that name</li> <li>The system will prompt for confirmation before updating projects</li> </ol>"},{"location":"components/admin/techManagement/#interaction-flow","title":"Interaction Flow","text":"<p>The SimilarityModal component integrates with the main TechManage component through the following workflow:</p> <ol> <li>TechManage component detects similar technologies during data scanning</li> <li>User clicks on a potential match count to open the SimilarityModal</li> <li>User selects a technology to use for normalisation</li> <li>TechManage component handles the normalisation process</li> <li>Projects using the normalised technology are updated</li> </ol> <p>This interaction flow ensures efficient technology normalisation while providing clear visibility into the potential impacts of normalisation decisions.</p>"},{"location":"components/header/","title":"Header Component","text":"<p>The Header component serves as the primary navigation interface for the Digital Landscape application. It provides users with essential navigation controls, search functionality, and application settings in a consistent, accessible manner across all pages.</p>"},{"location":"components/header/#props","title":"Props","text":"<p>The Header component accepts the following props:</p> Prop Type Default Description <code>searchTerm</code> string <code>\"\"</code> The current search term displayed in the search input <code>onSearchChange</code> function <code>() =&gt; {}</code> Handler function called when the search term changes <code>searchResults</code> array <code>[]</code> Array of search results to display in the dropdown <code>onSearchResultClick</code> function <code>() =&gt; {}</code> Handler function called when a search result is clicked <code>onOpenProjects</code> function <code>() =&gt; {}</code> Handler function called when the projects button is clicked <code>onStatsTechClick</code> function <code>() =&gt; {}</code> Handler function called when a technology is clicked in statistics <code>hideSearch</code> boolean <code>false</code> Whether to hide the search functionality"},{"location":"components/header/#usage","title":"Usage","text":"<pre><code>import Header from '../components/Header/Header';\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearchChange = (term) =&gt; {\n    setSearchTerm(term);\n    // Perform search and update results\n  };\n\n  const handleSearchResultClick = (result) =&gt; {\n    // Handle result selection\n  };\n\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;Header\n        searchTerm={searchTerm}\n        onSearchChange={handleSearchChange}\n        searchResults={searchResults}\n        onSearchResultClick={handleSearchResultClick}\n      /&gt;\n      {/* Rest of application */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/header/#search-functionality","title":"Search Functionality","text":"<p>The Header component provides a context-aware search system that:</p> <ul> <li>Adapts placeholder text based on the current route</li> <li>Supports keyboard shortcuts (\u2318+K on macOS, CTRL+K on Windows/Linux)</li> <li>Displays relevant search results in a dropdown</li> <li>Allows for clearing the search with a single click</li> </ul> <p>The search shortcut is displayed to users within the search box when empty, automatically adapting to show the appropriate key combination based on the user's operating system.</p>"},{"location":"components/header/#logo-and-navigation","title":"Logo and Navigation","text":"<p>The Header provides:</p> <ul> <li>Organisation logo that serves as a link to the homepage</li> <li>Digital Landscape title that also links to the homepage</li> </ul>"},{"location":"components/header/#mobile-responsiveness","title":"Mobile Responsiveness","text":"<p>On smaller screens, the Header:</p> <ul> <li>Maintains the logo and app title for branding</li> <li>Preserves the search functionality with full capability</li> <li>Provides access to navigation through the <code>MenuDropdown</code> component</li> <li>Includes a compact ThemeToggle for switching between light and dark modes</li> </ul>"},{"location":"components/header/#styling","title":"Styling","text":"<p>The Header component uses dedicated CSS defined in <code>../../styles/components/Header.css</code> and leverages the application's theme system for consistent visual presentation.</p>"},{"location":"components/header/#keyboard-accessibility","title":"Keyboard Accessibility","text":"<p>The Header implements accessibility features including:</p> <ul> <li>Keyboard shortcut for search focus (\u2318+K/CTRL+K)</li> <li>Auto-detection of OS for displaying appropriate shortcut key hints</li> <li>Clear search button for quickly resetting searches</li> </ul>"},{"location":"components/header/#theme-integration","title":"Theme Integration","text":"<p>The Header integrates with the application's theme system through the ThemeToggle component, allowing users to switch between light and dark modes.</p>"},{"location":"components/header/helpModal/","title":"HelpModal Component","text":"<p>The HelpModal component provides contextual help and guidance for users when viewing each page of the application. It is now accessed through the Sidebar rather than the Header.</p>"},{"location":"components/header/helpModal/#props","title":"Props","text":"<p>The HelpModal component accepts the following props:</p> Prop Type Default Description <code>show</code> boolean Required Controls the visibility of the modal <code>onClose</code> function Required Handler function called when the modal is closed"},{"location":"components/header/helpModal/#usage","title":"Usage","text":"<pre><code>import HelpModal from '../components/Header/HelpModal';\n\nfunction SidebarComponent() {\n  const [showHelp, setShowHelp] = useState(false);\n\n  return (\n    &lt;div className=\"sidebar\"&gt;\n      &lt;button onClick={() =&gt; setShowHelp(true)}&gt;Help&lt;/button&gt;\n\n      &lt;HelpModal show={showHelp} onClose={() =&gt; setShowHelp(false)} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/header/helpModal/#context-specific-content","title":"Context-Specific Content","text":"<p>The HelpModal dynamically renders different content based on the current route:</p> <ul> <li>Tech Radar: Shows information about quadrants, rings, and how to use the radar</li> <li>Home: Overview of the Digital Landscape features</li> <li>Statistics: Guidance on filtering and interpreting language usage data</li> <li>Projects: Instructions for navigating and filtering project information</li> <li>Review Dashboard: Help for reviewers managing technologies</li> <li>Admin Dashboard: Guidelines for banner and technology management</li> </ul> <p>Each context-specific help section includes links to more detailed documentation when applicable.</p>"},{"location":"components/header/helpModal/#animation-implementation","title":"Animation Implementation","text":"<p>The HelpModal uses a two-phase rendering approach for smooth animations:</p> <ol> <li>Mount Phase: Component is added to the DOM but remains invisible</li> <li>Visibility Phase: CSS transitions are applied to fade in the modal</li> <li>Unmount Delay: When closing, animations complete before removal from DOM</li> </ol>"},{"location":"components/header/helpModal/#styling","title":"Styling","text":"<p>The HelpModal uses dedicated CSS defined in <code>../../styles/components/HelpModal.css</code> for consistent styling and smooth transitions.</p>"},{"location":"components/homepage/Changelog/","title":"Changelog Component Documentation","text":"<p>The Changelog component displays a list of recent updates to the Digital Landscape fetched from GitHub releases, providing users with information about the latest changes and improvements.</p>"},{"location":"components/homepage/Changelog/#props","title":"Props","text":"<p>The Changelog component does not accept any props as it fetches data directly from the GitHub API.</p>"},{"location":"components/homepage/Changelog/#usage","title":"Usage","text":"<pre><code>import Changelog from '../components/HomePage/Changelog';\n\nfunction HomePage() {\n  return (\n    &lt;div className=\"home-container\"&gt;\n      {/* Other homepage components */}\n      &lt;Changelog /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/homepage/Changelog/#functionalities","title":"Functionalities","text":"<p>The Changelog component implements the following features:</p> <ul> <li>Fetches release information from the GitHub API for the Digital Landscape repository</li> <li>Displays releases in chronological order with the most recent at the top</li> <li>Presents each release with:</li> <li>Release title</li> <li>Publication date in a readable format</li> <li>List of changes with bullet points</li> <li>Link to the full release on GitHub</li> <li>Provides expandable/collapsible entries to manage screen real estate</li> <li>Transforms GitHub URLs in the release notes into readable links:</li> <li>Pull request links display as \"Pull Request #number\"</li> <li>Compare links display as \"Changelog Link\"</li> <li>Implements pagination with a \"Load more updates\" button to fetch additional releases</li> <li>Provides loading indicators during data fetching</li> <li>Displays appropriate error messages if fetching fails</li> </ul> <p>The component uses responsive design principles to ensure good readability across different screen sizes and includes interactive elements that maintain a consistent user experience with the rest of the application.</p>"},{"location":"components/homepage/RecentBanners/","title":"RecentBanners Component Documentation","text":"<p>The RecentBanners component displays a collection of recent announcements that appear as banners across different pages of the Digital Landscape application, providing users with important notifications and updates.</p>"},{"location":"components/homepage/RecentBanners/#props","title":"Props","text":"<p>The RecentBanners component does not accept any props as it fetches data directly from the API.</p>"},{"location":"components/homepage/RecentBanners/#usage","title":"Usage","text":"<pre><code>import RecentBanners from '../components/HomePage/RecentBanners';\n\nfunction HomePage() {\n  return (\n    &lt;div className=\"home-container\"&gt;\n      {/* Other homepage components */}\n      &lt;RecentBanners /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/homepage/RecentBanners/#functionalities","title":"Functionalities","text":"<p>The RecentBanners component implements the following features:</p> <ul> <li>Fetches announcement data from the application's API endpoint</li> <li>Displays banners with visual styling that corresponds to their type:</li> <li>Information banners with the <code>IoInformationCircle</code> icon</li> <li>Warning banners with the <code>IoWarning</code> icon</li> <li>Error/alert banners with the <code>IoAlertCircle</code> icon</li> <li>Presents each announcement with:</li> <li>Title and appropriate icon based on type</li> <li>Full message content with proper formatting</li> <li>Information about which pages the banner appears on</li> <li>Formats page lists grammatically (e.g., \"Projects and Statistics\" or \"Projects, Statistics and Review\")</li> <li>Capitalises the first letter of each page name for consistent presentation</li> <li>Provides loading indicators during data fetching</li> <li>Displays appropriate error messages if fetching fails</li> <li>Renders nothing if no banners are available, avoiding empty containers</li> </ul> <p>The component is designed to match the visual style of the banners as they appear on the actual pages, providing users with a centralised view of all current announcements across the application.</p>"},{"location":"components/layout/","title":"Layout Component","text":"<p>The Layout component serves as the main structural wrapper for the Digital Landscape application, providing a consistent layout across all pages.</p>"},{"location":"components/layout/#features","title":"Features","text":"<ul> <li>Consistent header across all pages</li> <li>Responsive sidebar that adapts to different viewport sizes</li> <li>Main content area that properly scales and positions content</li> </ul>"},{"location":"components/layout/#implementation","title":"Implementation","text":"<p>The Layout component combines the Header and Sidebar components and wraps the main content in a structured layout.</p> <pre><code>import React from 'react';\nimport Header from '../Header/Header';\nimport Sidebar from '../Sidebar/Sidebar';\nimport '../../styles/Layout.css';\n\nconst Layout = ({ children }) =&gt; {\n  return (\n    &lt;div className=\"layout\"&gt;\n      &lt;Header /&gt;\n      &lt;div className=\"layout-content\"&gt;\n        &lt;Sidebar /&gt;\n        &lt;main className=\"main-content\"&gt;{children}&lt;/main&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Layout;\n</code></pre>"},{"location":"components/layout/#props","title":"Props","text":"Prop Type Description <code>children</code> React.ReactNode The content to render in the main content area"},{"location":"components/layout/#usage","title":"Usage","text":"<p>The Layout component should wrap all page components to ensure consistent structure:</p> <pre><code>import Layout from '../components/Layout/Layout';\nimport HomePage from './HomePage';\n\nfunction App() {\n  return (\n    &lt;Layout&gt;\n      &lt;HomePage /&gt;\n    &lt;/Layout&gt;\n  );\n}\n</code></pre>"},{"location":"components/layout/#responsive-behaviour","title":"Responsive Behaviour","text":"<p>The Layout component works with its child components to provide a responsive experience:</p> <ul> <li>The Header maintains visibility and functionality across all viewport sizes</li> <li>The Sidebar can collapse to icons-only view when space is limited</li> <li>The main content area adjusts to fill available space</li> </ul>"},{"location":"components/layout/#styling","title":"Styling","text":"<p>The Layout uses dedicated CSS defined in <code>../../styles/Layout.css</code> that handles:</p> <ul> <li>Grid-based positioning of elements</li> <li>Proper spacing and alignment</li> <li>Overflow handling for scrollable content</li> </ul>"},{"location":"components/projects/","title":"Projects Component Documentation","text":"<p>The Projects component provides a comprehensive view of all projects within the Digital Landscape application. It displays projects in a sortable, searchable list with visual indicators of technology distribution across different Tech Radar rings and includes statistical visualisations in pie chart format.</p>"},{"location":"components/projects/#features","title":"Features","text":"<ul> <li>Displays all projects with clickable entries for detailed views</li> <li>Provides visual pie charts for key project categorisations</li> <li>Offers multiple sorting criteria including alphabetical, technology count, and status ratios</li> <li>Enables real-time filtering of projects based on multiple criteria</li> <li>Implements comprehensive search functionality across project metadata and technologies</li> <li>Displays colour-coded bars showing the proportion of technologies in each radar ring</li> <li>Supports refreshing project data on demand</li> <li>Adapts to different screen sizes for optimal viewing</li> </ul>"},{"location":"components/projects/#props","title":"Props","text":"<p>The Projects component accepts the following props:</p> Prop Type Default Description <code>isOpen</code> boolean Required Controls the visibility of the projects list <code>projectsData</code> array Required Array of project objects containing project details <code>handleProjectClick</code> function Required Handler function called when a project is clicked <code>getTechnologyStatus</code> function Required Function to determine the Tech Radar status of a technology <code>onRefresh</code> function Required Handler function to refresh the projects data <code>searchTerm</code> string <code>\"\"</code> The search term to filter projects <code>setSearchTerm</code> function <code>() =&gt; {}</code> Function to update the search term"},{"location":"components/projects/#usage","title":"Usage","text":"<pre><code>import Projects from '../components/Projects/Projects';\n\nfunction ProjectsPage() {\n  const [isProjectsOpen, setIsProjectsOpen] = useState(true);\n  const [projectsData, setProjectsData] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleProjectClick = (project) =&gt; {\n    setSelectedProject(project);\n    // Open project modal or navigate to project details\n  };\n\n  const getTechnologyStatus = (techName) =&gt; {\n    // Return the status of the technology (adopt, trial, assess, hold)\n  };\n\n  const refreshProjects = async () =&gt; {\n    // Fetch updated project data\n    const data = await fetchProjects();\n    setProjectsData(data);\n  };\n\n  return (\n    &lt;div className=\"projects-page\"&gt;\n      &lt;Projects\n        isOpen={isProjectsOpen}\n        projectsData={projectsData}\n        handleProjectClick={handleProjectClick}\n        getTechnologyStatus={getTechnologyStatus}\n        onRefresh={refreshProjects}\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/#pie-chart-visualisations","title":"Pie Chart Visualisations","text":"<p>The Projects component includes several pie charts that provide statistical breakdowns of the project data:</p>"},{"location":"components/projects/#project-stages","title":"Project Stages","text":"<p>Displays the distribution of projects across different stages (Active Support, Development, Unsupported)</p>"},{"location":"components/projects/#development-type","title":"Development Type","text":"<p>Shows the distribution of development approaches (In House, Partner, Outsourced)</p>"},{"location":"components/projects/#hosting-platform","title":"Hosting Platform","text":"<p>Illustrates the distribution of hosting environments (Cloud, On-premises, Hybrid)</p>"},{"location":"components/projects/#architectures","title":"Architectures","text":"<p>Visualises the distribution of cloud providers and other architectures (AWS, GCP, Azure, Other)</p> <p>Each pie chart is interactive with tooltips showing exact counts and percentages.</p>"},{"location":"components/projects/#filtering-system","title":"Filtering System","text":"<p>The component includes an advanced filtering system allowing users to filter projects by multiple criteria. The filtering interface utilises the reusable FilterGroup component to create consistent, collapsible filter sections for each category:</p>"},{"location":"components/projects/#project-stage","title":"Project Stage","text":"<p>Filter by development stages (Active Support, Development, Unsupported)</p>"},{"location":"components/projects/#development-type_1","title":"Development Type","text":"<p>Filter by development approaches (In House, Partner, Outsourced)</p>"},{"location":"components/projects/#hosting","title":"Hosting","text":"<p>Filter by hosting environments (Cloud, On-premises, Hybrid)</p>"},{"location":"components/projects/#architectures_1","title":"Architectures","text":"<p>Filter by cloud providers and architectures (AWS, GCP, Azure, Other)</p>"},{"location":"components/projects/#programme","title":"Programme","text":"<p>Filter by specific programmes using a multi-select dropdown</p> <p>The filtering system maintains a count of active filters and provides a clear all option for easy reset. All filter categories and options are defined centrally in the projectConstants file to ensure consistency throughout the application.</p>"},{"location":"components/projects/#sorting-options","title":"Sorting Options","text":"<p>The component provides multiple sorting mechanisms:</p>"},{"location":"components/projects/#name-sorting","title":"Name Sorting","text":"<ul> <li>A to Z: Alphabetical sorting by project name</li> <li>Z to A: Reverse alphabetical sorting by project name</li> </ul>"},{"location":"components/projects/#programme-sorting","title":"Programme Sorting","text":"<ul> <li>A to Z: Alphabetical sorting by programme name</li> <li>Z to A: Reverse alphabetical sorting by programme name</li> </ul>"},{"location":"components/projects/#technology-count-sorting","title":"Technology Count Sorting","text":"<ul> <li>Most Technologies: Projects with the highest number of technologies first</li> <li>Least Technologies: Projects with the lowest number of technologies first</li> </ul>"},{"location":"components/projects/#technology-status-sorting","title":"Technology Status Sorting","text":"<ul> <li>Adopt Ratio: Sort by the proportion of technologies in the Adopt ring</li> <li>Trial Ratio: Sort by the proportion of technologies in the Trial ring</li> <li>Assess Ratio: Sort by the proportion of technologies in the Assess ring</li> <li>Hold Ratio: Sort by the proportion of technologies in the Hold ring</li> </ul> <p>For each Technology Status sorting option, users can choose between highest ratio first or lowest ratio first.</p>"},{"location":"components/projects/#technology-distribution-calculation","title":"Technology Distribution Calculation","text":"<p>The Projects component calculates technology distribution for each project by:</p> <ol> <li>Extracting technologies from relevant fields in the project data</li> <li>Determining the Tech Radar status of each technology (Adopt, Trial, Assess, Hold)</li> <li>Calculating the proportion of technologies in each status category</li> <li>Visualising the distribution as a segmented, colour-coded bar</li> </ol>"},{"location":"components/projects/#search-functionality","title":"Search Functionality","text":"<p>The search feature filters projects based on multiple fields:</p> <ul> <li>Project name</li> <li>Project short name</li> <li>Project area</li> <li>Team name</li> <li>Programme name</li> <li>Programme short name</li> <li>Technology fields (languages, frameworks, infrastructure, etc.)</li> </ul> <p>The search is case-insensitive and updates the project list in real-time as the user types. Matched terms are highlighted in the results.</p>"},{"location":"components/projects/#visual-indicators","title":"Visual Indicators","text":"<p>Each project entry includes several visual elements:</p>"},{"location":"components/projects/#project-badges","title":"Project Badges","text":"<p>Quick-reference badges showing project stage, development type, hosting environment, and primary architecture</p>"},{"location":"components/projects/#technology-distribution-bar","title":"Technology Distribution Bar","text":"<p>A colour-coded bar representing the proportion of technologies in each Tech Radar ring:</p> <ul> <li>Adopt: Technologies recommended for adoption (green)</li> <li>Trial: Technologies in trial phase (blue)</li> <li>Assess: Technologies being assessed (orange)</li> <li>Hold: Technologies not recommended for new projects (red)</li> <li>Unknown: Technologies not found in the Tech Radar (grey)</li> </ul> <p>Hovering over each segment displays a tooltip with the exact count and percentage.</p>"},{"location":"components/projects/#refresh-functionality","title":"Refresh Functionality","text":"<p>The component includes a refresh button that:</p> <ol> <li>Triggers the provided <code>onRefresh</code> callback</li> <li>Updates the project data without requiring a full page refresh</li> <li>Maintains current filtering and sorting settings</li> </ol>"},{"location":"components/projects/#styling","title":"Styling","text":"<p>The Projects component uses dedicated CSS defined in <code>../../styles/components/Projects.css</code> with:</p> <ul> <li>Responsive design for various screen sizes</li> <li>Interactive hover and focus states</li> <li>Consistent colour scheme matching the Tech Radar</li> <li>Accessible colour contrasts and text sizing</li> <li>Visual feedback for interactive elements</li> </ul>"},{"location":"components/projects/filterGroup/","title":"FilterGroup Component Documentation","text":"<p>The FilterGroup component provides a reusable, collapsible filter section with checkbox functionality for selecting items within a category. It is designed to create consistent filtering interfaces throughout the application, particularly for categorical data filtering in lists and dashboards.</p>"},{"location":"components/projects/filterGroup/#features","title":"Features","text":"<ul> <li>Implements a collapsible accordion interface for space-efficient filtering</li> <li>Displays a customisable list of filterable items as checkboxes</li> <li>Maintains selection state externally for flexibility</li> <li>Provides visual indicators for selected items</li> <li>Toggles visibility of filter options with smooth interactions</li> <li>Uses consistent styling with other filter components</li> <li>Enhances accessibility with proper labelling and keyboard support</li> <li>Supports any type of categorical data filtering</li> </ul>"},{"location":"components/projects/filterGroup/#props","title":"Props","text":"<p>The FilterGroup component accepts the following props:</p> Prop Type Default Description <code>title</code> string Required The title displayed in the filter group header <code>sectionKey</code> string Required A unique identifier for this filter section <code>isExpanded</code> boolean Required Controls whether the filter options are visible <code>toggleSection</code> function Required Function called when the section header is clicked <code>items</code> array Required Array of items to display as filterable options <code>selectedItems</code> array <code>[]</code> Array of currently selected items <code>onItemChange</code> function Required Function called when an item is selected/deselected"},{"location":"components/projects/filterGroup/#usage","title":"Usage","text":"<pre><code>import FilterGroup from '../components/Projects/FilterGroup';\n\nfunction FilterableList() {\n  // State for tracking expanded sections\n  const [expandedSections, setExpandedSections] = useState({\n    category: true,\n    status: false,\n  });\n\n  // State for tracking selected filters\n  const [filters, setFilters] = useState({\n    category: [],\n    status: [],\n  });\n\n  // Toggle section expansion\n  const toggleSection = (section) =&gt; {\n    setExpandedSections((prev) =&gt; ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (category, value) =&gt; {\n    setFilters((prevFilters) =&gt; {\n      const updatedFilters = { ...prevFilters };\n\n      if (updatedFilters[category].includes(value)) {\n        updatedFilters[category] = updatedFilters[category].filter((item) =&gt; item !== value);\n      } else {\n        updatedFilters[category] = [...updatedFilters[category], value];\n      }\n\n      return updatedFilters;\n    });\n  };\n\n  return (\n    &lt;div className=\"filters-container\"&gt;\n      &lt;FilterGroup\n        title=\"Categories\"\n        sectionKey=\"category\"\n        isExpanded={expandedSections.category}\n        toggleSection={toggleSection}\n        items={['Web', 'Mobile', 'Desktop', 'Infrastructure']}\n        selectedItems={filters.category}\n        onItemChange={handleFilterChange}\n      /&gt;\n\n      &lt;FilterGroup\n        title=\"Status\"\n        sectionKey=\"status\"\n        isExpanded={expandedSections.status}\n        toggleSection={toggleSection}\n        items={['Active', 'Archived', 'Planned']}\n        selectedItems={filters.status}\n        onItemChange={handleFilterChange}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/filterGroup/#implementation-details","title":"Implementation Details","text":"<p>The FilterGroup component consists of two main parts:</p>"},{"location":"components/projects/filterGroup/#header-section","title":"Header Section","text":"<ul> <li>Contains the filter category title</li> <li>Includes a chevron icon that rotates based on expanded state</li> <li>Serves as a clickable button to toggle the visibility of filter options</li> </ul>"},{"location":"components/projects/filterGroup/#filter-options-section","title":"Filter Options Section","text":"<ul> <li>Contains a list of checkboxes for individual filter options</li> <li>Displays a custom checkbox design with checkmark icons</li> <li>Shows or hides based on the <code>isExpanded</code> prop</li> <li>Maintains visual indicators for selected items</li> </ul>"},{"location":"components/projects/filterGroup/#styling","title":"Styling","text":"<p>The FilterGroup component leverages the application's existing CSS classes:</p> <ul> <li><code>.filter-group</code>: Contains the entire filter group component</li> <li><code>.filter-group-title</code>: Styles the header with appropriate spacing and interactions</li> <li><code>.filter-accordion-header</code>: Adds accordion-specific styling and cursor indicators</li> <li><code>.accordion-icon</code>: Handles the rotation of the chevron icon</li> <li><code>.filter-checkbox-group</code>: Contains and styles the list of checkbox options</li> <li><code>.filter-checkbox-label</code>: Styles each individual checkbox label</li> <li><code>.custom-checkbox</code>: Implements a custom-styled checkbox with selected state</li> <li><code>.checkbox-icon</code>: Styles the checkmark icon for selected items</li> <li><code>.sr-only</code>: Hides the native checkbox input while maintaining accessibility</li> </ul>"},{"location":"components/projects/filterGroup/#accessibility-considerations","title":"Accessibility Considerations","text":"<p>The FilterGroup component enhances accessibility by:</p> <ul> <li>Using semantic HTML structure for better screen reader compatibility</li> <li>Maintaining keyboard navigability through standard checkbox inputs</li> <li>Providing visual indicators of state (expanded/collapsed, selected/unselected)</li> <li>Using appropriate ARIA attributes through the underlying checkbox inputs</li> <li>Maintaining adequate contrast for text and interactive elements</li> </ul>"},{"location":"components/projects/filterGroup/#integration-with-other-components","title":"Integration with Other Components","text":"<p>The FilterGroup component is primarily used within the Projects component to create the filtering interface for:</p> <ul> <li>Project stages</li> <li>Development types</li> <li>Hosting platforms</li> <li>Architecture categories</li> </ul> <p>This component helps unify the filtering interface across the application while reducing code duplication and ensuring consistent behaviour.</p>"},{"location":"components/projects/pieChart/","title":"PieChart Component Documentation","text":"<p>The PieChart component provides a visual representation of project data categorisation in a pie graph format. It displays the percentage distribution of projects across different categories, with customisable colours, labels, and interactive tooltips for enhanced data visualisation and analysis.</p>"},{"location":"components/projects/pieChart/#features","title":"Features","text":"<ul> <li>Displays percentage distribution of projects by specified categories</li> <li>Supports dynamic category detection from project data</li> <li>Provides interactive tooltips showing exact counts and percentages</li> <li>Offers customisable colour schemes for different categories</li> <li>Handles semicolon-separated multi-value fields</li> <li>Provides special handling for cloud provider identification</li> <li>Includes configurable category limits with automatic \"Other\" grouping</li> <li>Renders responsive charts that adapt to container dimensions</li> <li>Supports custom labels with percentage indicators</li> </ul>"},{"location":"components/projects/pieChart/#props","title":"Props","text":"<p>The PieChart component accepts the following props:</p> Prop Type Default Description <code>projectsData</code> array Required Array of project objects containing project details <code>title</code> string Required The title to display above the chart <code>categoryField</code> string Required The field name to use for categorisation <code>categories</code> array <code>[]</code> Predefined categories to display in the chart <code>categoryLabels</code> object <code>{}</code> Mapping of category values to display labels <code>categoryColours</code> object <code>{}</code> Mapping of category values to colour codes <code>getCategoryValue</code> function <code>(project, field) =&gt; project[field] \\|\\| \"Unknown\"</code> Function to extract category value from a project <code>splitSemicolon</code> boolean <code>false</code> Whether to split the category field by semicolon <code>dynamicCategories</code> boolean <code>false</code> Whether to dynamically detect categories from the data <code>maxCategories</code> number <code>8</code> Maximum number of categories to display before grouping as \"Other\" <code>cloudProvidersOnly</code> boolean <code>false</code> Whether to specifically identify major cloud providers"},{"location":"components/projects/pieChart/#usage","title":"Usage","text":"<pre><code>import PieChart from '../components/Projects/PieChart';\nimport { PROJECT_STAGES, CATEGORY_COLOURS } from '../../constants/projectConstants';\n\nfunction ProjectsOverview() {\n  const [projectsData, setProjectsData] = useState([]);\n\n  // Example category labels\n  const stageLabels = {\n    Development: 'In Development',\n    'Active Support': 'Actively Supported',\n    Unsupported: 'No Longer Supported',\n    Other: 'Other Stages',\n  };\n\n  return (\n    &lt;div className=\"projects-overview\"&gt;\n      &lt;PieChart\n        projectsData={projectsData}\n        title=\"Projects by Stage\"\n        categoryField=\"Stage\"\n        categories={PROJECT_STAGES}\n        categoryLabels={stageLabels}\n        categoryColours={CATEGORY_COLOURS}\n      /&gt;\n\n      {/* Example with dynamic categories */}\n      &lt;PieChart\n        projectsData={projectsData}\n        title=\"Cloud Provider Usage\"\n        categoryField=\"Architecture\"\n        splitSemicolon={true}\n        dynamicCategories={true}\n        maxCategories={5}\n      /&gt;\n\n      {/* Example with cloud providers detection */}\n      &lt;PieChart\n        projectsData={projectsData}\n        title=\"Cloud Providers\"\n        categoryField=\"Architecture\"\n        splitSemicolon={true}\n        cloudProvidersOnly={true}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/pieChart/#category-detection","title":"Category Detection","text":"<p>The PieChart component can work with categories in several ways:</p>"},{"location":"components/projects/pieChart/#predefined-categories","title":"Predefined Categories","text":"<p>When specific <code>categories</code> are provided, the component counts projects matching each category and displays them accordingly.</p>"},{"location":"components/projects/pieChart/#dynamic-category-detection","title":"Dynamic Category Detection","text":"<p>When <code>dynamicCategories</code> is enabled, the component:</p> <ol> <li>Analyses the project data to identify unique values</li> <li>Counts frequency of each value across all projects</li> <li>Selects the most common categories up to <code>maxCategories</code></li> <li>Groups remaining values as \"Other\" when exceeding the maximum</li> </ol>"},{"location":"components/projects/pieChart/#cloud-provider-detection","title":"Cloud Provider Detection","text":"<p>When <code>cloudProvidersOnly</code> is enabled, the component:</p> <ol> <li>Specifically identifies major cloud providers (AWS, GCP, Azure)</li> <li>Matches technologies against predefined provider-specific keywords from projectConstants</li> <li>Categorises unmatched technologies as \"Other\"</li> <li>Presents the distribution of cloud provider usage across projects</li> </ol>"},{"location":"components/projects/pieChart/#multi-value-field-handling","title":"Multi-Value Field Handling","text":"<p>When <code>splitSemicolon</code> is enabled, the component:</p> <ol> <li>Splits the specified <code>categoryField</code> by semicolons</li> <li>Treats each value as a separate instance</li> <li>Counts occurrences of each value across all projects</li> <li>Shows the distribution of values rather than projects</li> </ol>"},{"location":"components/projects/pieChart/#visual-customisation","title":"Visual Customisation","text":"<p>The PieChart offers several visual customisation options:</p> <ul> <li>Colours: Custom colours can be specified through the <code>categoryColours</code> prop, with consistent colours defined in projectConstants</li> <li>Labels: Custom display names through the <code>categoryLabels</code> prop</li> <li>Percentages: Automatically displayed on chart segments exceeding 5%</li> <li>Tooltips: Interactive tooltips showing count and percentage information</li> <li>Legend: Automatic legend with category names and colour indicators</li> </ul>"},{"location":"components/projects/pieChart/#styling","title":"Styling","text":"<p>The PieChart uses the styling defined in the main application CSS with:</p> <ul> <li>Tech Radar colour variables for consistency with other components</li> <li>Responsive container sizing to fit available space</li> <li>Customisable tooltip styling</li> <li>Accessible text labelling with appropriate contrast</li> <li>Dynamic colour palette when custom colours aren't specified</li> </ul>"},{"location":"components/projects/pieChart/#resulting-piecharts","title":"Resulting PieCharts","text":""},{"location":"components/projects/projectModal/","title":"ProjectModal Component Documentation","text":"<p>The ProjectModal component provides a detailed view of project information in a modal dialogue. It displays comprehensive project details including linked repositories, technology stacks, and various metadata organised into logical groupings for easy navigation and reference.</p>"},{"location":"components/projects/projectModal/#features","title":"Features","text":"<ul> <li>Fetches and displays GitHub repository data for linked projects</li> <li>Shows language usage statistics with colour-coded bars</li> <li>Organises project details into logical groupings</li> <li>Allows filtering of project details by search terms</li> <li>Provides clickable technology tags that link to the Tech Radar</li> <li>Displays repository status, visibility, and last commit information</li> </ul>"},{"location":"components/projects/projectModal/#props","title":"Props","text":"<p>The ProjectModal component accepts the following props:</p> Prop Type Default Description <code>isOpen</code> boolean Required Controls the visibility of the modal <code>onClose</code> function Required Handler function called when the modal is closed <code>project</code> object Required The project object containing all project details <code>renderTechnologyList</code> function Required Function to render technology lists in a consistent format <code>getTechnologyStatus</code> function Required Function to determine the Tech Radar status of a technology <code>onTechClick</code> function Required Handler for when a technology tag is clicked"},{"location":"components/projects/projectModal/#usage","title":"Usage","text":"<pre><code>import ProjectModal from '../components/Projects/ProjectModal';\n\nfunction ProjectsView() {\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleTechClick = (techName) =&gt; {\n    // Navigate to tech radar or show tech details\n  };\n\n  const getTechStatus = (techName) =&gt; {\n    // Return the status of the technology (adopt, trial, assess, hold)\n  };\n\n  return (\n    &lt;div className=\"projects-container\"&gt;\n      {/* Project list or grid */}\n\n      &lt;ProjectModal\n        isOpen={isModalOpen}\n        onClose={() =&gt; setIsModalOpen(false)}\n        project={selectedProject}\n        renderTechnologyList={(technologies) =&gt; (\n          &lt;div className=\"tech-list\"&gt;\n            {technologies.map((tech) =&gt; (\n              &lt;span key={tech}&gt;{tech}&lt;/span&gt;\n            ))}\n          &lt;/div&gt;\n        )}\n        getTechnologyStatus={getTechStatus}\n        onTechClick={handleTechClick}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/projectModal/#repository-information","title":"Repository Information","text":"<p>The ProjectModal fetches and displays detailed information about linked GitHub repositories:</p> <ul> <li>Repository Status: Shows if a repository is active or archived</li> <li>Visibility: Indicates if a repository is public or private</li> <li>Last Commit: Displays the date of the last commit with visual indicators for stale repositories</li> <li>Language Breakdown: Visualises the programming languages used in the repository with proportional bars</li> <li>Technology Tags: Lists technologies used with percentages and Tech Radar status indicators</li> </ul>"},{"location":"components/projects/projectModal/#information-grouping","title":"Information Grouping","text":"<p>Project information is organised into logical categories for improved readability:</p> <ol> <li>Languages &amp; Frameworks: Programming languages, frameworks, and testing tools</li> <li>Infrastructure &amp; Deployment: Hosting, cloud services, CI/CD, containerisation and environments</li> <li>Security &amp; Source Control: Authentication, source control, and branching strategies</li> <li>Quality &amp; Monitoring: Code quality tools, formatters, and monitoring solutions</li> <li>Data Management: Databases, data stores, and output formats</li> <li>Integrations: Internal and external system integrations</li> <li>General Information: Project area, tools, documentation, and collaboration</li> </ol>"},{"location":"components/projects/projectModal/#search-functionality","title":"Search Functionality","text":"<p>The modal includes a search feature that:</p> <ul> <li>Filters displayed information based on both field names and values</li> <li>Updates the view in real-time as the user types</li> <li>Maintains the categorical structure while filtering content</li> <li>Preserves the context of the information being displayed</li> </ul>"},{"location":"components/projects/projectModal/#styling","title":"Styling","text":"<p>The ProjectModal uses dedicated CSS defined in <code>../../styles/components/ProjectModal.css</code> with:</p>"},{"location":"components/sidebar/","title":"Sidebar Component","text":"<p>The Sidebar component provides navigation throughout the Digital Landscape application and adapts based on viewport size.</p>"},{"location":"components/sidebar/#features","title":"Features","text":"<ul> <li>Responsive design that collapses to an icon-only view on smaller screens or by user preference</li> <li>Persistent collapse state saved in localStorage</li> <li>Active route highlighting</li> <li>Theme toggle integration</li> <li>Help modal access</li> </ul>"},{"location":"components/sidebar/#navigation-items","title":"Navigation Items","text":"<p>The sidebar includes links to:</p> <ul> <li>Home</li> <li>Tech Radar</li> <li>Statistics</li> <li>Projects</li> <li>Review</li> <li>Admin</li> <li>Copilot</li> </ul>"},{"location":"components/sidebar/#implementation","title":"Implementation","text":"<p>The component maintains its collapse state in localStorage and toggles between expanded and collapsed views. When collapsed, only icons are displayed to maximise screen real estate while maintaining functionality.</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport '../../styles/components/Sidebar.css';\nimport HelpModal from '../Header/HelpModal';\nimport ThemeToggle from '../ThemeToggle/ThemeToggle';\nimport { MdOutlineRadar } from 'react-icons/md';\nimport { IoChevronBack, IoChevronForward } from 'react-icons/io5';\nimport {\n  TbSmartHome,\n  TbEditCircle,\n  TbUserShield,\n  TbUsers,\n  TbChartBar,\n  TbHelp,\n} from 'react-icons/tb';\nimport { VscCopilot } from 'react-icons/vsc';\n\nconst Sidebar = () =&gt; {\n  const location = useLocation();\n  const [showHelpModal, setShowHelpModal] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(() =&gt; {\n    const saved = localStorage.getItem('sidebarCollapsed');\n    return saved === 'true' ? true : false;\n  });\n\n  useEffect(() =&gt; {\n    localStorage.setItem('sidebarCollapsed', isCollapsed);\n  }, [isCollapsed]);\n\n  // Navigation items definition and rendering\n  // Help modal integration\n  // Collapse/expand functionality\n};\n</code></pre>"},{"location":"components/sidebar/#responsive-behaviour","title":"Responsive Behaviour","text":"<p>The sidebar automatically:</p> <ul> <li>Stores user preference for collapsed/expanded state</li> <li>Adjusts ThemeToggle component size based on collapse state</li> <li>Provides a collapse/expand button for user control</li> </ul>"},{"location":"components/sidebar/#help-integration","title":"Help Integration","text":"<p>The sidebar includes a Help button in the footer that triggers the HelpModal component. This component displays contextual help based on the current route.</p>"},{"location":"constants/projectConstants/","title":"Project Constants Documentation","text":"<p>The projectConstants file provides shared constants related to project categorisation across the application. These constants ensure consistency in the display, filtering, and categorisation of projects while reducing code duplication and centralising the definition of key categories and mappings.</p>"},{"location":"constants/projectConstants/#overview","title":"Overview","text":"<p>This constants file centralises important definitions for:</p> <ul> <li>Cloud provider identification keywords</li> <li>Project stage categories</li> <li>Development type definitions and code mappings</li> <li>Hosting platform options</li> <li>Architecture categories</li> <li>Colour mappings for different category types</li> </ul> <p>By maintaining these definitions in a single location, the application ensures consistent categorisation, display, and filtering behaviour throughout its various components.</p>"},{"location":"constants/projectConstants/#available-constants","title":"Available Constants","text":"<p>The projectConstants file exports the following constants:</p>"},{"location":"constants/projectConstants/#cloud_providers","title":"CLOUD_PROVIDERS","text":"<pre><code>export const CLOUD_PROVIDERS = {\n  AWS: ['aws', 'amazon', 'ec2', 'lambda', 'fargate', 'ecs', 'eks'],\n  GCP: ['gcp', 'google cloud', 'cloud run', 'gke', 'app engine'],\n  Azure: ['azure', 'microsoft'],\n  Other: [],\n};\n</code></pre> <p>A mapping of cloud provider names to arrays of identifying keywords, used to detect which cloud provider a technology or architecture belongs to.</p>"},{"location":"constants/projectConstants/#project_stages","title":"PROJECT_STAGES","text":"<pre><code>export const PROJECT_STAGES = ['Active Support', 'Development', 'Unsupported'];\n</code></pre> <p>An array of standard project lifecycle stages used throughout the application for filtering and categorisation.</p>"},{"location":"constants/projectConstants/#development_types","title":"DEVELOPMENT_TYPES","text":"<pre><code>export const DEVELOPMENT_TYPES = ['In House', 'Partner', 'Outsourced'];\n</code></pre> <p>An array of standard development approach types used for filtering and categorisation.</p>"},{"location":"constants/projectConstants/#development_type_codes","title":"DEVELOPMENT_TYPE_CODES","text":"<pre><code>export const DEVELOPMENT_TYPE_CODES = {\n  I: 'In House',\n  P: 'Partner',\n  O: 'Outsourced',\n};\n</code></pre> <p>A mapping of single-character codes to full development type names, used for converting data format codes to display values.</p>"},{"location":"constants/projectConstants/#hosting_types","title":"HOSTING_TYPES","text":"<pre><code>export const HOSTING_TYPES = ['Cloud', 'Hybrid', 'On-premises'];\n</code></pre> <p>An array of standard hosting environment types used for filtering and categorisation.</p>"},{"location":"constants/projectConstants/#architecture_categories","title":"ARCHITECTURE_CATEGORIES","text":"<pre><code>export const ARCHITECTURE_CATEGORIES = ['AWS', 'GCP', 'Azure', 'Other'];\n</code></pre> <p>An array of architecture categories representing major cloud providers and other architectures.</p>"},{"location":"constants/projectConstants/#category_colours","title":"CATEGORY_COLOURS","text":"<pre><code>export const CATEGORY_COLOURS = {\n  // Project stages\n  'Active Support': 'var(--color-adopt)',\n  Development: 'var(--color-trial)',\n  Unsupported: 'var(--color-hold)',\n\n  // Development types\n  I: 'var(--color-adopt)',\n  O: 'var(--color-trial)',\n  P: 'var(--color-assess)',\n\n  // Hosting types\n  Cloud: 'var(--color-adopt)',\n  'On-premises': 'var(--color-trial)',\n  Hybrid: 'var(--color-assess)',\n\n  // Architecture categories\n  AWS: 'var(--color-adopt)',\n  GCP: 'var(--color-trial)',\n  Azure: 'var(--color-hold)',\n  Other: 'var(--color-assess)',\n};\n</code></pre> <p>A comprehensive mapping of category values to colour variables, ensuring consistent colour representation across different visualisations.</p>"},{"location":"constants/projectConstants/#usage","title":"Usage","text":"<p>These constants are used throughout the application to ensure consistent categorisation and display:</p> <pre><code>import {\n  PROJECT_STAGES,\n  DEVELOPMENT_TYPES,\n  CATEGORY_COLOURS,\n} from '../../constants/projectConstants';\n\nfunction ProjectsStatistics() {\n  return (\n    &lt;div className=\"statistics-container\"&gt;\n      &lt;PieChart\n        title=\"Project Stages\"\n        data={projectData}\n        categoryField=\"stage\"\n        categories={PROJECT_STAGES}\n        categoryColours={CATEGORY_COLOURS}\n      /&gt;\n\n      &lt;FilterGroup\n        title=\"Development Type\"\n        sectionKey=\"developmentType\"\n        items={DEVELOPMENT_TYPES}\n        selectedItems={selectedTypes}\n        onItemChange={handleFilterChange}\n        isExpanded={expandedSections.developmentType}\n        toggleSection={toggleSection}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"contexts/banner/","title":"Banner Hook Documentation","text":""},{"location":"contexts/banner/#overview","title":"Overview","text":"<p>The Banner Hook provides a convenient way to display persistent informational messages to users. It utilises React's toast notifications with enhanced functionality for dismissal memory, ensuring users aren't repeatedly shown the same messages unnecessarily.</p>"},{"location":"contexts/banner/#features","title":"Features","text":"<ul> <li>Persistent Notifications: Displays important messages that remain visible until explicitly dismissed</li> <li>Dismissal Memory: Remembers when a user has dismissed a banner using local storage</li> <li>Time-Based Reappearance: Automatically shows banners again after a specified period (default: 7 days)</li> <li>Customisable Messages: Supports any message content to be displayed in the banner</li> <li>Consistent Styling: Utilises application theme variables for visual consistency</li> </ul>"},{"location":"contexts/banner/#usage","title":"Usage","text":"<p>The <code>useBanner</code> hook is designed to be simple to implement within any functional component.</p> <pre><code>import { useBanner } from '../contexts/banner';\n\nfunction MyComponent() {\n  // Parameters: message text, unique local storage key\n  useBanner('Welcome to our application! This is an important announcement.', 'welcome-banner');\n\n  return &lt;div&gt;{/* Your component content */}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"contexts/banner/#parameters","title":"Parameters","text":"<p>The <code>useBanner</code> hook accepts two parameters:</p> <ol> <li>message (string): The text content to display in the banner</li> <li>localStorageKey (string): A unique identifier used to store dismissal information in the browser's local storage</li> </ol>"},{"location":"contexts/banner/#implementation-details","title":"Implementation Details","text":"<p>The banner system works through the following process:</p> <ol> <li>Initial Check: When a component mounts, the hook checks if the banner has been previously dismissed</li> <li>Dismissal Logic:</li> <li>If the banner hasn't been dismissed before, it displays immediately</li> <li>If dismissed, it checks when the dismissal occurred</li> <li>If the dismissal was more than 7 days ago, it shows the banner again</li> <li>User Interaction: When a user dismisses the banner, the current timestamp is stored in local storage</li> <li>Visual Presentation: The banner appears as a toast notification in the bottom-right corner of the screen with an \"Info\" header and a checkmark button for dismissal</li> </ol>"},{"location":"contexts/banner/#styling","title":"Styling","text":"<p>The banner utilises custom CSS defined in <code>../styles/Banner.css</code> and leverages CSS variables for theming:</p> <ul> <li><code>--info-box</code>: Background colour of the banner</li> <li><code>--info-box-border</code>: Colour of the left border accent</li> </ul>"},{"location":"contexts/banner/#best-practices","title":"Best Practices","text":"<ul> <li>Use unique <code>localStorageKey</code> values for different banners to ensure proper dismissal tracking</li> <li>Keep banner messages concise and informative</li> <li>Use banners sparingly for truly important information to avoid user fatigue</li> <li>Consider the timing of banner displays in your application flow</li> </ul>"},{"location":"contexts/banner/#integration-with-theme","title":"Integration with Theme","text":"<p>The banner system integrates with the application's theme system, ensuring that banners maintain visual consistency with the rest of the interface regardless of whether light or dark mode is active.</p>"},{"location":"contexts/dataContext/","title":"Data Context Documentation","text":""},{"location":"contexts/dataContext/#overview","title":"Overview","text":"<p>The DataContext provides centralised data management and caching for the Tech Radar application. It handles fetching and caching of CSV data, Tech Radar data, repository data, and repository statistics.</p>"},{"location":"contexts/dataContext/#core-functionality","title":"Core Functionality","text":""},{"location":"contexts/dataContext/#state-management","title":"State Management","text":"<p>The context maintains four main pieces of state:</p> <ul> <li>csvData: Project and technology information</li> <li>techRadarData: Tech Radar entries and their statuses</li> <li>repositoryData: Repository-specific information (cached with Map)</li> <li>repositoryStats: General repository statistics (cached with Map)</li> </ul>"},{"location":"contexts/dataContext/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Uses in-memory caching with React state</li> <li>Implements request deduplication using pendingRequests</li> <li>Supports forced refresh when needed</li> <li>Uses Map objects for parameterised data (repository data and stats)</li> </ul>"},{"location":"contexts/dataContext/#request-handling","title":"Request Handling","text":"<ol> <li>Check if data exists in cache</li> <li>Check if there's a pending request for the same data</li> <li>Make new request if needed</li> <li>Cache the response</li> <li>Clean up pending request</li> </ol>"},{"location":"contexts/dataContext/#usage-in-pages","title":"Usage in Pages","text":""},{"location":"contexts/dataContext/#radarpage","title":"RadarPage","text":"<pre><code>const { getTechRadarData, getCsvData } = useData();\n\n// Fetches and caches tech radar data\nuseEffect(() =&gt; {\n  getTechRadarData().then((data) =&gt; setData(data));\n}, [getTechRadarData]);\n\n// Fetches and caches project data\nuseEffect(() =&gt; {\n  getCsvData().then((data) =&gt; setProjectsData(data));\n}, [getCsvData]);\n</code></pre>"},{"location":"contexts/dataContext/#statisticspage","title":"StatisticsPage","text":"<pre><code>const { getTechRadarData, getRepositoryStats, getCsvData } = useData();\n\n// Initial data load\nuseEffect(() =&gt; {\n  const [techData, projectData] = await Promise.all([\n    getTechRadarData(),\n    getCsvData()\n  ]);\n}, []);\n\n// Fetching statistics with parameters\nconst fetchStatistics = async (date, repoView) =&gt; {\n  const statsResponse = await getRepositoryStats(\n    date,\n    repoView === \"archived\" ? \"true\" : \"false\"\n  );\n};\n</code></pre>"},{"location":"contexts/dataContext/#projectspage","title":"ProjectsPage","text":"<pre><code>const { getCsvData, getTechRadarData } = useData();\n\n// Combined data fetching\nuseEffect(() =&gt; {\n  const [csvData, techData] = await Promise.all([\n    getCsvData(),\n    getTechRadarData()\n  ]);\n}, []);\n\n// Forced refresh\nconst handleRefresh = async () =&gt; {\n  const newData = await getCsvData(true); // forceRefresh=true\n};\n</code></pre>"},{"location":"contexts/dataContext/#cache-invalidation","title":"Cache Invalidation","text":"<p>The context provides a clearCache method to reset all cached data:</p> <pre><code>const { clearCache } = useData();\nclearCache(); // Clears all cached data\n</code></pre>"},{"location":"contexts/dataContext/#error-handling","title":"Error Handling","text":"<ul> <li>Each fetch method includes error handling</li> <li>Failed requests return null</li> <li>Components should handle null responses appropriately</li> <li>Toast notifications for user feedback</li> </ul>"},{"location":"contexts/dataContext/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Deduplication of in-flight requests prevents redundant API calls</li> <li>Cached data reduces server load and improves response time</li> <li>ForceRefresh parameter allows manual cache invalidation</li> <li>Map-based caching enables efficient parameter-based data storage</li> </ol>"},{"location":"contexts/dataContext/#best-practices","title":"Best Practices","text":"<ol> <li>Always use useData hook within components</li> <li>Include context methods in useEffect dependencies</li> <li>Handle loading and error states in components</li> <li>Use forceRefresh sparingly</li> <li>Clear cache when data consistency is required</li> </ol>"},{"location":"contexts/themeContext/","title":"Theme Context Documentation","text":""},{"location":"contexts/themeContext/#overview","title":"Overview","text":"<p>The Theme Context provides a centralised way to manage the application's theme state (light or dark mode) throughout the component tree. It utilises React's Context API to make the theme accessible to any component without prop drilling.</p>"},{"location":"contexts/themeContext/#components-and-hooks","title":"Components and Hooks","text":""},{"location":"contexts/themeContext/#themeprovider","title":"ThemeProvider","text":"<p>The <code>ThemeProvider</code> is a wrapper component that establishes the theme context for its children. It should be placed high in the component hierarchy, typically around your application's root component.</p>"},{"location":"contexts/themeContext/#features","title":"Features","text":"<ul> <li>Theme Persistence: Automatically saves the user's theme preference to local storage</li> <li>Theme Application: Applies the selected theme to the document by adding appropriate CSS classes</li> <li>Toast Integration: Includes a pre-configured toast notification system that respects the current theme</li> </ul>"},{"location":"contexts/themeContext/#usage","title":"Usage","text":"<pre><code>import { ThemeProvider } from '../contexts/ThemeContext';\n\nfunction App() {\n  return &lt;ThemeProvider&gt;{/* Your application components */}&lt;/ThemeProvider&gt;;\n}\n</code></pre>"},{"location":"contexts/themeContext/#usetheme-hook","title":"useTheme Hook","text":"<p>The <code>useTheme</code> hook provides access to the current theme state and functionality to toggle between themes.</p>"},{"location":"contexts/themeContext/#returns","title":"Returns","text":"<ul> <li><code>theme</code>: The current theme value ('light' or 'dark')</li> <li><code>toggleTheme</code>: A function to switch between light and dark themes</li> </ul>"},{"location":"contexts/themeContext/#usage_1","title":"Usage","text":"<pre><code>import { useTheme } from '../contexts/ThemeContext';\n\nfunction ThemeToggleButton() {\n  const { theme, toggleTheme } = useTheme();\n\n  return &lt;button onClick={toggleTheme}&gt;Current theme: {theme}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"contexts/themeContext/#implementation-details","title":"Implementation Details","text":"<p>The theme context uses React's useState and useEffect hooks to:</p> <ol> <li>Initialise the theme from local storage or default to 'light'</li> <li>Persist theme changes to local storage</li> <li>Apply theme classes to the document and body elements</li> <li>Provide a simple toggle mechanism between 'light' and 'dark' modes</li> </ol>"},{"location":"contexts/themeContext/#error-handling","title":"Error Handling","text":"<p>The <code>useTheme</code> hook will throw an error if used outside of a <code>ThemeProvider</code>. Always ensure components using this hook are descendants of a <code>ThemeProvider</code> component.</p>"},{"location":"contexts/themeContext/#toast-notifications","title":"Toast Notifications","text":"<p>The ThemeProvider includes a pre-configured toast notification system (using react-hot-toast) that:</p> <ul> <li>Positions toasts in the bottom-right corner</li> <li>Applies theme-consistent styling to all notifications</li> <li>Sets a default duration of 3 seconds for each toast</li> </ul>"},{"location":"contexts/themeContext/#best-practices","title":"Best Practices","text":"<ul> <li>Place the <code>ThemeProvider</code> at the root of your application</li> <li>Use the <code>useTheme</code> hook to access theme information rather than creating separate state</li> <li>Leverage CSS variables defined in your theme to ensure consistent styling</li> </ul>"},{"location":"pages/admin/","title":"Admin Dashboard","text":"<p>The Admin Dashboard provides administrative tools for managing site-wide banners and technology reference data.</p>"},{"location":"pages/admin/#overview","title":"Overview","text":"<p>The Admin Dashboard allows authorised users to manage system-wide settings and maintain technology reference lists. This interface offers advanced tools for administrators to shape the technology landscape by defining the technology taxonomy, managing notification banners, and normalising technology names across projects.</p>"},{"location":"pages/admin/#features","title":"Features","text":""},{"location":"pages/admin/#banner-management","title":"Banner Management","text":"<ul> <li>Create, toggle, and delete site-wide notification banners</li> <li>Configure banner properties (title, message, type)</li> <li>Select target pages for each banner</li> <li>Preview banner appearance before deployment</li> </ul>"},{"location":"pages/admin/#technology-reference-management","title":"Technology Reference Management","text":"<ul> <li>View categorised technology reference lists</li> <li>Add, edit, and remove technologies in each category</li> <li>Alphabetical and length-based sorting options</li> <li>Import and normalise technologies from project data</li> </ul>"},{"location":"pages/admin/#technology-audit-tool","title":"Technology Audit Tool","text":"<ul> <li>Detect untracked technologies used in projects</li> <li>Identify similar technologies with configurable similarity threshold</li> <li>Merge or normalise technology names to ensure consistency</li> <li>Track technology usage across projects</li> </ul>"},{"location":"pages/admin/#usage","title":"Usage","text":""},{"location":"pages/admin/#managing-banners","title":"Managing Banners","text":"<ol> <li>Enter banner title and message</li> <li>Select banner type (info, warning, or error)</li> <li>Choose target pages for the banner to appear</li> <li>Save the banner to make it active</li> <li>Toggle banner visibility or delete as needed</li> </ol>"},{"location":"pages/admin/#technology-reference-lists","title":"Technology Reference Lists","text":"<ol> <li>Select a category to view or edit its technologies</li> <li>Add new technologies with the \"Add Technology\" button</li> <li>Edit or remove existing technologies as needed</li> <li>Sort the list alphabetically or by length</li> <li>Save changes to persist modifications</li> </ol>"},{"location":"pages/admin/#normalising-technologies","title":"Normalising Technologies","text":"<ol> <li>In the \"Untracked Technologies\" section, locate inconsistent technology names</li> <li>Click the normalise button for a technology</li> <li>Select the canonical version or enter a custom name</li> <li>View affected projects before confirming</li> <li>Apply normalisation to update all project references</li> </ol>"},{"location":"pages/admin/#technology-similarity-detection","title":"Technology Similarity Detection","text":"<ol> <li>Adjust the similarity threshold slider as needed</li> <li>Review potential matches in the untracked technologies list</li> <li>Click on the match count to view similar technologies</li> <li>Select the correct version to normalise or standardise names</li> <li>Confirm changes to update affected projects</li> </ol>"},{"location":"pages/admin/#technology-management-workflow","title":"Technology Management Workflow","text":"<p>The admin interface provides a comprehensive workflow for maintaining technology records:</p> <ol> <li>Discovery: Identify untracked or inconsistently named technologies</li> <li>Review: Examine similar technologies and decide on canonical naming</li> <li>Normalisation: Update technology names across all projects</li> <li>Categorisation: Add technologies to appropriate reference lists</li> <li>Publication: Make technologies available in the Tech Radar for review</li> </ol> <p>This workflow ensures consistency in technology tracking, improves data quality, and enables accurate technology governance across the organisation.</p>"},{"location":"pages/copilot/","title":"GitHub Copilot Usage Dashboard","text":"<p>The Copilot dashboard allows users to analyse GitHub Copilot usage statistics across the organisation and within individual teams.</p>"},{"location":"pages/copilot/#features","title":"Features","text":""},{"location":"pages/copilot/#organisation-vs-team-view","title":"Organisation vs Team View","text":"<p>Switch between organisation-wide and team-specific usage data using the tabs at the top of the page.</p>"},{"location":"pages/copilot/#live-and-historic-data","title":"Live and Historic Data","text":"<p>Toggle between live usage metrics and historic trends (aggregated by day, week, month, or year).</p>"},{"location":"pages/copilot/#team-selection","title":"Team Selection","text":"<p>When in \"Team Usage\" mode, authenticated users can select a team they belong to from a list. The dashboard then displays usage data for that team.</p> <p>Teams that you are a member of are highlighted with a special border to help you quickly identify your own teams.</p>"},{"location":"pages/copilot/#copilot-admin-access","title":"Copilot Admin Access","text":"<p>Users who are members of teams listed in the <code>admin_teams.json</code> configuration file have Copilot admin privileges. These users can:</p> <ul> <li>View usage data for all configured teams in the organisation, not just their own teams</li> <li>Access team metrics regardless of team membership</li> <li>See a \"Copilot Admin\" badge indicating their elevated access level</li> </ul>"},{"location":"pages/copilot/#date-range-filtering","title":"Date Range Filtering","text":"<p>Use the dual range slider to filter live data by a custom date range. The slider automatically adjusts to the available data range.</p>"},{"location":"pages/copilot/#seat-data-active-user-filtering","title":"Seat Data Active User Filtering","text":"<p>Adjust the inactivity threshold, measured by number of days, to see active/inactive breakdowns for users with Copilot licenses based on their recent activity.</p>"},{"location":"pages/copilot/#authentication","title":"Authentication","text":"<p>Users must authenticate with GitHub to view and select their teams. The dashboard displays a GitHub login button if the user is not authenticated or their session has expired.</p>"},{"location":"pages/copilot/#usage","title":"Usage","text":""},{"location":"pages/copilot/#select-scope","title":"Select Scope","text":"<ul> <li>Choose between viewing data for the whole organisation or for a specific team. On dashboard load, organisation scope is selected by default.</li> </ul>"},{"location":"pages/copilot/#authenticate","title":"Authenticate","text":"<ul> <li>If you select \"Team Usage\" scope and are not authenticated, you will be prompted to log in with GitHub to see your teams.</li> </ul>"},{"location":"pages/copilot/#pick-a-team","title":"Pick a Team:","text":"<ul> <li>Select a team from the list to view its Copilot usage metrics.</li> <li>Teams you are a member of will be highlighted with a special border.</li> </ul>"},{"location":"pages/copilot/#view-data","title":"View Data:","text":"<ul> <li>Use the \"Live\" and \"Historic\" view mode toggles to switch between recent and historical trends.</li> <li>Adjust the dual range date range slider to focus on specific periods.</li> <li>If viewing \"Historic\", change the \"View Dates By\" option to aggregate historic data by day, week, month, or year.</li> </ul>"},{"location":"pages/copilot/#use-cases","title":"Use Cases","text":""},{"location":"pages/copilot/#organisation-admins","title":"Organisation Admins:","text":"<ul> <li>Track Copilot adoption and engagement across all teams.</li> <li>Assess seat usage and identify inactive users for licence management.</li> </ul>"},{"location":"pages/copilot/#copilot-admins","title":"Copilot Admins:","text":"<ul> <li>Access usage data for all configured teams across the organisation.</li> <li>Monitor team performance and identify areas for improvement.</li> <li>Support team leads with data-driven insights.</li> </ul>"},{"location":"pages/copilot/#team-leads","title":"Team Leads:","text":"<ul> <li>Monitor how their team is using Copilot and identify trends.</li> </ul>"},{"location":"pages/projects/","title":"Projects","text":"<p>The Projects section provides a comprehensive view of all projects and their technology stacks gathered by the Tech Audit tool, with powerful filtering, sorting, and visualisation capabilities.</p>"},{"location":"pages/projects/#overview","title":"Overview","text":"<p>The Projects interface enables you to:</p> <ul> <li>View all projects recorded by the Tech Audit tool in a sortable, filterable list</li> <li>Examine project details using the Project Modal component</li> <li>Analyse project distributions through interactive pie charts</li> <li>Filter projects by multiple criteria including stage, development type, and architecture</li> <li>Sort projects using various criteria including alphabetical order and technology distribution</li> <li>Search across project metadata and technology stacks</li> <li>Refresh project data without reloading the entire application</li> </ul>"},{"location":"pages/projects/#statistical-visualisations","title":"Statistical Visualisations","text":"<p>The Projects page displays four interactive pie charts at the top of the interface:</p>"},{"location":"pages/projects/#project-stages","title":"Project Stages","text":"<ul> <li>Visualises the distribution of projects across lifecycle stages</li> <li>Categories: Active Support, Development, Unsupported</li> <li>Colour-coded segments with percentage indicators</li> <li>Interactive tooltips showing exact counts and percentages</li> </ul>"},{"location":"pages/projects/#development-type","title":"Development Type","text":"<ul> <li>Shows how projects are developed across the organisation</li> <li>Categories: In House, Partner, Outsourced</li> <li>Derived from the first character of the 'Developed' field</li> <li>Interactive tooltips with additional information</li> </ul>"},{"location":"pages/projects/#hosting-platform","title":"Hosting Platform","text":"<ul> <li>Illustrates where projects are hosted</li> <li>Categories: Cloud, Hybrid, On-premises</li> <li>Colour-coded to highlight cloud adoption patterns</li> <li>Interactive tooltips showing exact distribution</li> </ul>"},{"location":"pages/projects/#architectures","title":"Architectures","text":"<ul> <li>Displays the distribution of cloud providers and architectures</li> <li>Categories: AWS, GCP, Azure, Other</li> <li>Uses intelligent detection to identify cloud providers from architecture descriptions</li> <li>Automatically handles semicolon-separated values</li> </ul>"},{"location":"pages/projects/#filtering-capabilities","title":"Filtering Capabilities","text":"<p>The Projects page includes a comprehensive filtering system accessible via the \"Filter by\" button:</p>"},{"location":"pages/projects/#project-stage-filtering","title":"Project Stage Filtering","text":"<ul> <li>Filter by development stages: Active Support, Development, Unsupported</li> <li>Toggle filters on/off with checkbox selectors</li> <li>Filter indicator shows the number of active filters</li> </ul>"},{"location":"pages/projects/#development-type-filtering","title":"Development Type Filtering","text":"<ul> <li>Filter by development approaches: In House, Partner, Outsourced</li> <li>Checkbox interface for easy selection and deselection</li> <li>Extracted from the 'Developed' field in project data</li> </ul>"},{"location":"pages/projects/#hosting-filtering","title":"Hosting Filtering","text":"<ul> <li>Filter by hosting environments: Cloud, On-premises, Hybrid</li> <li>Checkbox selectors with expandable/collapsible sections</li> <li>Combines with other filters for precise project selection</li> </ul>"},{"location":"pages/projects/#architecture-filtering","title":"Architecture Filtering","text":"<ul> <li>Filter by cloud providers: AWS, GCP, Azure, Other</li> <li>Identifies cloud providers through keyword recognition</li> <li>\"Other\" category captures non-cloud architectures</li> </ul>"},{"location":"pages/projects/#programme-filtering","title":"Programme Filtering","text":"<ul> <li>Filter by specific programmes using a multi-select dropdown</li> <li>Dynamic programme list populated from available project data</li> <li>Type-to-search functionality in the dropdown</li> </ul> <p>The filtering system also includes a \"Clear all filters\" button to easily reset all active filters.</p>"},{"location":"pages/projects/#sorting-options","title":"Sorting Options","text":"<p>The Projects page offers multiple sorting mechanisms through the \"Sort by\" button:</p>"},{"location":"pages/projects/#name-sorting","title":"Name Sorting","text":"<ul> <li>A to Z: Alphabetical sorting by project name</li> <li>Z to A: Reverse alphabetical sorting by project name</li> </ul>"},{"location":"pages/projects/#programme-sorting","title":"Programme Sorting","text":"<ul> <li>A to Z: Alphabetical sorting by programme name</li> <li>Z to A: Reverse alphabetical sorting by programme name</li> </ul>"},{"location":"pages/projects/#technology-count-sorting","title":"Technology Count Sorting","text":"<ul> <li>Most Technologies: Projects with the highest number of technologies first</li> <li>Least Technologies: Projects with the lowest number of technologies first</li> </ul>"},{"location":"pages/projects/#technology-ring-sorting","title":"Technology Ring Sorting","text":"<ul> <li>Sort by the proportion of technologies in specific Tech Radar rings (Adopt, Trial, Assess, Hold)</li> <li>For each ring, choose between highest ratio first or lowest ratio first</li> <li>Example:</li> <li>When sorting by \"Adopt\" with \"highest first\", projects with the highest percentage of Adopt technologies appear at the top</li> <li>When sorting by \"Hold\" with \"lowest first\", projects with the fewest Hold technologies appear at the top</li> </ul>"},{"location":"pages/projects/#search-functionality","title":"Search Functionality","text":"<p>The search functionality filters projects based on multiple fields:</p> <ul> <li>Project name and short name</li> <li>Programme name and short name</li> <li>Team name</li> <li>Project area</li> <li>Technology fields (languages, frameworks, infrastructure, etc.)</li> </ul> <p>The search is case-insensitive and provides real-time filtering as you type. Matched terms are highlighted in the results to easily identify where matches occur.</p>"},{"location":"pages/projects/#refresh-functionality","title":"Refresh Functionality","text":"<p>The Projects page includes a refresh button that:</p> <ol> <li>Updates the project data without requiring a full page refresh</li> <li>Maintains current filtering and sorting settings</li> <li>Updates all pie charts and project listings with fresh data</li> </ol>"},{"location":"pages/projects/#visual-features","title":"Visual Features","text":""},{"location":"pages/projects/#project-cards","title":"Project Cards","text":"<p>Each project is displayed as a card containing:</p> <ul> <li>Project name and short name (if available)</li> <li>Programme badge with a colour derived from the programme name</li> <li>Project description (truncated for readability)</li> <li>Documentation link (if available)</li> <li>Status badges showing project stage, development type, hosting, and architecture</li> </ul>"},{"location":"pages/projects/#technology-distribution-bar","title":"Technology Distribution Bar","text":"<p>Each project card includes a horizontal bar showing the distribution of technologies across Tech Radar rings:</p> <ul> <li>Adopt (green): Technologies recommended for adoption</li> <li>Trial (blue): Technologies in trial phase</li> <li>Assess (orange): Technologies being assessed</li> <li>Hold (red): Technologies not recommended for new projects</li> <li>Unknown (grey): Technologies not found in the Tech Radar</li> </ul> <p>Hover over any segment to see the exact count and percentage of technologies in that category.</p>"},{"location":"pages/radar/","title":"Tech Radar","text":"<p>The Tech Radar is an interactive visualisation tool that helps track and manage technology adoption across the organisation.</p>"},{"location":"pages/radar/#overview","title":"Overview","text":"<p>The Tech Radar provides a visual representation of technologies categorised into four quadrants:</p> <ul> <li>Languages: such as Python, JavaScript, Java</li> <li>Frameworks: such as Flask, React, Spring</li> <li>Supporting Tools: such as CI/CD (e.g. Jenkins, GitHub Actions, Concourse) and other tools used for development, documentation and project management (e.g. VSCode, Confluence, Jira)</li> <li>Infrastructure: such as AWS, Azure, GCP</li> </ul> <p>Each technology is placed in one of four rings:</p> <ul> <li>Adopt: technologies that are mature, widely adopted and recommended for use in production environments</li> <li>Trial: technologies that are gaining traction, have significant potential and warrant further investigation or experimentation</li> <li>Assess: technologies that are emerging, have some promise, but require further testing and refinement. These technologies have moved beyond the initial curiosity phase. They've shown some success in limited use cases and are ready for more structured testing</li> <li>Hold: technologies that are either outdated, have significant limitations or do not align with the organisation's strategic direction</li> </ul>"},{"location":"pages/radar/#features","title":"Features","text":""},{"location":"pages/radar/#interactive-visualisation","title":"Interactive Visualisation","text":"<ul> <li>Hover over blips to view information or click to lock selection</li> <li>Drag quadrant lists to customise your view</li> <li>Filter technologies by quadrant by clicking on the label around the radar</li> <li>Search functionality for quick access (CMD + K or CTRL + K)</li> </ul>"},{"location":"pages/radar/#technology-details","title":"Technology Details","text":"<ul> <li>Using the Info Box component, you can view:</li> <li>Current adoption status</li> <li>Timeline of changes</li> <li>Related projects</li> </ul>"},{"location":"pages/radar/#navigation","title":"Navigation","text":"<ul> <li>Keyboard shortcuts:</li> <li>Press key <code>1</code> to move up the list</li> <li>Press key <code>2</code> to move down the list</li> </ul>"},{"location":"pages/review/","title":"Review Dashboard","text":"<p>The Review Dashboard provides administrative tools for managing the Tech Radar technologies, accessible to users with reviewer permissions through AWS Cognito authentication.</p>"},{"location":"pages/review/#overview","title":"Overview","text":"<p>The Review Dashboard allows authorised users with reviewer group membership to manage and update the organisation's technology catalogue. This interface offers a structured way to categorise technologies across different adoption phases and maintain an accurate picture of the technology landscape.</p>"},{"location":"pages/review/#access-requirements","title":"Access Requirements","text":""},{"location":"pages/review/#authentication","title":"Authentication","text":"<ul> <li>Users must be authenticated through AWS Cognito</li> <li>Requires membership in the <code>reviewer</code> group</li> <li>Development mode bypasses authentication for local development</li> </ul>"},{"location":"pages/review/#user-attribution","title":"User Attribution","text":"<p>When reviewers make changes to technologies, their email address is automatically captured and attributed as the author of the change for audit and tracking purposes.</p>"},{"location":"pages/review/#features","title":"Features","text":""},{"location":"pages/review/#technology-management","title":"Technology Management","text":"<ul> <li>Drag-and-drop interface for moving technologies between rings</li> <li>Add new technologies through a guided dialogue</li> <li>Edit technology details including name and category</li> <li>Filter technologies by category</li> <li>Search functionality for quick access</li> <li>View details using InfoBox</li> <li>Automatic author attribution for all changes</li> </ul>"},{"location":"pages/review/#project-visibility","title":"Project Visibility","text":"<ul> <li>View projects using each technology</li> <li>Toggle project count display to see project count metrics</li> <li>Click project entries to explore detailed project information</li> </ul>"},{"location":"pages/review/#usage","title":"Usage","text":""},{"location":"pages/review/#moving-technologies","title":"Moving Technologies","text":"<ol> <li>Drag a technology from one ring to another</li> <li>Enter a description explaining the reason for the change (supports simple markdown formatting)</li> <li>Your email will be automatically recorded as the author of this change</li> <li>Confirm the move to update the technology's status</li> </ol>"},{"location":"pages/review/#adding-technologies","title":"Adding Technologies","text":"<ol> <li>Click \"Add Technology\" button</li> <li>Enter technology name and select appropriate category</li> <li>Your email will be automatically recorded as the author</li> <li>Confirm to add the technology to the Review ring</li> </ol>"},{"location":"pages/review/#saving-changes","title":"Saving Changes","text":"<p>Changes made in the Review Dashboard are not applied until explicitly saved using the \"Save Changes\" button. This ensures a controlled update process and maintains data integrity.</p>"},{"location":"pages/review/#project-count-visibility","title":"Project Count Visibility","text":"<p>Toggle the \"Show Project Count\" button to display the number of projects using each technology, helping identify widely-adopted versus rarely-used technologies.</p>"},{"location":"pages/review/#security-audit-trail","title":"Security &amp; Audit Trail","text":"<p>The Review Dashboard maintains a complete audit trail of all changes:</p> <ul> <li>Author Attribution - Every change is linked to the authenticated user's email</li> <li>Change Descriptions - Reviewers must provide reasons for technology moves</li> <li>Timestamp Tracking - All changes include when they were made</li> <li>Role-based Access - Only authorised reviewers can make changes</li> </ul>"},{"location":"pages/review/#error-handling","title":"Error Handling","text":"<p>The dashboard handles authentication errors gracefully:</p> <ul> <li>401 Unauthorised - Redirects to login if authentication expires</li> <li>403 Forbidden - Displays access denied message for insufficient permissions</li> <li>Network Errors - Provides user-friendly error messages for connectivity issues</li> </ul>"},{"location":"pages/statistics/","title":"Statistics","text":"<p>The Statistics section provides detailed analytics and insights into repository usage and technology adoption across the organisation.</p>"},{"location":"pages/statistics/#overview","title":"Overview","text":""},{"location":"pages/statistics/#repository-statistics","title":"Repository Statistics","text":"<ul> <li>Total repository count</li> <li>Public, private and internal repository counts</li> <li>Active vs. archived repositories</li> <li>Recent activity metrics</li> </ul>"},{"location":"pages/statistics/#repository-filters","title":"Repository Filters","text":"<ul> <li>Date range filter</li> <li>Active/archived/all filter</li> <li>Project filter using multi-select</li> </ul>"},{"location":"pages/statistics/#how-to-use","title":"How to use:","text":"<ul> <li>Click on the filter buttons under the 'Repository Statistics' heading</li> <li>Select the filters you want to apply</li> <li>Changes show instantly</li> </ul>"},{"location":"pages/statistics/#language-statistics","title":"Language Statistics","text":"<ul> <li>Sort by:</li> <li>Alphabetical (asc/desc)</li> <li>Number of repositories (asc/desc)</li> <li>Usage of language per repository (asc/desc)</li> <li>Size (percentage of that language in a repository) (asc/desc)</li> <li>Toggles:</li> <li>Show Average Size or Total Size on each language card</li> <li>Show languages only on the Tech Radar (part of the Tech Radar JSON)</li> </ul>"},{"location":"pages/statistics/#how-to-use_1","title":"How to use:","text":"<ul> <li>Click on the sort/toggle buttons under the 'Language Statistics' heading</li> <li>Select the filters you want to apply</li> <li> <p>Changes show instantly</p> </li> <li> <p>Hover over a language card</p> </li> <li> <p>Total repositories will show a percentage of the total number of repositories</p> </li> <li> <p>Click on a language card that has a colour other than grey and it will take you to the /radar page with the info box filled with the language details</p> </li> <li> <p>Use the search bar to search for a language (CMD + K or CTRL + K)</p> </li> </ul>"},{"location":"pages/statistics/#technology-grouping","title":"Technology Grouping","text":"<p>Some languages are grouped together on the Tech Radar for consistency:</p> <ul> <li>Javascript/Typescript: Clicking on either \"Javascript\" or \"Typescript\" language cards will navigate to the \"Javascript/Typescript\" entry on the radar page</li> <li>Other special matchers may apply similarly based on Tech Radar configuration</li> </ul>"},{"location":"testing/","title":"Testing Documentation","text":""},{"location":"testing/#overview","title":"Overview","text":"<p>The Digital Landscape application includes a comprehensive testing framework to ensure API endpoints function correctly and reliably. The testing suite focuses primarily on backend API validation, verifying that data is correctly retrieved, filtered, and processed according to specifications.</p>"},{"location":"testing/#testing-architecture","title":"Testing Architecture","text":"<p>The testing framework is built using Python with pytest and follows these key principles:</p> <ul> <li>Isolated Tests: Each test function validates a specific endpoint or functionality</li> <li>Comprehensive Coverage: Tests cover all API endpoints and their various parameters</li> <li>Clear Documentation: Each test includes detailed docstrings explaining purpose and expectations</li> <li>Error Handling Validation: Tests verify proper error responses for invalid inputs</li> <li>Organized Structure: Tests are grouped by API type across multiple files</li> </ul>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<p>The tests are organized into four main files:</p> Test File Endpoint Group Description <code>test_main.py</code> <code>/api/*</code> Core API endpoints (health, CSV, JSON, repository) <code>test_admin.py</code> <code>/admin/api/*</code> Admin API endpoints for banner management <code>test_review.py</code> <code>/review/api/*</code> Review API endpoints for tech radar updates <code>test_copilot.py</code> <code>/api/*</code> Copilot API endpoints"},{"location":"testing/#test-setup","title":"Test Setup","text":""},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Make (for using Makefile commands)</li> <li>Backend server running on localhost:5001</li> </ul>"},{"location":"testing/#installation","title":"Installation","text":"<pre><code># Navigate to the testing directory\ncd testing\n\n# Create a virtual environment (recommended)\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\nmake setup\n</code></pre>"},{"location":"testing/#running-tests","title":"Running Tests","text":"<p>The testing framework provides several commands for running tests:</p> <pre><code># Run all tests\nmake test\n\n# Run only core API tests\nmake test-main\n\n# Run only admin API tests\nmake test-admin\n\n# Run only review API tests\nmake test-review\n\n# Run only Copilot API tests\nmake test-copilot\n\n# Run a specific test\npython3 -m pytest backend/test_main.py::test_name -v\n\n# Example: Run only the health check test\npython3 -m pytest backend/test_main.py::test_health_check -v\n</code></pre>"},{"location":"testing/#test-categories","title":"Test Categories","text":"<p>The test suite covers the following API endpoints:</p>"},{"location":"testing/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>Tests the <code>/api/health</code> endpoint to verify server status and health metrics.</p> <p>Test the health check endpoint functionality.</p> <p>This test verifies that the health check endpoint is operational and returns the expected health status information about the server. It checks for the presence of essential health metrics and status indicators.</p> Endpoint <p>GET /api/health</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>\"healthy\" status indicator</li> <li>Current timestamp</li> <li>Server uptime in seconds</li> <li>Memory usage statistics</li> <li>Process ID</li> </ul> </li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_health_check():\n    \"\"\"Test the health check endpoint functionality.\n\n    This test verifies that the health check endpoint is operational and returns\n    the expected health status information about the server. It checks for the\n    presence of essential health metrics and status indicators.\n\n    Endpoint:\n        GET /api/health\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - \"healthy\" status indicator\n            - Current timestamp\n            - Server uptime in seconds\n            - Memory usage statistics\n            - Process ID\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/health\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"healthy\"\n    assert \"timestamp\" in data\n    assert \"uptime\" in data\n    assert \"memory\" in data\n    assert \"pid\" in data\n</code></pre>"},{"location":"testing/#project-data-endpoint","title":"Project Data Endpoint","text":"<p>Tests the <code>/api/csv</code> endpoint that provides project data from CSV sources.</p> <p>Test the CSV data endpoint functionality.</p> <p>This test verifies that the CSV endpoint correctly returns parsed CSV data from the S3 bucket. It checks that the data is properly formatted and contains the expected structure.</p> Endpoint <p>GET /api/csv</p> Expects <ul> <li>200 status code</li> <li>JSON array response</li> <li>Non-empty data entries</li> <li>Each entry should be a dictionary with multiple fields</li> <li>No empty or malformed entries</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_csv_endpoint():\n    \"\"\"Test the CSV data endpoint functionality.\n\n    This test verifies that the CSV endpoint correctly returns parsed CSV data\n    from the S3 bucket. It checks that the data is properly formatted and\n    contains the expected structure.\n\n    Endpoint:\n        GET /api/csv\n\n    Expects:\n        - 200 status code\n        - JSON array response\n        - Non-empty data entries\n        - Each entry should be a dictionary with multiple fields\n        - No empty or malformed entries\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/csv\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, list)\n    if len(data) &gt; 0:\n        first_item = data[0]\n        assert isinstance(first_item, dict)\n        assert len(first_item.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/#tech-radar-data-endpoint","title":"Tech Radar Data Endpoint","text":"<p>Tests the <code>/api/tech-radar/json</code> endpoint that provides Tech Radar configuration data.</p> <p>Test the tech radar JSON endpoint functionality.</p> <p>This test verifies that the tech radar endpoint correctly returns the radar configuration data from the S3 bucket. The data defines the structure and content of the technology radar visualization.</p> Endpoint <p>GET /api/tech-radar/json</p> Expects <ul> <li>200 status code</li> <li>JSON object response</li> <li>Non-empty configuration data</li> <li>Multiple configuration keys present</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_tech_radar_json_endpoint():\n    \"\"\"Test the tech radar JSON endpoint functionality.\n\n    This test verifies that the tech radar endpoint correctly returns the\n    radar configuration data from the S3 bucket. The data defines the structure\n    and content of the technology radar visualization.\n\n    Endpoint:\n        GET /api/tech-radar/json\n\n    Expects:\n        - 200 status code\n        - JSON object response\n        - Non-empty configuration data\n        - Multiple configuration keys present\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n    assert len(data.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/#repository-statistics-endpoints","title":"Repository Statistics Endpoints","text":"<p>Tests the <code>/api/json</code> endpoint with various filtering parameters:</p> <ul> <li>No parameters (default behavior)</li> <li>Date filtering</li> <li>Archived status filtering</li> <li>Combined parameter filtering</li> <li>Invalid parameter handling</li> </ul> <p>Test the JSON endpoint without query parameters.</p> <p>This test verifies the default behavior of the JSON endpoint when no filters are applied. It checks that the endpoint returns complete repository statistics and metadata.</p> Endpoint <p>GET /api/json</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>Repository statistics</li> <li>Language usage statistics</li> <li>Metadata information</li> </ul> </li> <li>Complete stats structure with:<ul> <li>Total repository count</li> <li>Private repository count</li> <li>Public repository count</li> <li>Internal repository count</li> </ul> </li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_no_params():\n    \"\"\"Test the JSON endpoint without query parameters.\n\n    This test verifies the default behavior of the JSON endpoint when no\n    filters are applied. It checks that the endpoint returns complete\n    repository statistics and metadata.\n\n    Endpoint:\n        GET /api/json\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - Repository statistics\n            - Language usage statistics\n            - Metadata information\n        - Complete stats structure with:\n            - Total repository count\n            - Private repository count\n            - Public repository count\n            - Internal repository count\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n</code></pre> <p>Test the JSON endpoint with datetime filtering.</p> <p>This test verifies that the endpoint correctly filters repository data based on a specified datetime parameter. It checks repositories modified within the last 7 days.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z</p> Expects <ul> <li>200 status code</li> <li>Filtered repository data</li> <li>Metadata containing the applied datetime filter</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_with_datetime():\n    \"\"\"Test the JSON endpoint with datetime filtering.\n\n    This test verifies that the endpoint correctly filters repository data\n    based on a specified datetime parameter. It checks repositories modified\n    within the last 7 days.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z\n\n    Expects:\n        - 200 status code\n        - Filtered repository data\n        - Metadata containing the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"datetime\": seven_days_ago}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/#repository-project-endpoints","title":"Repository Project Endpoints","text":"<p>Tests the <code>/api/repository/project/json</code> endpoint with various parameters:</p> <ul> <li>Missing parameters (error handling)</li> <li>Single repository filtering</li> <li>Multiple repository filtering</li> <li>Date filtering</li> <li>Archived status filtering</li> <li>Combined parameter filtering</li> <li>Language statistics validation</li> </ul> <p>Test the repository project JSON endpoint with a valid repository parameter.</p> <p>This test verifies the endpoint's basic functionality when requesting data for a single repository. It checks the complete response structure including repository data, statistics, and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Name of the repository to query (e.g., \"tech-radar\")</p> required Expects <ul> <li>200 status code</li> <li>JSON response with complete repository data</li> <li>Valid statistics for the repository</li> <li>Correct metadata including requested repository names</li> <li>Language statistics if available</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_repository_project_json_with_repos():\n    \"\"\"Test the repository project JSON endpoint with a valid repository parameter.\n\n    This test verifies the endpoint's basic functionality when requesting data\n    for a single repository. It checks the complete response structure including\n    repository data, statistics, and metadata.\n\n    Parameters:\n        repositories (str): Name of the repository to query (e.g., \"tech-radar\")\n\n    Expects:\n        - 200 status code\n        - JSON response with complete repository data\n        - Valid statistics for the repository\n        - Correct metadata including requested repository names\n        - Language statistics if available\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\",\n                            params={\"repositories\": \"tech-radar\"}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify response structure\n    assert \"repositories\" in data\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    # Verify stats structure\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n\n    # Verify metadata\n    metadata = data[\"metadata\"]\n    assert \"requested_repos\" in metadata\n    assert \"found_repos\" in metadata\n    assert metadata[\"requested_repos\"] == [\"tech-radar\"]\n</code></pre> <p>Test the repository project JSON endpoint with multiple repositories.</p> <p>This test verifies that the endpoint correctly handles requests for multiple repositories in a single call. It checks that all requested repositories are processed and included in the response.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Comma-separated list of repository names</p> required Example <p>GET /api/repository/project/json?repositories=tech-radar,another-repo</p> Expects <ul> <li>200 status code</li> <li>Data for all requested repositories</li> <li>Metadata containing all requested repository names</li> <li>Aggregated statistics across all repositories</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_repository_project_json_multiple_repos():\n    \"\"\"Test the repository project JSON endpoint with multiple repositories.\n\n    This test verifies that the endpoint correctly handles requests for\n    multiple repositories in a single call. It checks that all requested\n    repositories are processed and included in the response.\n\n    Parameters:\n        repositories (str): Comma-separated list of repository names\n\n    Example:\n        GET /api/repository/project/json?repositories=tech-radar,another-repo\n\n    Expects:\n        - 200 status code\n        - Data for all requested repositories\n        - Metadata containing all requested repository names\n        - Aggregated statistics across all repositories\n    \"\"\"\n    params = {\n        \"repositories\": \"tech-radar,another-repo\"\n    }\n    response = requests.get(\n        f\"{BASE_URL}/api/repository/project/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the requested repos are in metadata\n    assert len(data[\"metadata\"][\"requested_repos\"]) == 2\n    assert \"tech-radar\" in data[\"metadata\"][\"requested_repos\"]\n    assert \"another-repo\" in data[\"metadata\"][\"requested_repos\"]\n</code></pre>"},{"location":"testing/#tech-radar-update-endpoints","title":"Tech Radar Update Endpoints","text":"<p>Tests the endpoints for updating Tech Radar data:</p> <ul> <li>Empty update handling</li> <li>Partial updates</li> <li>Invalid entry handling</li> <li>Structure validation</li> <li>Reference validation</li> </ul> <p>Test the tech radar update endpoint with valid complete structure.</p> <p>This test verifies that the endpoint correctly processes a complete tech radar update with valid structure for all components.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Valid title</li> <li>Valid quadrants with required fields</li> <li>Valid rings with required fields</li> <li>Valid entries with required fields</li> </ul> Expects <ul> <li>200 status code</li> <li>Successful update confirmation</li> <li>Correct structure in stored data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_valid_structure():\n    \"\"\"Test the tech radar update endpoint with valid complete structure.\n\n    This test verifies that the endpoint correctly processes a complete\n    tech radar update with valid structure for all components.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Valid title\n        - Valid quadrants with required fields\n        - Valid rings with required fields\n        - Valid entries with required fields\n\n    Expects:\n        - 200 status code\n        - Successful update confirmation\n        - Correct structure in stored data\n    \"\"\"\n    random_number = random.randint(100, 1000)\n    test_data = {\n        \"entries\": [\n            {\n                \"id\": \"test-entry-1\",\n                \"title\": \"Test Entry 1\",\n                \"description\": \"Languages\",\n                \"key\": \"test1\",\n                \"url\": \"#\",\n                \"quadrant\": \"1\",\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"ignore\",\n                        \"date\": \"2000-01-01\",\n                        \"description\": f\"For testing purposes [CASE:{random_number}:2]\"\n                    }\n                ],\n                \"links\": []\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    assert response.json()[\"message\"] == \"Tech radar updated successfully\"\n\n    # Verify the update\n    get_response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert get_response.status_code == 200\n    updated_data = get_response.json()\n\n    # Verify entry structure\n    entries = updated_data[\"entries\"]\n    test_entry = next(\n        (entry for entry in entries if entry[\"id\"] == \"test-entry-1\"), None)\n    assert test_entry is not None, \"No entry with id 'test-entry-1' found\"\n    assert str(\n        random_number) in test_entry[\"timeline\"][0][\"description\"], \"Entry with id 'test-entry-1' does not have the expected description\"\n</code></pre> <p>Test the tech radar update endpoint with invalid structure.</p> <p>This test verifies that the endpoint correctly validates the complete structure of the tech radar data, including title, quadrants, rings, and entries.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Missing title</li> <li>Invalid quadrants structure</li> <li>Invalid rings structure</li> <li>Invalid entries structure</li> </ul> Expects <ul> <li>400 status code for each invalid case</li> <li>Appropriate error messages</li> <li>No changes to existing data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_invalid_structure():\n    \"\"\"Test the tech radar update endpoint with invalid structure.\n\n    This test verifies that the endpoint correctly validates the complete\n    structure of the tech radar data, including title, quadrants, rings,\n    and entries.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Missing title\n        - Invalid quadrants structure\n        - Invalid rings structure\n        - Invalid entries structure\n\n    Expects:\n        - 400 status code for each invalid case\n        - Appropriate error messages\n        - No changes to existing data\n    \"\"\"\n    # Test missing title\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"quadrants\": [],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid quadrants\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"invalid\": \"structure\"}],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid rings\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"id\": \"1\", \"name\": \"Test\"}],\n            \"rings\": [{\"invalid\": \"structure\"}],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n</code></pre>"},{"location":"testing/#admin-banner-management-endpoints","title":"Admin Banner Management Endpoints","text":"<p>Tests the endpoints for managing banner messages:</p> <ul> <li>Banner retrieval</li> <li>Banner creation</li> <li>Banner visibility toggling</li> <li>Banner deletion</li> <li>Validation of requests</li> </ul> <p>Test the admin banners endpoint for retrieving banner messages.</p> <p>This test verifies that the endpoint correctly returns banner messages from the S3 bucket. It checks the structure of the response and ensures the messages array is present.</p> Endpoint <p>GET /admin/api/banners</p> Expects <ul> <li>200 status code</li> <li>JSON response containing a messages array</li> <li>Valid structure that can be parsed by the admin UI</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_get():\n    \"\"\"Test the admin banners endpoint for retrieving banner messages.\n\n    This test verifies that the endpoint correctly returns banner messages\n    from the S3 bucket. It checks the structure of the response and ensures\n    the messages array is present.\n\n    Endpoint:\n        GET /admin/api/banners\n\n    Expects:\n        - 200 status code\n        - JSON response containing a messages array\n        - Valid structure that can be parsed by the admin UI\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert \"messages\" in data\n    assert isinstance(data[\"messages\"], list)\n</code></pre> <p>Test the admin banners update endpoint.</p> <p>This test verifies that the endpoint correctly processes banner updates with valid data and saves them to the S3 bucket.</p> Endpoint <p>POST /admin/api/banners/update</p> Test Data <ul> <li>Valid banner message</li> <li>Array of pages where the banner should appear</li> <li>Optional banner title and type</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming the banner was added</li> <li>Banner should be retrievable in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_update():\n    \"\"\"Test the admin banners update endpoint.\n\n    This test verifies that the endpoint correctly processes banner\n    updates with valid data and saves them to the S3 bucket.\n\n    Endpoint:\n        POST /admin/api/banners/update\n\n    Test Data:\n        - Valid banner message\n        - Array of pages where the banner should appear\n        - Optional banner title and type\n\n    Expects:\n        - 200 status code\n        - Success message confirming the banner was added\n        - Banner should be retrievable in subsequent GET requests\n    \"\"\"\n    test_data = {\n        \"banner\": {\n            \"message\": \"Test Banner Message\",\n            \"title\": \"Test Banner\",\n            \"type\": \"info\",\n            \"pages\": [\"radar\", \"statistics\"],\n            \"show\": True\n        }\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert \"message\" in data\n    assert data[\"message\"] == \"Banner added successfully\"\n\n    # Verify the banner was added\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    get_data = get_response.json()\n    assert \"messages\" in get_data\n\n    # Find the added banner by message - last message should be the one added\n\n    if get_data[\"messages\"]:\n        added_banner = get_data[\"messages\"][-1]\n    else:\n        assert False, \"No banners found after adding\"\n    assert added_banner is not None\n    assert added_banner[\"title\"] == \"Test Banner\"\n    assert added_banner[\"type\"] == \"info\"\n    assert \"radar\" in added_banner[\"pages\"]\n    assert \"statistics\" in added_banner[\"pages\"]\n    assert added_banner[\"show\"] is True\n</code></pre>"},{"location":"testing/#error-handling-tests","title":"Error Handling Tests","text":"<p>The test suite includes specific tests for error conditions:</p> <ul> <li>Invalid endpoints</li> <li>Invalid date parameters</li> <li>Missing required parameters</li> <li>Invalid data structures</li> </ul> <p>Test error handling for invalid endpoints.</p> <p>This test verifies that the server properly handles requests to non-existent endpoints by returning appropriate error status codes.</p> Example <p>GET /api/nonexistent</p> Expects <ul> <li>Either 404 (Not Found) or 500 (Internal Server Error) status code</li> <li>Proper error handling for invalid routes</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_invalid_endpoint():\n    \"\"\"Test error handling for invalid endpoints.\n\n    This test verifies that the server properly handles requests to\n    non-existent endpoints by returning appropriate error status codes.\n\n    Example:\n        GET /api/nonexistent\n\n    Expects:\n        - Either 404 (Not Found) or 500 (Internal Server Error) status code\n        - Proper error handling for invalid routes\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/nonexistent\", timeout=10)\n    assert response.status_code in [404, 500]  # Either is acceptable\n</code></pre> <p>Test the JSON endpoint's handling of invalid date parameters.</p> <p>This test verifies that the endpoint gracefully handles invalid datetime parameters without failing. It should ignore the invalid date and return unfiltered results.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>An invalid datetime string</p> required Example <p>GET /api/json?datetime=invalid-date</p> Expects <ul> <li>200 status code (graceful handling)</li> <li>Null filter_date in metadata</li> <li>Valid response with unfiltered stats</li> <li>Complete language statistics</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_invalid_date():\n    \"\"\"Test the JSON endpoint's handling of invalid date parameters.\n\n    This test verifies that the endpoint gracefully handles invalid datetime\n    parameters without failing. It should ignore the invalid date and return\n    unfiltered results.\n\n    Parameters:\n        datetime (str): An invalid datetime string\n\n    Example:\n        GET /api/json?datetime=invalid-date\n\n    Expects:\n        - 200 status code (graceful handling)\n        - Null filter_date in metadata\n        - Valid response with unfiltered stats\n        - Complete language statistics\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"datetime\": \"invalid-date\"}, timeout=10)\n    assert response.status_code == 200  # Backend handles invalid dates gracefully\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] is None\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n</code></pre>"},{"location":"testing/#code-quality","title":"Code Quality","text":"<p>The testing framework includes tools for maintaining code quality:</p> <pre><code># Run linting checks\nmake lint\n\n# Run specific linters\nmake ruff\nmake pylint\n\n# Clean up cache files\nmake clean\n</code></pre>"},{"location":"testing/#integration-with-utilities","title":"Integration with Utilities","text":"<p>The tests validate the same endpoints used by the frontend utilities:</p> <ul> <li>Project Data Utility: Tests the <code>/api/csv</code> endpoint used by <code>fetchCSVFromS3()</code></li> <li>Repository Data Utility: Tests the <code>/api/repository/project/json</code> endpoint used by <code>fetchRepositoryData()</code></li> <li>Tech Radar Data Utility: Tests the <code>/api/tech-radar/json</code> endpoint used by <code>fetchTechRadarJSONFromS3()</code></li> <li>Admin Utilities: Tests the <code>/admin/api/banners*</code> endpoints used by the admin interface for banner management</li> </ul> <p>This ensures that the data providers for the DataContext are functioning correctly and returning the expected data structures.</p>"},{"location":"testing/accessibility/","title":"Accessibility Testing","text":"<p>The Digital Landscape application includes automated accessibility testing to ensure compliance with web accessibility standards using Axe-core and Playwright.</p>"},{"location":"testing/accessibility/#overview","title":"Overview","text":"<p>Our accessibility testing framework automatically scans all major routes in the application and generates detailed reports of accessibility issues. This helps identify barriers that might prevent users with disabilities from accessing our content.</p>"},{"location":"testing/accessibility/#key-features","title":"Key Features","text":"<ul> <li>Automated testing of all main application routes</li> <li>Detailed reports with severity categorisation</li> <li>HTML and Markdown report generation</li> <li>Impact-based violation grouping (Critical, Serious, Moderate, Minor)</li> <li>Support for filtering by specific WCAG tags</li> </ul>"},{"location":"testing/accessibility/#implementation","title":"Implementation","text":"<p>The testing is implemented using:</p> <ul> <li>Playwright: For headless browser automation</li> <li>Axe-core: For accessibility testing and rule evaluation</li> <li>Node.js: For running the tests and generating reports</li> </ul> <pre><code>const { chromium } = require('playwright');\nconst AxeBuilder = require('@axe-core/playwright').default;\nconst fs = require('fs');\nconst path = require('path');\nconst { generateCombinedHtmlReport, generateCombinedMarkdownReport } = require('./generate');\n\n// collect optional axe tags from CLI arguments\nconst tags = process.argv.slice(2);\n\nconst pages = ['/', '/radar', '/statistics', '/projects', '/review/dashboard', '/admin/dashboard'];\nconst timestamp = new Date().toISOString().replace(/:/g, '-');\nconst REPORTS_DIR = path.join(process.cwd(), 'reports', timestamp);\n\n// ensure the root reports directory exists\nfs.mkdirSync(REPORTS_DIR, { recursive: true });\nfs.mkdirSync(path.join(REPORTS_DIR, 'JSON'), { recursive: true });\n\n(async () =&gt; {\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n\n  // Accumulate results for combined report\n  const routeResults = [];\n\n  for (const route of pages) {\n    // sanitise route name to avoid nested paths in filenames\n    const rawName = route === '/' ? 'home' : route.slice(1);\n    const routeName = rawName.replace(/\\//g, '-');\n    console.log(`Testing ${route}`);\n\n    await page.goto(`http://localhost:3000${route}`);\n\n    // build axe builder and apply tags if provided\n    let builder = new AxeBuilder({ page });\n    if (tags.length) {\n      builder = builder.withTags(tags);\n    }\n    const accessibilityScanResults = await builder.analyze();\n\n    // Process results and generate reports\n    // ...\n  }\n})();\n</code></pre>"},{"location":"testing/accessibility/#report-generation","title":"Report Generation","text":"<p>The testing framework generates three types of reports:</p> <ol> <li>Individual JSON reports: Raw data for each route</li> <li>Combined HTML report: Human-readable report with detailed information and styling</li> <li>Combined Markdown report: Suitable for documentation systems and GitHub</li> </ol>"},{"location":"testing/accessibility/#report-example","title":"Report Example","text":"<p>HTML reports include:</p> <ul> <li>Total violation counts</li> <li>Breakdown by severity (Critical, Serious, Moderate, Minor)</li> <li>Detailed descriptions of each issue</li> <li>Specific HTML elements causing violations</li> <li>Links to remediation resources</li> </ul>"},{"location":"testing/accessibility/#running-the-tests","title":"Running the Tests","text":"<p>To run the accessibility tests:</p> <pre><code># Navigate to the testing/frontend directory\ncd testing/frontend\n\n# Run tests with all rules\nnpm run test:accessibility\n\n# Run tests with specific tags\nnpm run test:accessibility wcag2a wcag2aa\n</code></pre>"},{"location":"testing/accessibility/#understanding-violations","title":"Understanding Violations","text":"<p>Violations are categorised by impact:</p> <ul> <li>Critical: Blocking issues that prevent users from accessing content</li> <li>Serious: Major barriers that significantly impair user experience</li> <li>Moderate: Issues that cause frustration or confusion</li> <li>Minor: Subtle issues that may impact some users</li> </ul>"},{"location":"testing/accessibility/#interpreting-results","title":"Interpreting Results","text":"<p>When reviewing accessibility reports:</p> <ol> <li>Focus on Critical and Serious issues first</li> <li>Look for patterns across multiple pages</li> <li>Prioritise fixes that impact the largest number of users</li> <li>Address violations with clear remediation guidance</li> </ol>"},{"location":"testing/accessibility/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Accessibility testing is integrated into our development workflow to:</p> <ul> <li>Catch issues early in development</li> <li>Ensure new features maintain accessibility standards</li> <li>Track accessibility improvements over time</li> <li>Document compliance for audit purposes</li> </ul>"},{"location":"testing/accessibility/#wcag-compliance","title":"WCAG Compliance","text":"<p>Our accessibility testing is aligned with Web Content Accessibility Guidelines (WCAG), specifically targeting:</p> <ul> <li>WCAG 2.1 AA compliance as a minimum standard</li> <li>Key areas of focus:</li> <li>Keyboard navigation</li> <li>Screen reader compatibility</li> <li>Colour contrast</li> <li>Form labelling and validation</li> <li>Focus management</li> </ul>"},{"location":"testing/backend/","title":"Backend Testing","text":""},{"location":"testing/backend/#overview","title":"Overview","text":"<p>The backend testing suite validates the API endpoints that serve data to the Digital Landscape application. These tests ensure that the backend correctly processes requests, applies filters, and returns properly structured data.</p>"},{"location":"testing/backend/#test-implementation","title":"Test Implementation","text":"<p>The backend tests are implemented in the <code>testing/backend/</code> directory using the pytest framework and the requests library to make HTTP calls to the API endpoints. The tests are organised into four main files:</p> <ul> <li><code>test_main.py</code> - Tests for core API endpoints</li> <li><code>test_admin.py</code> - Tests for admin API endpoints</li> <li><code>test_review.py</code> - Tests for review API endpoints</li> <li><code>test_copilot.py</code> - Tests for Copilot API endpoints</li> </ul>"},{"location":"testing/backend/#base-configuration","title":"Base Configuration","text":"<p>All tests use a common base URL configuration:</p> <pre><code>BASE_URL = \"http://localhost:5001\"\n</code></pre>"},{"location":"testing/backend/#running-tests","title":"Running Tests","text":"<pre><code># Navigate to the testing directory\ncd testing/backend\n\n# Create a virtual environment (recommended)\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\nmake setup\n</code></pre> <p>The testing framework provides several commands for running tests:</p> <pre><code># Run all tests\nmake test\n\n# Run only main API tests\nmake test-main\n\n# Run only admin API tests\nmake test-admin\n\n# Run only review API tests\nmake test-review\n\n# Run only Copilot API tests\nmake test-copilot\n</code></pre>"},{"location":"testing/backend/#health-check-tests","title":"Health Check Tests","text":"<p>The health check endpoint test verifies that the server is operational and returns basic health metrics:</p> <p>Test the health check endpoint functionality.</p> <p>This test verifies that the health check endpoint is operational and returns the expected health status information about the server. It checks for the presence of essential health metrics and status indicators.</p> Endpoint <p>GET /api/health</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>\"healthy\" status indicator</li> <li>Current timestamp</li> <li>Server uptime in seconds</li> <li>Memory usage statistics</li> <li>Process ID</li> </ul> </li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_health_check():\n    \"\"\"Test the health check endpoint functionality.\n\n    This test verifies that the health check endpoint is operational and returns\n    the expected health status information about the server. It checks for the\n    presence of essential health metrics and status indicators.\n\n    Endpoint:\n        GET /api/health\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - \"healthy\" status indicator\n            - Current timestamp\n            - Server uptime in seconds\n            - Memory usage statistics\n            - Process ID\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/health\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"healthy\"\n    assert \"timestamp\" in data\n    assert \"uptime\" in data\n    assert \"memory\" in data\n    assert \"pid\" in data\n</code></pre>"},{"location":"testing/backend/#project-data-tests","title":"Project Data Tests","text":"<p>The CSV endpoint test verifies that project data is correctly retrieved and formatted:</p> <p>Test the CSV data endpoint functionality.</p> <p>This test verifies that the CSV endpoint correctly returns parsed CSV data from the S3 bucket. It checks that the data is properly formatted and contains the expected structure.</p> Endpoint <p>GET /api/csv</p> Expects <ul> <li>200 status code</li> <li>JSON array response</li> <li>Non-empty data entries</li> <li>Each entry should be a dictionary with multiple fields</li> <li>No empty or malformed entries</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_csv_endpoint():\n    \"\"\"Test the CSV data endpoint functionality.\n\n    This test verifies that the CSV endpoint correctly returns parsed CSV data\n    from the S3 bucket. It checks that the data is properly formatted and\n    contains the expected structure.\n\n    Endpoint:\n        GET /api/csv\n\n    Expects:\n        - 200 status code\n        - JSON array response\n        - Non-empty data entries\n        - Each entry should be a dictionary with multiple fields\n        - No empty or malformed entries\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/csv\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, list)\n    if len(data) &gt; 0:\n        first_item = data[0]\n        assert isinstance(first_item, dict)\n        assert len(first_item.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/backend/#tech-radar-data-tests","title":"Tech Radar Data Tests","text":"<p>The Tech Radar JSON endpoint test verifies that the radar configuration data is correctly retrieved:</p> <p>Test the tech radar JSON endpoint functionality.</p> <p>This test verifies that the tech radar endpoint correctly returns the radar configuration data from the S3 bucket. The data defines the structure and content of the technology radar visualization.</p> Endpoint <p>GET /api/tech-radar/json</p> Expects <ul> <li>200 status code</li> <li>JSON object response</li> <li>Non-empty configuration data</li> <li>Multiple configuration keys present</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_tech_radar_json_endpoint():\n    \"\"\"Test the tech radar JSON endpoint functionality.\n\n    This test verifies that the tech radar endpoint correctly returns the\n    radar configuration data from the S3 bucket. The data defines the structure\n    and content of the technology radar visualization.\n\n    Endpoint:\n        GET /api/tech-radar/json\n\n    Expects:\n        - 200 status code\n        - JSON object response\n        - Non-empty configuration data\n        - Multiple configuration keys present\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n    assert len(data.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/backend/#repository-statistics-tests","title":"Repository Statistics Tests","text":""},{"location":"testing/backend/#basic-statistics","title":"Basic Statistics","text":"<p>Tests the default behaviour with no filters:</p> <p>Test the JSON endpoint without query parameters.</p> <p>This test verifies the default behavior of the JSON endpoint when no filters are applied. It checks that the endpoint returns complete repository statistics and metadata.</p> Endpoint <p>GET /api/json</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>Repository statistics</li> <li>Language usage statistics</li> <li>Metadata information</li> </ul> </li> <li>Complete stats structure with:<ul> <li>Total repository count</li> <li>Private repository count</li> <li>Public repository count</li> <li>Internal repository count</li> </ul> </li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_no_params():\n    \"\"\"Test the JSON endpoint without query parameters.\n\n    This test verifies the default behavior of the JSON endpoint when no\n    filters are applied. It checks that the endpoint returns complete\n    repository statistics and metadata.\n\n    Endpoint:\n        GET /api/json\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - Repository statistics\n            - Language usage statistics\n            - Metadata information\n        - Complete stats structure with:\n            - Total repository count\n            - Private repository count\n            - Public repository count\n            - Internal repository count\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n</code></pre>"},{"location":"testing/backend/#date-filtering","title":"Date Filtering","text":"<p>Tests filtering repositories by a specific date:</p> <p>Test the JSON endpoint with datetime filtering.</p> <p>This test verifies that the endpoint correctly filters repository data based on a specified datetime parameter. It checks repositories modified within the last 7 days.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z</p> Expects <ul> <li>200 status code</li> <li>Filtered repository data</li> <li>Metadata containing the applied datetime filter</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_with_datetime():\n    \"\"\"Test the JSON endpoint with datetime filtering.\n\n    This test verifies that the endpoint correctly filters repository data\n    based on a specified datetime parameter. It checks repositories modified\n    within the last 7 days.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z\n\n    Expects:\n        - 200 status code\n        - Filtered repository data\n        - Metadata containing the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"datetime\": seven_days_ago}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/backend/#archived-status-filtering","title":"Archived Status Filtering","text":"<p>Tests filtering repositories by archived status:</p> <p>Test the JSON endpoint with archived status filtering.</p> <p>This test verifies that the endpoint correctly filters repositories based on their archived status. It tests both archived and non-archived filtering options.</p> <p>Parameters:</p> Name Type Description Default <code>archived</code> <code>str</code> <p>\"true\" or \"false\" to filter archived status</p> required Example <p>GET /api/json?archived=false</p> Expects <ul> <li>200 status code for both archived and non-archived queries</li> <li>Filtered repository data based on archived status</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_with_archived():\n    \"\"\"Test the JSON endpoint with archived status filtering.\n\n    This test verifies that the endpoint correctly filters repositories\n    based on their archived status. It tests both archived and non-archived\n    filtering options.\n\n    Parameters:\n        archived (str): \"true\" or \"false\" to filter archived status\n\n    Example:\n        GET /api/json?archived=false\n\n    Expects:\n        - 200 status code for both archived and non-archived queries\n        - Filtered repository data based on archived status\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"archived\": \"true\"}, timeout=10)\n    assert response.status_code == 200\n\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"archived\": \"false\"}, timeout=10)\n    assert response.status_code == 200\n</code></pre>"},{"location":"testing/backend/#combined-filtering","title":"Combined Filtering","text":"<p>Tests applying multiple filters simultaneously:</p> <p>Test the JSON endpoint with multiple filter parameters.</p> <p>This test verifies that the endpoint correctly handles multiple filter parameters simultaneously, including datetime and archived status filters. It ensures all filters are properly applied and reflected in the response.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required <code>archived</code> <code>str</code> <p>\"true\" or \"false\" to filter archived status</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z&amp;archived=false</p> Expects <ul> <li>200 status code</li> <li>Repository data filtered by all parameters</li> <li>Metadata reflecting the applied datetime filter</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_combined_params():\n    \"\"\"Test the JSON endpoint with multiple filter parameters.\n\n    This test verifies that the endpoint correctly handles multiple filter\n    parameters simultaneously, including datetime and archived status filters.\n    It ensures all filters are properly applied and reflected in the response.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n        archived (str): \"true\" or \"false\" to filter archived status\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z&amp;archived=false\n\n    Expects:\n        - 200 status code\n        - Repository data filtered by all parameters\n        - Metadata reflecting the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    params = {\n        \"datetime\": seven_days_ago,\n        \"archived\": \"false\"\n    }\n    response = requests.get(f\"{BASE_URL}/api/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/backend/#repository-project-tests","title":"Repository Project Tests","text":""},{"location":"testing/backend/#error-handling","title":"Error Handling","text":"<p>Tests the endpoint's response when required parameters are missing:</p> <p>Test the repository project JSON endpoint error handling for missing parameters.</p> <p>This test verifies that the endpoint correctly handles the case when no repositories are specified in the request parameters. It should return a 400 Bad Request status code with an appropriate error message.</p> Expects <ul> <li>400 status code</li> <li>JSON response with error message</li> <li>Error message indicating no repositories specified</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_repository_project_json_no_params():\n    \"\"\"Test the repository project JSON endpoint error handling for missing parameters.\n\n    This test verifies that the endpoint correctly handles the case when no\n    repositories are specified in the request parameters. It should return\n    a 400 Bad Request status code with an appropriate error message.\n\n    Expects:\n        - 400 status code\n        - JSON response with error message\n        - Error message indicating no repositories specified\n    \"\"\"\n    response = requests.get(\n        f\"{BASE_URL}/api/repository/project/json\", timeout=10)\n    assert response.status_code == 400\n    data = response.json()\n    assert \"error\" in data\n    assert data[\"error\"] == \"No repositories specified\"\n</code></pre>"},{"location":"testing/backend/#single-repository","title":"Single Repository","text":"<p>Tests retrieving data for a single repository:</p> <p>Test the repository project JSON endpoint with a valid repository parameter.</p> <p>This test verifies the endpoint's basic functionality when requesting data for a single repository. It checks the complete response structure including repository data, statistics, and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Name of the repository to query (e.g., \"tech-radar\")</p> required Expects <ul> <li>200 status code</li> <li>JSON response with complete repository data</li> <li>Valid statistics for the repository</li> <li>Correct metadata including requested repository names</li> <li>Language statistics if available</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_repository_project_json_with_repos():\n    \"\"\"Test the repository project JSON endpoint with a valid repository parameter.\n\n    This test verifies the endpoint's basic functionality when requesting data\n    for a single repository. It checks the complete response structure including\n    repository data, statistics, and metadata.\n\n    Parameters:\n        repositories (str): Name of the repository to query (e.g., \"tech-radar\")\n\n    Expects:\n        - 200 status code\n        - JSON response with complete repository data\n        - Valid statistics for the repository\n        - Correct metadata including requested repository names\n        - Language statistics if available\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\",\n                            params={\"repositories\": \"tech-radar\"}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify response structure\n    assert \"repositories\" in data\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    # Verify stats structure\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n\n    # Verify metadata\n    metadata = data[\"metadata\"]\n    assert \"requested_repos\" in metadata\n    assert \"found_repos\" in metadata\n    assert metadata[\"requested_repos\"] == [\"tech-radar\"]\n</code></pre>"},{"location":"testing/backend/#multiple-repositories","title":"Multiple Repositories","text":"<p>Tests retrieving data for multiple repositories:</p> <p>Test the repository project JSON endpoint with multiple repositories.</p> <p>This test verifies that the endpoint correctly handles requests for multiple repositories in a single call. It checks that all requested repositories are processed and included in the response.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Comma-separated list of repository names</p> required Example <p>GET /api/repository/project/json?repositories=tech-radar,another-repo</p> Expects <ul> <li>200 status code</li> <li>Data for all requested repositories</li> <li>Metadata containing all requested repository names</li> <li>Aggregated statistics across all repositories</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_repository_project_json_multiple_repos():\n    \"\"\"Test the repository project JSON endpoint with multiple repositories.\n\n    This test verifies that the endpoint correctly handles requests for\n    multiple repositories in a single call. It checks that all requested\n    repositories are processed and included in the response.\n\n    Parameters:\n        repositories (str): Comma-separated list of repository names\n\n    Example:\n        GET /api/repository/project/json?repositories=tech-radar,another-repo\n\n    Expects:\n        - 200 status code\n        - Data for all requested repositories\n        - Metadata containing all requested repository names\n        - Aggregated statistics across all repositories\n    \"\"\"\n    params = {\n        \"repositories\": \"tech-radar,another-repo\"\n    }\n    response = requests.get(\n        f\"{BASE_URL}/api/repository/project/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the requested repos are in metadata\n    assert len(data[\"metadata\"][\"requested_repos\"]) == 2\n    assert \"tech-radar\" in data[\"metadata\"][\"requested_repos\"]\n    assert \"another-repo\" in data[\"metadata\"][\"requested_repos\"]\n</code></pre>"},{"location":"testing/backend/#tech-radar-update-tests","title":"Tech Radar Update Tests","text":"<p>These tests are located in <code>test_review.py</code> and verify the review API endpoints.</p>"},{"location":"testing/backend/#missing-entries","title":"Missing Entries","text":"<p>Tests handling of missing entries data:</p> <p>Test the tech radar update endpoint with missing entries.</p> <p>This test verifies that the endpoint correctly handles requests with missing entries data by returning an appropriate error response.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Expects <ul> <li>400 status code</li> <li>JSON response with error message</li> <li>Error message indicating invalid or missing title</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_no_entries():\n    \"\"\"Test the tech radar update endpoint with missing entries.\n\n    This test verifies that the endpoint correctly handles requests with\n    missing entries data by returning an appropriate error response.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Expects:\n        - 400 status code\n        - JSON response with error message\n        - Error message indicating invalid or missing title\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\", json={}, timeout=10)\n    assert response.status_code == 400\n    data = response.json()\n    assert \"error\" in data\n    assert data[\"error\"] == \"Invalid or empty entries data\"\n</code></pre>"},{"location":"testing/backend/#partial-updates","title":"Partial Updates","text":"<p>Tests processing of partial updates:</p> <p>Test the tech radar update endpoint with a partial update.</p> <p>This test verifies that the endpoint correctly processes updates when provided with the complete tech radar structure.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Complete tech radar structure</li> <li>Valid entries with all required fields</li> </ul> Expects <ul> <li>200 status code</li> <li>Successful update of entries</li> <li>Correct structure in stored data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_partial():\n    \"\"\"Test the tech radar update endpoint with a partial update.\n\n    This test verifies that the endpoint correctly processes updates\n    when provided with the complete tech radar structure.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Complete tech radar structure\n        - Valid entries with all required fields\n\n    Expects:\n        - 200 status code\n        - Successful update of entries\n        - Correct structure in stored data\n    \"\"\"\n    random_number = random.randint(100, 1000)\n    test_data = {\n        \"entries\": [\n            {\n                \"id\": \"test-entry-partial-1\",\n                \"title\": \"Test Entry Partial 1\",\n                \"description\": \"Languages\",\n                \"key\": \"test1\",\n                \"url\": \"#\",\n                \"quadrant\": \"1\",\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"ignore\",\n                        \"date\": \"2000-01-01\",\n                        \"description\": f\"For testing purposes [CASE:{random_number}:1]\"\n                    }\n                ],\n                \"links\": []\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n\n    # Verify the updates\n    get_response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert get_response.status_code == 200\n    updated_data = get_response.json()\n\n    # Verify our entry exists and is correct\n    updated_entries = {entry[\"id\"]: entry for entry in updated_data[\"entries\"]}\n    assert \"test-entry-partial-1\" in updated_entries\n    assert updated_entries[\"test-entry-partial-1\"][\"timeline\"][0][\"ringId\"] == \"ignore\"\n    assert updated_entries[\"test-entry-partial-1\"][\"quadrant\"] == \"1\"\n</code></pre>"},{"location":"testing/backend/#invalid-entries","title":"Invalid Entries","text":"<p>Tests validation of invalid entries:</p> <p>Test the tech radar update endpoint with invalid entries format.</p> <p>This test verifies that the endpoint correctly handles requests with invalid entries data format by returning an appropriate error response.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Invalid entries format</li> <li>Missing required fields</li> <li>Malformed data structures</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message for invalid data</li> <li>No changes to existing entries</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_invalid_entries():\n    \"\"\"Test the tech radar update endpoint with invalid entries format.\n\n    This test verifies that the endpoint correctly handles requests with\n    invalid entries data format by returning an appropriate error response.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Invalid entries format\n        - Missing required fields\n        - Malformed data structures\n\n    Expects:\n        - 400 status code\n        - Error message for invalid data\n        - No changes to existing entries\n    \"\"\"\n    # Test with missing title\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\"entries\": \"not_an_array\"},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n</code></pre>"},{"location":"testing/backend/#valid-structure","title":"Valid Structure","text":"<p>Tests updating the Tech Radar with valid data:</p> <p>Test the tech radar update endpoint with valid complete structure.</p> <p>This test verifies that the endpoint correctly processes a complete tech radar update with valid structure for all components.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Valid title</li> <li>Valid quadrants with required fields</li> <li>Valid rings with required fields</li> <li>Valid entries with required fields</li> </ul> Expects <ul> <li>200 status code</li> <li>Successful update confirmation</li> <li>Correct structure in stored data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_valid_structure():\n    \"\"\"Test the tech radar update endpoint with valid complete structure.\n\n    This test verifies that the endpoint correctly processes a complete\n    tech radar update with valid structure for all components.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Valid title\n        - Valid quadrants with required fields\n        - Valid rings with required fields\n        - Valid entries with required fields\n\n    Expects:\n        - 200 status code\n        - Successful update confirmation\n        - Correct structure in stored data\n    \"\"\"\n    random_number = random.randint(100, 1000)\n    test_data = {\n        \"entries\": [\n            {\n                \"id\": \"test-entry-1\",\n                \"title\": \"Test Entry 1\",\n                \"description\": \"Languages\",\n                \"key\": \"test1\",\n                \"url\": \"#\",\n                \"quadrant\": \"1\",\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"ignore\",\n                        \"date\": \"2000-01-01\",\n                        \"description\": f\"For testing purposes [CASE:{random_number}:2]\"\n                    }\n                ],\n                \"links\": []\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    assert response.json()[\"message\"] == \"Tech radar updated successfully\"\n\n    # Verify the update\n    get_response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert get_response.status_code == 200\n    updated_data = get_response.json()\n\n    # Verify entry structure\n    entries = updated_data[\"entries\"]\n    test_entry = next(\n        (entry for entry in entries if entry[\"id\"] == \"test-entry-1\"), None)\n    assert test_entry is not None, \"No entry with id 'test-entry-1' found\"\n    assert str(\n        random_number) in test_entry[\"timeline\"][0][\"description\"], \"Entry with id 'test-entry-1' does not have the expected description\"\n</code></pre>"},{"location":"testing/backend/#invalid-structure","title":"Invalid Structure","text":"<p>Tests the endpoint's handling of invalid data structures:</p> <p>Test the tech radar update endpoint with invalid structure.</p> <p>This test verifies that the endpoint correctly validates the complete structure of the tech radar data, including title, quadrants, rings, and entries.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Missing title</li> <li>Invalid quadrants structure</li> <li>Invalid rings structure</li> <li>Invalid entries structure</li> </ul> Expects <ul> <li>400 status code for each invalid case</li> <li>Appropriate error messages</li> <li>No changes to existing data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_invalid_structure():\n    \"\"\"Test the tech radar update endpoint with invalid structure.\n\n    This test verifies that the endpoint correctly validates the complete\n    structure of the tech radar data, including title, quadrants, rings,\n    and entries.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Missing title\n        - Invalid quadrants structure\n        - Invalid rings structure\n        - Invalid entries structure\n\n    Expects:\n        - 400 status code for each invalid case\n        - Appropriate error messages\n        - No changes to existing data\n    \"\"\"\n    # Test missing title\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"quadrants\": [],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid quadrants\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"invalid\": \"structure\"}],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid rings\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"id\": \"1\", \"name\": \"Test\"}],\n            \"rings\": [{\"invalid\": \"structure\"}],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n</code></pre>"},{"location":"testing/backend/#invalid-references","title":"Invalid References","text":"<p>Tests validation of references between entries and quadrants/rings:</p> <p>Test the tech radar update endpoint with invalid references.</p> <p>This test verifies that the endpoint correctly validates references between entries and their quadrants/rings.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Entry with invalid quadrant reference</li> <li>Entry with invalid ring reference</li> <li>Entry with missing required fields</li> </ul> Expects <ul> <li>400 status code</li> <li>Appropriate error messages</li> <li>No changes to existing data</li> </ul> Source code in <code>testing/backend/src/test_review.py</code> <pre><code>def test_tech_radar_update_invalid_references():\n    \"\"\"Test the tech radar update endpoint with invalid references.\n\n    This test verifies that the endpoint correctly validates references\n    between entries and their quadrants/rings.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Entry with invalid quadrant reference\n        - Entry with invalid ring reference\n        - Entry with missing required fields\n\n    Expects:\n        - 400 status code\n        - Appropriate error messages\n        - No changes to existing data\n    \"\"\"\n    test_data = {\n        \"title\": \"ONS Tech Radar\",\n        \"quadrants\": [\n            {\"id\": \"1\", \"name\": \"Languages\"}\n        ],\n        \"rings\": [\n            {\"id\": \"adopt\", \"name\": \"ADOPT\", \"color\": \"#008a00\"}\n        ],\n        \"entries\": [\n            {\n                \"id\": \"test-entry\",\n                \"title\": \"Test Entry\",\n                \"quadrant\": \"invalid\",  # Invalid quadrant reference\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"invalid\",  # Invalid ring reference\n                        \"date\": \"2024-03\",\n                        \"description\": \"Test\"\n                    }\n                ]\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid entry structure\" in response.json()[\"error\"]\n</code></pre>"},{"location":"testing/backend/#admin-api-tests","title":"Admin API Tests","text":"<p>These tests are located in <code>test_admin.py</code> and verify the admin API endpoints.</p>"},{"location":"testing/backend/#banner-retrieval","title":"Banner Retrieval","text":"<p>Tests retrieving banner messages:</p> <p>Test the admin banners endpoint for retrieving banner messages.</p> <p>This test verifies that the endpoint correctly returns banner messages from the S3 bucket. It checks the structure of the response and ensures the messages array is present.</p> Endpoint <p>GET /admin/api/banners</p> Expects <ul> <li>200 status code</li> <li>JSON response containing a messages array</li> <li>Valid structure that can be parsed by the admin UI</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_get():\n    \"\"\"Test the admin banners endpoint for retrieving banner messages.\n\n    This test verifies that the endpoint correctly returns banner messages\n    from the S3 bucket. It checks the structure of the response and ensures\n    the messages array is present.\n\n    Endpoint:\n        GET /admin/api/banners\n\n    Expects:\n        - 200 status code\n        - JSON response containing a messages array\n        - Valid structure that can be parsed by the admin UI\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert \"messages\" in data\n    assert isinstance(data[\"messages\"], list)\n</code></pre>"},{"location":"testing/backend/#banner-creation","title":"Banner Creation","text":"<p>Tests creating new banner messages:</p> <p>Test the admin banners update endpoint.</p> <p>This test verifies that the endpoint correctly processes banner updates with valid data and saves them to the S3 bucket.</p> Endpoint <p>POST /admin/api/banners/update</p> Test Data <ul> <li>Valid banner message</li> <li>Array of pages where the banner should appear</li> <li>Optional banner title and type</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming the banner was added</li> <li>Banner should be retrievable in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_update():\n    \"\"\"Test the admin banners update endpoint.\n\n    This test verifies that the endpoint correctly processes banner\n    updates with valid data and saves them to the S3 bucket.\n\n    Endpoint:\n        POST /admin/api/banners/update\n\n    Test Data:\n        - Valid banner message\n        - Array of pages where the banner should appear\n        - Optional banner title and type\n\n    Expects:\n        - 200 status code\n        - Success message confirming the banner was added\n        - Banner should be retrievable in subsequent GET requests\n    \"\"\"\n    test_data = {\n        \"banner\": {\n            \"message\": \"Test Banner Message\",\n            \"title\": \"Test Banner\",\n            \"type\": \"info\",\n            \"pages\": [\"radar\", \"statistics\"],\n            \"show\": True\n        }\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert \"message\" in data\n    assert data[\"message\"] == \"Banner added successfully\"\n\n    # Verify the banner was added\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    get_data = get_response.json()\n    assert \"messages\" in get_data\n\n    # Find the added banner by message - last message should be the one added\n\n    if get_data[\"messages\"]:\n        added_banner = get_data[\"messages\"][-1]\n    else:\n        assert False, \"No banners found after adding\"\n    assert added_banner is not None\n    assert added_banner[\"title\"] == \"Test Banner\"\n    assert added_banner[\"type\"] == \"info\"\n    assert \"radar\" in added_banner[\"pages\"]\n    assert \"statistics\" in added_banner[\"pages\"]\n    assert added_banner[\"show\"] is True\n</code></pre>"},{"location":"testing/backend/#banner-creation-validation","title":"Banner Creation Validation","text":"<p>Tests validation of banner creation requests:</p> <p>Test the admin banners update endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates banner data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/update</p> Test Data <ul> <li>Missing message field</li> <li>Empty pages array</li> <li>Malformed banner object</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid banner data</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_update_invalid():\n    \"\"\"Test the admin banners update endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates banner data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/update\n\n    Test Data:\n        - Missing message field\n        - Empty pages array\n        - Malformed banner object\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid banner data\n    \"\"\"\n    # Test with missing message\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"banner\": {\"pages\": [\"radar\"]}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n\n    # Test with empty pages array\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"banner\": {\"message\": \"Test\", \"pages\": []}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n\n    # Test with malformed request body\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"not_banner\": {}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n</code></pre>"},{"location":"testing/backend/#banner-visibility-toggle","title":"Banner Visibility Toggle","text":"<p>Tests toggling banner visibility:</p> <p>Test the admin banners toggle endpoint.</p> <p>This test verifies that the endpoint correctly toggles banner visibility by updating the 'show' property in the S3 bucket.</p> Endpoint <p>POST /admin/api/banners/toggle</p> Test Data <ul> <li>Valid index of an existing banner</li> <li>New visibility state</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming the visibility update</li> <li>Banner visibility should be updated in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_toggle():\n    \"\"\"Test the admin banners toggle endpoint.\n\n    This test verifies that the endpoint correctly toggles banner visibility\n    by updating the 'show' property in the S3 bucket.\n\n    Endpoint:\n        POST /admin/api/banners/toggle\n\n    Test Data:\n        - Valid index of an existing banner\n        - New visibility state\n\n    Expects:\n        - 200 status code\n        - Success message confirming the visibility update\n        - Banner visibility should be updated in subsequent GET requests\n    \"\"\"\n    # First, add a test banner\n    test_data = {\n        \"banner\": {\n            \"message\": \"Toggle Test Banner\",\n            \"pages\": [\"radar\"],\n            \"show\": True\n        }\n    }\n\n    # Add the banner\n    add_response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert add_response.status_code == 200\n\n\n    # Get all banners\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    banners = get_response.json()[\"messages\"]\n\n    # Find the index of our test banner\n    test_banner_index = next((i for i, banner in enumerate(banners)\n                             if banner[\"message\"] == \"Toggle Test Banner\"), None)\n    assert test_banner_index is not None, \"Test banner not found after adding\"\n\n    # Toggle the banner visibility\n    toggle_data = {\n        \"index\": test_banner_index,\n        \"show\": False\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json=toggle_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"message\"] == \"Banner visibility updated successfully\"\n\n    # Verify the banner was toggled\n    get_response_after_toggle = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response_after_toggle.status_code == 200\n    updated_banners = get_response_after_toggle.json()[\"messages\"]\n    assert updated_banners[test_banner_index][\"show\"] is False\n\n    # Clean up: delete the test banner\n    delete_data = {\"index\": test_banner_index}\n    delete_response = requests.post(f\"{BASE_URL}/admin/api/banners/delete\", json=delete_data, timeout=10)\n    assert delete_response.status_code == 200\n</code></pre>"},{"location":"testing/backend/#banner-visibility-toggle-validation","title":"Banner Visibility Toggle Validation","text":"<p>Tests validation of banner toggle requests:</p> <p>Test the admin banners toggle endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates toggle data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/toggle</p> Test Data <ul> <li>Invalid index (non-numeric)</li> <li>Out of range index</li> <li>Missing index</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid index</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_toggle_invalid():\n    \"\"\"Test the admin banners toggle endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates toggle data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/toggle\n\n    Test Data:\n        - Invalid index (non-numeric)\n        - Out of range index\n        - Missing index\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid index\n    \"\"\"\n    # Test with string index\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"index\": \"not-a-number\", \"show\": True},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    # Test with missing index\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"show\": True},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    num_banners = 0\n    if get_response.status_code == 200:\n        num_banners = len(get_response.json().get(\"messages\", []))\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"index\": num_banners + 100, \"show\": True}, # A sufficiently large index\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Banner index out of range\" in response.json()[\"error\"]\n</code></pre>"},{"location":"testing/backend/#banner-deletion","title":"Banner Deletion","text":"<p>Tests deleting banner messages:</p> <p>Test the admin banners delete endpoint.</p> <p>This test verifies that the endpoint correctly deletes banners from the S3 bucket based on their index.</p> Endpoint <p>POST /admin/api/banners/delete</p> Test Data <ul> <li>Valid index of an existing banner</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming deletion</li> <li>Banner should be removed in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_delete():\n    \"\"\"Test the admin banners delete endpoint.\n\n    This test verifies that the endpoint correctly deletes banners\n    from the S3 bucket based on their index.\n\n    Endpoint:\n        POST /admin/api/banners/delete\n\n    Test Data:\n        - Valid index of an existing banner\n\n    Expects:\n        - 200 status code\n        - Success message confirming deletion\n        - Banner should be removed in subsequent GET requests\n    \"\"\"\n    # First, add a test banner to delete\n    test_data = {\n        \"banner\": {\n            \"message\": \"Delete Test Banner\",\n            \"pages\": [\"radar\"]\n        }\n    }\n\n    # Add the banner\n    add_response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert add_response.status_code == 200\n\n\n    # Get all banners\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    banners = get_response.json()[\"messages\"]\n\n    # Find the index of our test banner\n    test_banner_index = next((i for i, banner in enumerate(banners)\n                             if banner[\"message\"] == \"Delete Test Banner\"), None)\n    assert test_banner_index is not None, \"Test banner for deletion not found after adding\"\n\n    # Delete the banner\n    delete_data = {\n        \"index\": test_banner_index\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json=delete_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"message\"] == \"Banner deleted successfully\"\n\n    # Verify the banner was deleted\n    get_response_after_delete = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response_after_delete.status_code == 200\n    updated_banners = get_response_after_delete.json()[\"messages\"]\n\n    # The banner should no longer exist\n    deleted_banner = next((banner for banner in updated_banners\n                          if banner[\"message\"] == \"Delete Test Banner\"), None)\n    assert deleted_banner is None\n</code></pre>"},{"location":"testing/backend/#banner-deletion-validation","title":"Banner Deletion Validation","text":"<p>Tests validation of banner deletion requests:</p> <p>Test the admin banners delete endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates delete data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/delete</p> Test Data <ul> <li>Invalid index (non-numeric)</li> <li>Out of range index</li> <li>Missing index</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid index</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_delete_invalid():\n    \"\"\"Test the admin banners delete endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates delete data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/delete\n\n    Test Data:\n        - Invalid index (non-numeric)\n        - Out of range index\n        - Missing index\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid index\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={\"index\": \"not-a-number\"},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    num_banners = 0\n    if get_response.status_code == 200:\n        num_banners = len(get_response.json().get(\"messages\", []))\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={\"index\": num_banners + 100},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Banner index out of range\" in response.json()[\"error\"]\n</code></pre>"},{"location":"testing/backend/#copilot-api-tests","title":"Copilot API Tests","text":"<p>These tests are located in <code>test_copilot.py</code> and verify the GitHub Copilot API endpoints.</p>"},{"location":"testing/backend/#authentication-tests","title":"Authentication Tests","text":"<p>Tests authentication handling for the API:</p> <p>Test the auth status endpoint with no token.</p> Expects <ul> <li>401 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_auth_status_no_token():\n    \"\"\"Test the auth status endpoint with no token.\n\n    Expects:\n        - 401 status code\n        - JSON response with error message\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/auth/status\", timeout=10)\n    assert response.status_code == 401\n    data = response.json()\n    assert \"error\" in data\n    assert \"Authentication required\" in data[\"error\"]\n</code></pre> <p>Test the auth status endpoint with a token.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set.</p> Expects <ul> <li>200 status code</li> <li>JSON response with authenticated=true</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_auth_status_with_token():\n    \"\"\"Test the auth status endpoint with a token.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n\n    Expects:\n        - 200 status code\n        - JSON response with authenticated=true\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    response = requests.get(f\"{BASE_URL}/api/auth/status\", cookies=AUTH_COOKIES, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"authenticated\"] is True\n</code></pre>"},{"location":"testing/backend/#live-organisation-data-retrieval","title":"Live Organisation Data Retrieval","text":"<p>Tests retrieving live Copilot organisation usage data:</p> <p>Test the copilot org live get endpoint.</p> <p>This test verifies that the endpoint correctly retrieves the organisation live data.</p> Endpoint <p>GET /api/org/live</p> Expects <ul> <li>200 status code</li> <li>JSON response with organisation live data</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_org_live_get():\n    \"\"\"Test the copilot org live get endpoint.\n\n    This test verifies that the endpoint correctly retrieves the\n    organisation live data.\n\n    Endpoint:\n        GET /api/org/live\n\n    Expects:\n        - 200 status code\n        - JSON response with organisation live data\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/org/live\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"date\" in first_item and isinstance(first_item[\"date\"], str)\n        assert \"total_active_users\" in first_item and isinstance(first_item[\"total_active_users\"], int)\n        assert \"total_engaged_users\" in first_item and isinstance(first_item[\"total_engaged_users\"], int)\n        assert \"copilot_ide_chat\" in first_item and isinstance(first_item[\"copilot_ide_chat\"], dict)\n        assert \"copilot_ide_code_completions\" in first_item and isinstance(first_item[\"copilot_ide_code_completions\"], dict)\n</code></pre> <p>This test verifies:</p> <ul> <li>Successful retrieval of organisation-wide Copilot usage metrics</li> <li>Response structure contains date, active users, engaged users and IDE metrics</li> <li>All data fields have correct types</li> </ul>"},{"location":"testing/backend/#live-team-data-retrieval","title":"Live Team Data Retrieval","text":"<p>Tests retrieving live Copilot team usage data:</p> <p>Test the copilot team live get endpoint without authentication.</p> Expects <ul> <li>401 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_live_get_no_auth():\n    \"\"\"Test the copilot team live get endpoint without authentication.\n\n    Expects:\n        - 401 status code\n        - JSON response with error message\n    \"\"\"\n    team_slug = TEST_TEAM\n    response = requests.get(f\"{BASE_URL}/api/team/live\", params={\"teamSlug\": team_slug}, timeout=10)\n    assert response.status_code == 401\n    data = response.json()\n    assert \"error\" in data\n    assert \"Authentication required\" in data[\"error\"]\n</code></pre> <p>Test the copilot team live get endpoint with an invalid token.</p> Expects <ul> <li>500 status code (GitHub API error)</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_live_get_invalid_token():\n    \"\"\"Test the copilot team live get endpoint with an invalid token.\n\n    Expects:\n        - 500 status code (GitHub API error)\n        - JSON response with error message\n    \"\"\"\n    team_slug = TEST_TEAM\n    invalid_cookies = {\"githubUserToken\": \"invalid_token\"}\n    response = requests.get(\n        f\"{BASE_URL}/api/team/live\",\n        params={\"teamSlug\": team_slug},\n        cookies=invalid_cookies,\n        timeout=10\n    )\n    assert response.status_code == 500\n    data = response.json()\n    assert \"error\" in data\n</code></pre> <p>Test the copilot team live get endpoint with authentication.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set. Note: This test will be marked as xfailed if the GitHub API returns a permission error, which is expected in some environments.</p> Expects <ul> <li>Either 200 status code with team live data</li> <li>Or 500 status code with \"Resource not accessible by integration\" error</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_live_get_with_auth():\n    \"\"\"Test the copilot team live get endpoint with authentication.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n    Note: This test will be marked as xfailed if the GitHub API returns a permission error,\n    which is expected in some environments.\n\n    Expects:\n        - Either 200 status code with team live data\n        - Or 500 status code with \"Resource not accessible by integration\" error\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    team_slug = TEST_TEAM\n    response = requests.get(\n        f\"{BASE_URL}/api/team/live\",\n        params={\"teamSlug\": team_slug},\n        cookies=AUTH_COOKIES,\n        timeout=10\n    )\n\n    # Check if this is a permission error (expected in some environments)\n    if response.status_code == 500:\n        data = response.json()\n        error_msg = data.get(\"error\", \"\")\n        if \"Resource not accessible by integration\" in error_msg:\n            pytest.xfail(\"GitHub API permission error: Resource not accessible by integration\")\n\n    # If we get here, we should have a successful response\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"date\" in first_item and isinstance(first_item[\"date\"], str)\n        assert \"total_active_users\" in first_item and isinstance(first_item[\"total_active_users\"], int)\n        assert \"total_engaged_users\" in first_item and isinstance(first_item[\"total_engaged_users\"], int)\n        assert \"copilot_ide_chat\" in first_item and isinstance(first_item[\"copilot_ide_chat\"], dict)\n        assert \"copilot_ide_code_completions\" in first_item and isinstance(first_item[\"copilot_ide_code_completions\"], dict)\n</code></pre> <p>Test the copilot team live get endpoint with an invalid team slug.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set.</p> Expects <ul> <li>500 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_live_get_invalid_slug():\n    \"\"\"Test the copilot team live get endpoint with an invalid team slug.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n\n    Expects:\n        - 500 status code\n        - JSON response with error message\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    invalid_slug = \"invalid-team-slug-123456\"\n    response = requests.get(\n        f\"{BASE_URL}/api/team/live\",\n        params={\"teamSlug\": invalid_slug},\n        cookies=AUTH_COOKIES,\n        timeout=10\n    )\n    assert response.status_code == 500\n    data = response.json()\n    assert \"error\" in data\n</code></pre> <p>Test the copilot team live get endpoint with a missing team slug.</p> Expects <ul> <li>400 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_live_get_missing_slug():\n    \"\"\"Test the copilot team live get endpoint with a missing team slug.\n\n    Expects:\n        - 400 status code\n        - JSON response with error message\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/team/live\", timeout=10)\n    assert response.status_code == 400\n    data = response.json()\n    assert \"error\" in data\n</code></pre> <p>These tests verify:</p> <ul> <li>Authentication is required for team data access</li> <li>Invalid tokens are handled appropriately</li> <li>Successful retrieval of team-specific usage metrics</li> <li>Error handling for invalid team slugs</li> <li>Validation of required parameters</li> </ul>"},{"location":"testing/backend/#historic-organisation-data-retrieval","title":"Historic Organisation Data Retrieval","text":"<p>Tests retrieving historic Copilot organisation usage data:</p> <p>Test the copilot org historic get endpoint.</p> <p>This test verifies that the endpoint correctly retrieves the organisation historic data.</p> Endpoint <p>GET /api/org/historic</p> Expects <ul> <li>200 status code</li> <li>JSON response with organisation historic data</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_org_historic_get():\n    \"\"\"Test the copilot org historic get endpoint.\n\n    This test verifies that the endpoint correctly retrieves the\n    organisation historic data.\n\n    Endpoint:\n        GET /api/org/historic\n\n    Expects:\n        - 200 status code\n        - JSON response with organisation historic data\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/org/historic\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"date\" in first_item and isinstance(first_item[\"date\"], str)\n        assert \"total_active_users\" in first_item and isinstance(first_item[\"total_active_users\"], int)\n        assert \"total_engaged_users\" in first_item and isinstance(first_item[\"total_engaged_users\"], int)\n        assert \"copilot_ide_chat\" in first_item and isinstance(first_item[\"copilot_ide_chat\"], dict)\n        assert \"copilot_ide_code_completions\" in first_item and isinstance(first_item[\"copilot_ide_code_completions\"], dict)\n</code></pre> <p>This test verifies:</p> <ul> <li>Successful retrieval of historical organisation-wide metrics</li> <li>Response structure matches live data format</li> <li>All data fields have correct types</li> </ul>"},{"location":"testing/backend/#organisation-seat-data-retrieval","title":"Organisation Seat Data Retrieval","text":"<p>Tests retrieving Copilot seat data for the organisation:</p> <p>Test the copilot seats get endpoint.</p> <p>This test verifies that the endpoint correctly retrieves the organisation seats data.</p> Endpoint <p>GET /copilot/api/seats</p> Expects <ul> <li>200 status code</li> <li>JSON response with organisation seats data</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_seats_get():\n    \"\"\"Test the copilot seats get endpoint.\n\n    This test verifies that the endpoint correctly retrieves the\n    organisation seats data.\n\n    Endpoint:\n        GET /copilot/api/seats\n\n    Expects:\n        - 200 status code\n        - JSON response with organisation seats data\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/seats\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"created_at\" in first_item and isinstance(first_item[\"created_at\"], str)\n        assert \"assignee\" in first_item and isinstance(first_item[\"assignee\"], dict)\n        assert \"last_activity_at\" in first_item and isinstance(first_item[\"last_activity_at\"], str)\n</code></pre> <p>This test verifies:</p> <ul> <li>Successful retrieval of organisation-wide seat allocation</li> <li>Response contains creation dates, assignees and activity timestamps</li> <li>All data fields have correct types</li> </ul>"},{"location":"testing/backend/#team-seat-data-retrieval","title":"Team Seat Data Retrieval","text":"<p>Tests retrieving Copilot seat data for teams:</p> <p>Test the copilot teams seats get endpoint without authentication.</p> Expects <ul> <li>401 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_seats_get_no_auth():\n    \"\"\"Test the copilot teams seats get endpoint without authentication.\n\n    Expects:\n        - 401 status code\n        - JSON response with error message\n    \"\"\"\n    team_slug = TEST_TEAM\n    response = requests.get(f\"{BASE_URL}/api/team/seats\", params={\"teamSlug\": team_slug}, timeout=10)\n    assert response.status_code == 401\n    data = response.json()\n    assert \"error\" in data\n    assert \"Authentication required\" in data[\"error\"]\n</code></pre> <p>Test the copilot teams seats get endpoint with authentication.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set.</p> Expects <ul> <li>200 status code</li> <li>JSON response with team seats data</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_seats_get_with_auth():\n    \"\"\"Test the copilot teams seats get endpoint with authentication.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n\n    Expects:\n        - 200 status code\n        - JSON response with team seats data\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    team_slug = TEST_TEAM\n    response = requests.get(\n        f\"{BASE_URL}/api/team/seats\",\n        params={\"teamSlug\": team_slug},\n        cookies=AUTH_COOKIES,\n        timeout=10\n    )\n\n    # Check for permission errors\n    if response.status_code == 500:\n        data = response.json()\n        error_msg = data.get(\"error\", \"\")\n        if \"Resource not accessible by integration\" in error_msg:\n            pytest.xfail(\"GitHub API permission error: Resource not accessible by integration\")\n\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"created_at\" in first_item and isinstance(first_item[\"created_at\"], str)\n        assert \"assignee\" in first_item and isinstance(first_item[\"assignee\"], dict)\n        assert \"last_activity_at\" in first_item and isinstance(first_item[\"last_activity_at\"], str)\n</code></pre> <p>Test the copilot teams seats get endpoint with an invalid team slug.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set.</p> Expects <ul> <li>500 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_seats_get_invalid_slug():\n    \"\"\"Test the copilot teams seats get endpoint with an invalid team slug.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n\n    Expects:\n        - 500 status code\n        - JSON response with error message\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    invalid_slug = \"invalid-team-slug-123456\"\n    response = requests.get(\n        f\"{BASE_URL}/api/team/seats\",\n        params={\"teamSlug\": invalid_slug},\n        cookies=AUTH_COOKIES,\n        timeout=10\n    )\n    assert response.status_code == 500\n    data = response.json()\n    assert \"error\" in data\n</code></pre> <p>Test the copilot teams seats get endpoint with a missing team slug.</p> Expects <ul> <li>400 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_team_seats_get_missing_slug():\n    \"\"\"Test the copilot teams seats get endpoint with a missing team slug.\n\n    Expects:\n        - 400 status code\n        - JSON response with error message\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/team/seats\", timeout=10)\n    assert response.status_code == 400\n    data = response.json()\n    assert \"error\" in data\n</code></pre> <p>These tests verify:</p> <ul> <li>Authentication is required for team seat data access</li> <li>Successful retrieval of team-specific seat allocation</li> <li>Error handling for invalid team slugs</li> <li>Validation of required parameters</li> </ul>"},{"location":"testing/backend/#team-listing","title":"Team Listing","text":"<p>Tests retrieving available teams:</p> <p>Test the teams get endpoint without authentication.</p> Expects <ul> <li>401 status code</li> <li>JSON response with error message</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_teams_get_no_auth():\n    \"\"\"Test the teams get endpoint without authentication.\n\n    Expects:\n        - 401 status code\n        - JSON response with error message\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/teams\", timeout=10)\n    assert response.status_code == 401\n    data = response.json()\n    assert \"error\" in data\n    assert \"Missing GitHub user token\" in data[\"error\"]\n</code></pre> <p>Test the teams get endpoint with authentication.</p> <p>This test requires TEST_GITHUBUSERTOKEN to be set.</p> Expects <ul> <li>200 status code</li> <li>JSON response with teams data</li> </ul> Source code in <code>testing/backend/src/test_copilot.py</code> <pre><code>def test_teams_get_with_auth():\n    \"\"\"Test the teams get endpoint with authentication.\n\n    This test requires TEST_GITHUBUSERTOKEN to be set.\n\n    Expects:\n        - 200 status code\n        - JSON response with teams data\n    \"\"\"\n    if not GITHUB_TOKEN:\n        pytest.skip(\"TEST_GITHUBUSERTOKEN not set\")\n\n    response = requests.get(f\"{BASE_URL}/api/teams\", cookies=AUTH_COOKIES, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert isinstance(data, list)\n\n    if data:\n        first_item = data[0]\n        assert \"slug\" in first_item and isinstance(first_item[\"slug\"], str)\n        assert \"name\" in first_item and isinstance(first_item[\"name\"], str)\n        assert \"url\" in first_item and isinstance(first_item[\"url\"], str)\n</code></pre> <p>These tests verify:</p> <ul> <li>Authentication is required for team listing</li> <li>Successful retrieval of available teams</li> <li>Response contains team slugs, names and URLs</li> </ul>"},{"location":"testing/backend/#banner-endpoints","title":"Banner Endpoints","text":"<p>Tests the banner message endpoints for retrieving active and all banners:</p> <p>Test the banner message endpoints.</p> <p>This test verifies that both banner endpoints (/api/banners and /api/banners/all) return the expected response structure and properly filter active banners.</p> Tests <ul> <li>/api/banners endpoint returns active banners only</li> <li>/api/banners/all endpoint returns all banners</li> <li>Both endpoints handle missing messages.json gracefully</li> <li>Response structure is consistent and valid</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_banner_endpoints():\n    \"\"\"Test the banner message endpoints.\n\n    This test verifies that both banner endpoints (/api/banners and /api/banners/all)\n    return the expected response structure and properly filter active banners.\n\n    Tests:\n        - /api/banners endpoint returns active banners only\n        - /api/banners/all endpoint returns all banners\n        - Both endpoints handle missing messages.json gracefully\n        - Response structure is consistent and valid\n    \"\"\"\n    # Test /api/banners endpoint\n    response = requests.get(f\"{BASE_URL}/api/banners\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"messages\" in data\n    assert isinstance(data[\"messages\"], list)\n\n    # Verify active banners only\n    for banner in data[\"messages\"]:\n        assert banner.get(\"show\", True) is True\n\n    # Test /api/banners/all endpoint\n    response = requests.get(f\"{BASE_URL}/api/banners/all\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"messages\" in data\n    assert isinstance(data[\"messages\"], list)\n\n    # Test error case with non-existent endpoint\n    response = requests.get(f\"{BASE_URL}/api/banners/nonexistent\", timeout=10)\n    assert response.status_code in [404, 500]\n</code></pre> <p>The banner endpoint tests verify:</p> <ul> <li>Active banners are correctly filtered in the /api/banners endpoint</li> <li>All banners (active and inactive) are returned by /api/banners/all</li> <li>Missing messages.json is handled gracefully</li> <li>Response structure is consistent and valid</li> <li>Error cases are properly handled with appropriate status codes</li> </ul>"},{"location":"testing/backend/#admin-api-tests_1","title":"Admin API Tests","text":"<p>These tests are located in <code>test_admin.py</code> and verify the administration API endpoints that manage platform configuration, banners, and technology reference lists.</p>"},{"location":"testing/backend/#banner-management-tests","title":"Banner Management Tests","text":""},{"location":"testing/backend/#banner-retrieval_1","title":"Banner Retrieval","text":"<p>Tests retrieving all banner messages from the admin endpoint:</p> <p>Test the admin banners endpoint for retrieving banner messages.</p> <p>This test verifies that the endpoint correctly returns banner messages from the S3 bucket. It checks the structure of the response and ensures the messages array is present.</p> Endpoint <p>GET /admin/api/banners</p> Expects <ul> <li>200 status code</li> <li>JSON response containing a messages array</li> <li>Valid structure that can be parsed by the admin UI</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_get():\n    \"\"\"Test the admin banners endpoint for retrieving banner messages.\n\n    This test verifies that the endpoint correctly returns banner messages\n    from the S3 bucket. It checks the structure of the response and ensures\n    the messages array is present.\n\n    Endpoint:\n        GET /admin/api/banners\n\n    Expects:\n        - 200 status code\n        - JSON response containing a messages array\n        - Valid structure that can be parsed by the admin UI\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the response structure\n    assert \"messages\" in data\n    assert isinstance(data[\"messages\"], list)\n</code></pre> <p>This test validates that:</p> <ul> <li>The endpoint correctly returns banner messages from the S3 bucket</li> <li>The response has a valid structure with a \"messages\" array</li> <li>The response can be successfully parsed by the admin UI</li> </ul>"},{"location":"testing/backend/#banner-creation_1","title":"Banner Creation","text":"<p>Tests creating a new banner with complete and valid data:</p> <p>Test the admin banners update endpoint.</p> <p>This test verifies that the endpoint correctly processes banner updates with valid data and saves them to the S3 bucket.</p> Endpoint <p>POST /admin/api/banners/update</p> Test Data <ul> <li>Valid banner message</li> <li>Array of pages where the banner should appear</li> <li>Optional banner title and type</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming the banner was added</li> <li>Banner should be retrievable in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_update():\n    \"\"\"Test the admin banners update endpoint.\n\n    This test verifies that the endpoint correctly processes banner\n    updates with valid data and saves them to the S3 bucket.\n\n    Endpoint:\n        POST /admin/api/banners/update\n\n    Test Data:\n        - Valid banner message\n        - Array of pages where the banner should appear\n        - Optional banner title and type\n\n    Expects:\n        - 200 status code\n        - Success message confirming the banner was added\n        - Banner should be retrievable in subsequent GET requests\n    \"\"\"\n    test_data = {\n        \"banner\": {\n            \"message\": \"Test Banner Message\",\n            \"title\": \"Test Banner\",\n            \"type\": \"info\",\n            \"pages\": [\"radar\", \"statistics\"],\n            \"show\": True\n        }\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert \"message\" in data\n    assert data[\"message\"] == \"Banner added successfully\"\n\n    # Verify the banner was added\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    get_data = get_response.json()\n    assert \"messages\" in get_data\n\n    # Find the added banner by message - last message should be the one added\n\n    if get_data[\"messages\"]:\n        added_banner = get_data[\"messages\"][-1]\n    else:\n        assert False, \"No banners found after adding\"\n    assert added_banner is not None\n    assert added_banner[\"title\"] == \"Test Banner\"\n    assert added_banner[\"type\"] == \"info\"\n    assert \"radar\" in added_banner[\"pages\"]\n    assert \"statistics\" in added_banner[\"pages\"]\n    assert added_banner[\"show\"] is True\n</code></pre> <p>This test verifies:</p> <ul> <li>Creating a banner with title, message, type, and target pages</li> <li>The appropriate success response is returned</li> <li>The newly created banner can be retrieved in a subsequent GET request</li> </ul>"},{"location":"testing/backend/#banner-creation-validation_1","title":"Banner Creation Validation","text":"<p>Tests validation of banner creation requests with invalid data:</p> <p>Test the admin banners update endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates banner data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/update</p> Test Data <ul> <li>Missing message field</li> <li>Empty pages array</li> <li>Malformed banner object</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid banner data</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_update_invalid():\n    \"\"\"Test the admin banners update endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates banner data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/update\n\n    Test Data:\n        - Missing message field\n        - Empty pages array\n        - Malformed banner object\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid banner data\n    \"\"\"\n    # Test with missing message\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"banner\": {\"pages\": [\"radar\"]}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n\n    # Test with empty pages array\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"banner\": {\"message\": \"Test\", \"pages\": []}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n\n    # Test with malformed request body\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json={\"not_banner\": {}},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid banner data\"\n</code></pre> <p>This test checks error handling for:</p> <ul> <li>Missing required message field</li> <li>Empty target pages array</li> <li>Malformed banner structure in the request</li> </ul>"},{"location":"testing/backend/#banner-visibility-toggle_1","title":"Banner Visibility Toggle","text":"<p>Tests toggling the visibility status of an existing banner:</p> <p>Test the admin banners toggle endpoint.</p> <p>This test verifies that the endpoint correctly toggles banner visibility by updating the 'show' property in the S3 bucket.</p> Endpoint <p>POST /admin/api/banners/toggle</p> Test Data <ul> <li>Valid index of an existing banner</li> <li>New visibility state</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming the visibility update</li> <li>Banner visibility should be updated in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_toggle():\n    \"\"\"Test the admin banners toggle endpoint.\n\n    This test verifies that the endpoint correctly toggles banner visibility\n    by updating the 'show' property in the S3 bucket.\n\n    Endpoint:\n        POST /admin/api/banners/toggle\n\n    Test Data:\n        - Valid index of an existing banner\n        - New visibility state\n\n    Expects:\n        - 200 status code\n        - Success message confirming the visibility update\n        - Banner visibility should be updated in subsequent GET requests\n    \"\"\"\n    # First, add a test banner\n    test_data = {\n        \"banner\": {\n            \"message\": \"Toggle Test Banner\",\n            \"pages\": [\"radar\"],\n            \"show\": True\n        }\n    }\n\n    # Add the banner\n    add_response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert add_response.status_code == 200\n\n\n    # Get all banners\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    banners = get_response.json()[\"messages\"]\n\n    # Find the index of our test banner\n    test_banner_index = next((i for i, banner in enumerate(banners)\n                             if banner[\"message\"] == \"Toggle Test Banner\"), None)\n    assert test_banner_index is not None, \"Test banner not found after adding\"\n\n    # Toggle the banner visibility\n    toggle_data = {\n        \"index\": test_banner_index,\n        \"show\": False\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json=toggle_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"message\"] == \"Banner visibility updated successfully\"\n\n    # Verify the banner was toggled\n    get_response_after_toggle = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response_after_toggle.status_code == 200\n    updated_banners = get_response_after_toggle.json()[\"messages\"]\n    assert updated_banners[test_banner_index][\"show\"] is False\n\n    # Clean up: delete the test banner\n    delete_data = {\"index\": test_banner_index}\n    delete_response = requests.post(f\"{BASE_URL}/admin/api/banners/delete\", json=delete_data, timeout=10)\n    assert delete_response.status_code == 200\n</code></pre> <p>This test ensures:</p> <ul> <li>A test banner can be created for toggling</li> <li>The visibility can be toggled from true to false</li> <li>The updated banner visibility is correctly stored</li> <li>The system returns appropriate success messages</li> </ul>"},{"location":"testing/backend/#banner-visibility-toggle-validation_1","title":"Banner Visibility Toggle Validation","text":"<p>Tests validation of banner visibility toggle requests with invalid data:</p> <p>Test the admin banners toggle endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates toggle data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/toggle</p> Test Data <ul> <li>Invalid index (non-numeric)</li> <li>Out of range index</li> <li>Missing index</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid index</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_toggle_invalid():\n    \"\"\"Test the admin banners toggle endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates toggle data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/toggle\n\n    Test Data:\n        - Invalid index (non-numeric)\n        - Out of range index\n        - Missing index\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid index\n    \"\"\"\n    # Test with string index\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"index\": \"not-a-number\", \"show\": True},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    # Test with missing index\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"show\": True},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    num_banners = 0\n    if get_response.status_code == 200:\n        num_banners = len(get_response.json().get(\"messages\", []))\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/toggle\",\n        json={\"index\": num_banners + 100, \"show\": True}, # A sufficiently large index\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Banner index out of range\" in response.json()[\"error\"]\n</code></pre> <p>This test validates error handling for:</p> <ul> <li>Non-numeric index values</li> <li>Missing index parameter</li> <li>Out-of-range index values</li> </ul>"},{"location":"testing/backend/#banner-deletion_1","title":"Banner Deletion","text":"<p>Tests deleting an existing banner:</p> <p>Test the admin banners delete endpoint.</p> <p>This test verifies that the endpoint correctly deletes banners from the S3 bucket based on their index.</p> Endpoint <p>POST /admin/api/banners/delete</p> Test Data <ul> <li>Valid index of an existing banner</li> </ul> Expects <ul> <li>200 status code</li> <li>Success message confirming deletion</li> <li>Banner should be removed in subsequent GET requests</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_delete():\n    \"\"\"Test the admin banners delete endpoint.\n\n    This test verifies that the endpoint correctly deletes banners\n    from the S3 bucket based on their index.\n\n    Endpoint:\n        POST /admin/api/banners/delete\n\n    Test Data:\n        - Valid index of an existing banner\n\n    Expects:\n        - 200 status code\n        - Success message confirming deletion\n        - Banner should be removed in subsequent GET requests\n    \"\"\"\n    # First, add a test banner to delete\n    test_data = {\n        \"banner\": {\n            \"message\": \"Delete Test Banner\",\n            \"pages\": [\"radar\"]\n        }\n    }\n\n    # Add the banner\n    add_response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert add_response.status_code == 200\n\n\n    # Get all banners\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response.status_code == 200\n    banners = get_response.json()[\"messages\"]\n\n    # Find the index of our test banner\n    test_banner_index = next((i for i, banner in enumerate(banners)\n                             if banner[\"message\"] == \"Delete Test Banner\"), None)\n    assert test_banner_index is not None, \"Test banner for deletion not found after adding\"\n\n    # Delete the banner\n    delete_data = {\n        \"index\": test_banner_index\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json=delete_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"message\"] == \"Banner deleted successfully\"\n\n    # Verify the banner was deleted\n    get_response_after_delete = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    assert get_response_after_delete.status_code == 200\n    updated_banners = get_response_after_delete.json()[\"messages\"]\n\n    # The banner should no longer exist\n    deleted_banner = next((banner for banner in updated_banners\n                          if banner[\"message\"] == \"Delete Test Banner\"), None)\n    assert deleted_banner is None\n</code></pre> <p>This test verifies:</p> <ul> <li>A test banner can be created for deletion</li> <li>The banner can be successfully deleted</li> <li>The deleted banner is no longer returned in subsequent GET requests</li> </ul>"},{"location":"testing/backend/#banner-deletion-validation_1","title":"Banner Deletion Validation","text":"<p>Tests validation of banner deletion requests with invalid parameters:</p> <p>Test the admin banners delete endpoint with invalid data.</p> <p>This test verifies that the endpoint correctly validates delete data and returns appropriate error responses for invalid inputs.</p> Endpoint <p>POST /admin/api/banners/delete</p> Test Data <ul> <li>Invalid index (non-numeric)</li> <li>Out of range index</li> <li>Missing index</li> </ul> Expects <ul> <li>400 status code</li> <li>Error message indicating invalid index</li> </ul> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_banner_delete_invalid():\n    \"\"\"Test the admin banners delete endpoint with invalid data.\n\n    This test verifies that the endpoint correctly validates delete data\n    and returns appropriate error responses for invalid inputs.\n\n    Endpoint:\n        POST /admin/api/banners/delete\n\n    Test Data:\n        - Invalid index (non-numeric)\n        - Out of range index\n        - Missing index\n\n    Expects:\n        - 400 status code\n        - Error message indicating invalid index\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={\"index\": \"not-a-number\"},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Invalid banner index\" in response.json()[\"error\"]\n\n    get_response = requests.get(f\"{BASE_URL}/admin/api/banners\", timeout=10)\n    num_banners = 0\n    if get_response.status_code == 200:\n        num_banners = len(get_response.json().get(\"messages\", []))\n\n    response = requests.post(\n        f\"{BASE_URL}/admin/api/banners/delete\",\n        json={\"index\": num_banners + 100},\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert \"Banner index out of range\" in response.json()[\"error\"]\n</code></pre> <p>This test checks error handling for:</p> <ul> <li>Non-numeric index values</li> <li>Missing index parameter</li> <li>Out-of-range index values</li> </ul>"},{"location":"testing/backend/#technology-management-tests","title":"Technology Management Tests","text":""},{"location":"testing/backend/#array-data-retrieval","title":"Array Data Retrieval","text":"<p>Tests retrieval of the technology reference lists:</p> <p>Test fetching array data.</p> <p>Endpoint: GET /admin/api/array-data Expects:     - 200 status code     - JSON response (dictionary)</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_get_array_data():\n    \"\"\"Test fetching array data.\n\n    Endpoint: GET /admin/api/array-data\n    Expects:\n        - 200 status code\n        - JSON response (dictionary)\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/admin/api/array-data\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n</code></pre> <p>This test verifies:</p> <ul> <li>The endpoint returns JSON data with technology references</li> <li>The response has a valid structure as a dictionary</li> </ul>"},{"location":"testing/backend/#single-category-update","title":"Single Category Update","text":"<p>Tests updating a single category in the technology reference lists:</p> <p>Test updating a single category in array data.</p> <p>Endpoint: POST /admin/api/array-data/update Expects:     - 200 status code     - Success message     - Data correctly updated and other categories preserved</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_update_array_data_single_category():\n    \"\"\"Test updating a single category in array data.\n\n    Endpoint: POST /admin/api/array-data/update\n    Expects:\n        - 200 status code\n        - Success message\n        - Data correctly updated and other categories preserved\n    \"\"\"\n    original_data = _get_initial_array_data(BASE_URL)\n\n    try:\n        category_to_update = \"languages\"\n        new_items = [\"item1\", \"item2_updated\"]\n\n        payload = {\n            \"allCategories\": False,\n            \"category\": category_to_update,\n            \"items\": new_items\n        }\n        response = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload, timeout=10)\n        assert response.status_code == 200\n        assert response.json()[\"message\"] == f\"Technology list for {category_to_update} updated successfully\"\n\n        updated_data = _get_initial_array_data(BASE_URL)\n        assert updated_data[category_to_update] == new_items\n\n        # Verify other categories are unchanged\n        for key, value in original_data.items():\n            if key != category_to_update:\n                assert updated_data.get(key) == value\n            elif category_to_update not in original_data: # if it was a new category\n                pass # no need to check original value\n\n    finally:\n        _restore_array_data(BASE_URL, original_data)\n</code></pre> <p>This test ensures:</p> <ul> <li>A single category can be updated without affecting others</li> <li>The response includes a specific success message for single category update</li> <li>The updated data can be retrieved in a subsequent GET request</li> </ul>"},{"location":"testing/backend/#multiple-category-update","title":"Multiple Category Update","text":"<p>Tests updating all categories in the technology reference lists simultaneously:</p> <p>Test updating all categories in array data.</p> <p>Endpoint: POST /admin/api/array-data/update Expects:     - 200 status code     - Success message     - Data completely replaced with new data</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_update_array_data_all_categories():\n    \"\"\"Test updating all categories in array data.\n\n    Endpoint: POST /admin/api/array-data/update\n    Expects:\n        - 200 status code\n        - Success message\n        - Data completely replaced with new data\n    \"\"\"\n    original_data = _get_initial_array_data(BASE_URL)\n\n    try:\n        new_full_data = {\n            \"languages_updated\": [\"Go\", \"Rust\"],\n            \"frameworks_updated\": [\"Svelte\", \"Vue\"]\n        }\n        payload = {\n            \"allCategories\": True,\n            \"items\": new_full_data\n        }\n        response = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload, timeout=10)\n        assert response.status_code == 200\n        assert response.json()[\"message\"] == \"All technology lists updated successfully\"\n\n        updated_data = _get_initial_array_data(BASE_URL)\n        assert updated_data == new_full_data\n    finally:\n        _restore_array_data(BASE_URL, original_data)\n</code></pre> <p>This test validates:</p> <ul> <li>The entire technology reference data structure can be replaced</li> <li>The response includes a specific success message for all categories update</li> <li>The updated data structure can be retrieved in a subsequent GET request</li> </ul>"},{"location":"testing/backend/#array-data-update-validation","title":"Array Data Update Validation","text":"<p>Tests validation of technology reference list updates with invalid data:</p> <p>Test updating array data with invalid payloads.</p> <p>Endpoint: POST /admin/api/array-data/update Expects:     - 400 status code     - Specific error messages for different invalid inputs</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_update_array_data_invalid():\n    \"\"\"Test updating array data with invalid payloads.\n\n    Endpoint: POST /admin/api/array-data/update\n    Expects:\n        - 400 status code\n        - Specific error messages for different invalid inputs\n    \"\"\"\n    # Test allCategories: true, but items is not an object\n    payload1 = {\"allCategories\": True, \"items\": \"not_an_object\"}\n    response1 = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload1, timeout=10)\n    assert response1.status_code == 400\n    assert response1.json()[\"error\"] == \"Invalid data format. Complete items object is required for all categories update.\"\n\n    # Test allCategories: false, but category is missing\n    payload2 = {\"allCategories\": False, \"items\": [\"item\"]}\n    response2 = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload2, timeout=10)\n    assert response2.status_code == 400\n    assert response2.json()[\"error\"] == \"Invalid data format. Category and items array are required for single category update.\"\n\n    # Test allCategories: false, but items is missing\n    payload3 = {\"allCategories\": False, \"category\": \"some_category\"}\n    response3 = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload3, timeout=10)\n    assert response3.status_code == 400\n    assert response3.json()[\"error\"] == \"Invalid data format. Category and items array are required for single category update.\"\n\n    # Test allCategories: false, but items is not an array\n    payload4 = {\"allCategories\": False, \"category\": \"some_category\", \"items\": \"not_an_array\"}\n    response4 = requests.post(f\"{BASE_URL}/admin/api/array-data/update\", json=payload4, timeout=10)\n    assert response4.status_code == 400\n    assert response4.json()[\"error\"] == \"Invalid data format. Category and items array are required for single category update.\"\n</code></pre> <p>This test checks error handling for:</p> <ul> <li>Updating all categories with non-object data</li> <li>Single category update without specifying a category</li> <li>Single category update with missing items array</li> <li>Single category update with non-array items</li> </ul>"},{"location":"testing/backend/#tech-radar-data-retrieval","title":"Tech Radar Data Retrieval","text":"<p>Tests fetching the Tech Radar data for administrative purposes:</p> <p>Test fetching tech radar data.</p> <p>Endpoint: GET /admin/api/tech-radar Expects:     - 200 status code     - JSON response (dictionary)</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_get_tech_radar():\n    \"\"\"Test fetching tech radar data.\n\n    Endpoint: GET /admin/api/tech-radar\n    Expects:\n        - 200 status code\n        - JSON response (dictionary)\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/admin/api/tech-radar\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n</code></pre> <p>This test verifies that the admin endpoint correctly returns the radar configuration data.</p>"},{"location":"testing/backend/#technology-normalisation","title":"Technology Normalisation","text":"<p>Tests normalising technology names across projects:</p> <p>Test normalising technology names.</p> <p>Endpoint: POST /admin/api/normalise-technology Expects:     - 200 status code     - Success message     - updatedProjects count in response Note: This test assumes new_project_data.json exists and can be processed.       It doesn't verify the actual content change in S3 due to test limitations,       but checks the API response.</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_normalise_technology_positive():\n    \"\"\"Test normalising technology names.\n\n    Endpoint: POST /admin/api/normalise-technology\n    Expects:\n        - 200 status code\n        - Success message\n        - updatedProjects count in response\n    Note: This test assumes new_project_data.json exists and can be processed.\n          It doesn't verify the actual content change in S3 due to test limitations,\n          but checks the API response.\n    \"\"\"\n    # The API should succeed even if 'from_tech' is not found (updatedProjects will be 0).\n    payload = {\"from\": \"NonExistentTech123\", \"to\": \"SomeNewTechABC\"}\n    response = requests.post(f\"{BASE_URL}/admin/api/normalise-technology\", json=payload, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"message\"] == \"Technology names normalised successfully\"\n    assert \"updatedProjects\" in data\n    assert isinstance(data[\"updatedProjects\"], int)\n</code></pre> <p>This test ensures:</p> <ul> <li>Technology names can be normalised from one form to another</li> <li>The response includes a count of updated projects</li> <li>The system handles normalisation of non-existent technologies gracefully</li> </ul>"},{"location":"testing/backend/#technology-normalisation-validation","title":"Technology Normalisation Validation","text":"<p>Tests validation of technology normalisation requests with invalid data:</p> <p>Test normalising technology names with invalid data.</p> <p>Endpoint: POST /admin/api/normalise-technology Expects:     - 400 status code     - Specific error message for missing 'from' or 'to'</p> Source code in <code>testing/backend/src/test_admin.py</code> <pre><code>def test_admin_normalise_technology_invalid():\n    \"\"\"Test normalising technology names with invalid data.\n\n    Endpoint: POST /admin/api/normalise-technology\n    Expects:\n        - 400 status code\n        - Specific error message for missing 'from' or 'to'\n    \"\"\"\n    # 'from' missing\n    payload1 = {\"to\": \"NewTech\"}\n    response1 = requests.post(f\"{BASE_URL}/admin/api/normalise-technology\", json=payload1, timeout=10)\n    assert response1.status_code == 400\n    assert response1.json()[\"error\"] == \"Both 'from' and 'to' values are required\"\n\n    # 'to' missing\n    payload2 = {\"from\": \"OldTech\"}\n    response2 = requests.post(f\"{BASE_URL}/admin/api/normalise-technology\", json=payload2, timeout=10)\n    assert response2.status_code == 400\n    assert response2.json()[\"error\"] == \"Both 'from' and 'to' values are required\"\n\n    # Both missing\n    payload3 = {}\n    response3 = requests.post(f\"{BASE_URL}/admin/api/normalise-technology\", json=payload3, timeout=10)\n    assert response3.status_code == 400\n    assert response3.json()[\"error\"] == \"Both 'from' and 'to' values are required\"\n</code></pre> <p>This test checks error handling for:</p> <ul> <li>Missing \"from\" parameter</li> <li>Missing \"to\" parameter</li> <li>Missing both parameters</li> </ul>"},{"location":"testing/backend/#error-handling-tests","title":"Error Handling Tests","text":""},{"location":"testing/backend/#invalid-endpoints","title":"Invalid Endpoints","text":"<p>Tests the server's response to non-existent endpoints:</p> <p>Test error handling for invalid endpoints.</p> <p>This test verifies that the server properly handles requests to non-existent endpoints by returning appropriate error status codes.</p> Example <p>GET /api/nonexistent</p> Expects <ul> <li>Either 404 (Not Found) or 500 (Internal Server Error) status code</li> <li>Proper error handling for invalid routes</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_invalid_endpoint():\n    \"\"\"Test error handling for invalid endpoints.\n\n    This test verifies that the server properly handles requests to\n    non-existent endpoints by returning appropriate error status codes.\n\n    Example:\n        GET /api/nonexistent\n\n    Expects:\n        - Either 404 (Not Found) or 500 (Internal Server Error) status code\n        - Proper error handling for invalid routes\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/nonexistent\", timeout=10)\n    assert response.status_code in [404, 500]  # Either is acceptable\n</code></pre>"},{"location":"testing/backend/#invalid-parameters","title":"Invalid Parameters","text":"<p>Tests the server's handling of invalid parameter values:</p> <p>Test the JSON endpoint's handling of invalid date parameters.</p> <p>This test verifies that the endpoint gracefully handles invalid datetime parameters without failing. It should ignore the invalid date and return unfiltered results.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>An invalid datetime string</p> required Example <p>GET /api/json?datetime=invalid-date</p> Expects <ul> <li>200 status code (graceful handling)</li> <li>Null filter_date in metadata</li> <li>Valid response with unfiltered stats</li> <li>Complete language statistics</li> </ul> Source code in <code>testing/backend/src/test_main.py</code> <pre><code>def test_json_endpoint_invalid_date():\n    \"\"\"Test the JSON endpoint's handling of invalid date parameters.\n\n    This test verifies that the endpoint gracefully handles invalid datetime\n    parameters without failing. It should ignore the invalid date and return\n    unfiltered results.\n\n    Parameters:\n        datetime (str): An invalid datetime string\n\n    Example:\n        GET /api/json?datetime=invalid-date\n\n    Expects:\n        - 200 status code (graceful handling)\n        - Null filter_date in metadata\n        - Valid response with unfiltered stats\n        - Complete language statistics\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\",\n                            params={\"datetime\": \"invalid-date\"}, timeout=10)\n    assert response.status_code == 200  # Backend handles invalid dates gracefully\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] is None\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n</code></pre>"},{"location":"testing/backend/#test-execution-flow","title":"Test Execution Flow","text":"<p>The backend tests follow this general execution flow:</p> <ol> <li>Setup: Configure the test environment and parameters</li> <li>Request: Make an HTTP request to the target endpoint</li> <li>Validation: Assert that the response status code is as expected</li> <li>Data Verification: Assert that the response data structure is correct</li> <li>Content Verification: Assert that the response data contains the expected values</li> </ol>"},{"location":"testing/backend/#integration-with-frontend-utilities","title":"Integration with Frontend Utilities","text":"<p>These backend tests validate the same endpoints that are used by the frontend utilities:</p> <ol> <li>Project Data Utility: The <code>test_csv_endpoint()</code> test validates the endpoint used by <code>fetchCSVFromS3()</code></li> <li>Repository Data Utility: The repository project tests validate the endpoint used by <code>fetchRepositoryData()</code></li> <li>Tech Radar Data Utility: The <code>test_tech_radar_json_endpoint()</code> test validates the endpoint used by <code>fetchTechRadarJSONFromS3()</code></li> <li>Admin Utilities: The admin API tests validate the endpoints used by the admin interface for banner management and technology reference list management</li> </ol>"},{"location":"testing/frontend/","title":"Frontend Testing","text":""},{"location":"testing/frontend/#overview","title":"Overview","text":"<p>The frontend testing is run using Playwright. Playwright is an end-to-end test framework. All API endpoints that serve data to the Digital Landscape application are being fulfilled using a function, route.fulfill.</p>"},{"location":"testing/frontend/#test-implementation","title":"Test Implementation","text":"<p>The tests are implemented in the <code>testing/frontend/tests</code> directory using the Playwright framework. The tests are organised into two main files:</p> <ul> <li><code>search.test.js</code> - Test for search teams functionality</li> <li><code>techradar.test.js</code> - Tests for Tech Radar. Currently tests Infrastructure (GCP &amp; AWS nodes) and Languages (JavaScript/Typescript and Java nodes) sections of the radar.</li> </ul>"},{"location":"testing/frontend/#running-tests","title":"Running Tests","text":"<pre><code># Navigate to the testing directory\ncd testing/frontend\n\n# Install dependencies\nmake setup\n\n# Run tests\nmake test-ui\n</code></pre>"},{"location":"testing/frontend/#test-data","title":"Test Data","text":"<p>The data necessary to mock the API is held under the <code>data</code> folder withing <code>testing/frontend/tests/</code> folder in JS files containing the data in JSON format. If new tests are added it is advisable to add the required test data within the folder in the appropriate format.</p>"},{"location":"utilities/customFetch/","title":"Custom Fetch Utility","text":"<p>The <code>customFetch</code> utility provides a wrapper around the native <code>fetch</code> API, adding enhanced error handling and toast notifications for a consistent user experience across the application.</p>"},{"location":"utilities/customFetch/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/customFetch/#customfetch","title":"customFetch","text":"<pre><code>const customFetch = async (url, options) =&gt; {\n  // Implementation details\n};\n</code></pre> <p>This function:</p> <ol> <li>Constructs the full API endpoint URL, prepending a backend URL if available.</li> <li>Executes the <code>fetch</code> request with the given URL and options.</li> <li>Checks for <code>response.ok</code> to determine if the request was successful.</li> <li>If the response is not OK, it attempts to parse error data from the response.</li> <li>Displays a custom <code>ErrorToast</code> notification with a descriptive error message.</li> <li>Re-throws the error to allow calling functions to handle it further if necessary.</li> </ol>"},{"location":"utilities/customFetch/#implementation-details","title":"Implementation Details","text":"<p>The <code>customFetch</code> function ensures that all API calls made through it benefit from centralised error management and user feedback:</p> <pre><code>import toast from 'react-hot-toast';\nimport ErrorToast from '../components/Toast/ErrorToast';\n\nconst customFetch = async (url, options) =&gt; {\n  const backendUrl = import.meta.env.VITE_BACKEND_URL || '';\n  const response = await fetch(backendUrl + url, options);\n\n  if (!response.ok) {\n    let errorData = { error: `HTTP error! status: ${response.status}` };\n    try {\n      errorData = await response;\n    } catch (_) {\n      // ignore parse errors, default error message will be used\n    }\n\n    const errorMessage = errorData.error || `Request failed with status ${response.status}`;\n\n    toast.custom((t) =&gt; &lt;ErrorToast t={t} error={errorMessage} /&gt;, {\n      duration: 10000,\n    });\n\n    // Re-throw the error to be caught by the calling function if needed\n    throw new Error(errorMessage);\n  }\n\n  return response;\n};\n\nexport default customFetch;\n</code></pre>"},{"location":"utilities/customFetch/#example-usage-in-getuserjs","title":"Example Usage in <code>getUser.js</code>","text":"<p>The <code>customFetch</code> utility is used throughout the application for making API requests. Below is an example from <code>frontend/src/utilities/getUser.js</code>, demonstrating its use for handling user logout:</p> <pre><code>// ... existing code ...\n    try {\n      const response = await customFetch('/user/api/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ logout_uri: window.location.origin }),\n      });\n// ... existing code ...\n</code></pre> <p>In this example, <code>customFetch</code> is used to send a POST request to the <code>/user/api/logout</code> endpoint. Any network errors or non-OK HTTP responses will be automatically handled by <code>customFetch</code>, displaying a toast notification to the user and re-throwing the error for local handling if needed.</p>"},{"location":"utilities/projectData/","title":"Project Data Utility","text":"<p>The Project Data utility provides functions for fetching project data from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display project information throughout the app.</p>"},{"location":"utilities/projectData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/projectData/#fetchcsvfroms3","title":"fetchCSVFromS3","text":"<pre><code>export const fetchCSVFromS3 = async () =&gt; {\n  // Implementation details\n};\n</code></pre> <p>This function:</p> <ol> <li>Attempts to fetch project data from the API endpoint</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with fallback to local CSV data</li> <li>Returns structured project data for consumption by the DataContext</li> </ol>"},{"location":"utilities/projectData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a robust error-handling pattern:</p> <ol> <li>Primary Request: Attempts to fetch data from the API endpoint</li> <li>Uses <code>localhost:5001/api/csv</code> in development</li> <li> <p>Uses <code>/api/csv</code> in production</p> </li> <li> <p>Fallback Mechanism: If the primary request fails, attempts to load local CSV data</p> </li> <li>Parses the CSV text into a structured object</li> <li> <p>Displays an error toast notification to inform the user</p> </li> <li> <p>Final Error Handling: If both primary and fallback requests fail</p> </li> <li>Returns <code>null</code> to indicate failure</li> <li>Displays an error toast notification</li> </ol>"},{"location":"utilities/projectData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch project data on initial application load</li> <li>Refresh project data when requested by the user</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getCsvData = useCallback(\n  async (forceRefresh = false) =&gt; {\n    // Check cache first unless forceRefresh is true\n    if (csvData &amp;&amp; !forceRefresh) {\n      return csvData;\n    }\n\n    // Check for pending request\n    if (pendingRequests.csv) {\n      return pendingRequests.csv;\n    }\n\n    // Create new request\n    const request = fetchCSVFromS3();\n    pendingRequests.csv = request;\n\n    try {\n      const data = await request;\n      setCsvData(data);\n      return data;\n    } finally {\n      pendingRequests.csv = null;\n    }\n  },\n  [csvData, pendingRequests]\n);\n</code></pre>"},{"location":"utilities/projectData/#error-handling","title":"Error Handling","text":"<p>The utility implements comprehensive error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Attempts to load fallback data when primary sources fail</li> <li>Returns <code>null</code> when all data sources are unavailable</li> </ul>"},{"location":"utilities/repositoryData/","title":"Repository Data Utility","text":"<p>The Repository Data utility provides functions for fetching detailed repository information from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display repository-specific information with filtering capabilities.</p>"},{"location":"utilities/repositoryData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/repositoryData/#fetchrepositorydata","title":"fetchRepositoryData","text":"<pre><code>export const fetchRepositoryData = async (repositories, date = null, archived = null) =&gt; {\n  // Implementation details\n};\n</code></pre> <p>This function:</p> <ol> <li>Fetches detailed data for specific repositories</li> <li>Supports filtering by date and archived status</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with user feedback</li> </ol>"},{"location":"utilities/repositoryData/#parameters","title":"Parameters","text":"<p>The function accepts the following parameters:</p> Parameter Type Default Description <code>repositories</code> string[] Required Array of repository names to fetch data for <code>date</code> string <code>null</code> ISO date string to filter repositories by last commit date <code>archived</code> string <code>null</code> 'true'/'false' to filter archived repositories"},{"location":"utilities/repositoryData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a structured request pattern:</p> <ol> <li>Parameter Validation: Checks if repositories array is valid</li> <li> <p>Returns <code>null</code> if repositories array is empty or undefined</p> </li> <li> <p>URL Parameter Construction: Builds query parameters</p> </li> <li>Converts repository array to comma-separated string</li> <li> <p>Adds optional date and archived parameters when provided</p> </li> <li> <p>Environment-Specific URL: Determines the correct API endpoint</p> </li> <li>Uses <code>localhost:5001/api/repository/project/json</code> in development</li> <li> <p>Uses <code>/api/repository/project/json</code> in production</p> </li> <li> <p>Request Execution: Fetches data with constructed URL and parameters</p> </li> <li>Validates response status</li> <li> <p>Parses JSON response</p> </li> <li> <p>Error Handling: Manages request failures</p> </li> <li>Displays error toast notification</li> <li>Returns <code>null</code> to indicate failure</li> </ol>"},{"location":"utilities/repositoryData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch repository data when needed for specific views</li> <li>Apply filtering based on user selections (date ranges, archived status)</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getRepositoryData = useCallback(\n  async (repositories, date = null, archived = null, forceRefresh = false) =&gt; {\n    // Create cache key based on parameters\n    const cacheKey = `${repositories.join(',')}:${date || ''}:${archived || ''}`;\n\n    // Check cache first unless forceRefresh is true\n    if (repositoryData.has(cacheKey) &amp;&amp; !forceRefresh) {\n      return repositoryData.get(cacheKey);\n    }\n\n    // Check for pending request\n    if (pendingRequests.repository?.[cacheKey]) {\n      return pendingRequests.repository[cacheKey];\n    }\n\n    // Initialise repository requests object if needed\n    if (!pendingRequests.repository) {\n      pendingRequests.repository = {};\n    }\n\n    // Create new request\n    const request = fetchRepositoryData(repositories, date, archived);\n    pendingRequests.repository[cacheKey] = request;\n\n    try {\n      const data = await request;\n      // Update cache with new data\n      setRepositoryData(new Map(repositoryData.set(cacheKey, data)));\n      return data;\n    } finally {\n      // Clean up pending request\n      pendingRequests.repository[cacheKey] = null;\n    }\n  },\n  [repositoryData, pendingRequests]\n);\n</code></pre>"},{"location":"utilities/repositoryData/#error-handling","title":"Error Handling","text":"<p>The utility implements error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Returns <code>null</code> when data is unavailable</li> </ul>"},{"location":"utilities/techRadarData/","title":"Tech Radar Data Utility","text":"<p>The Tech Radar Data utility provides functions for fetching Tech Radar information from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display technology categorisation and status information throughout the app.</p>"},{"location":"utilities/techRadarData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/techRadarData/#fetchtechradarjsonfroms3","title":"fetchTechRadarJSONFromS3","text":"<pre><code>export const fetchTechRadarJSONFromS3 = async () =&gt; {\n  // Implementation details\n};\n</code></pre> <p>This function:</p> <ol> <li>Fetches Tech Radar data from the API endpoint</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with user feedback</li> <li>Returns structured Tech Radar data for consumption by the DataContext</li> </ol>"},{"location":"utilities/techRadarData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a straightforward request pattern:</p> <ol> <li>Environment-Specific URL: Determines the correct API endpoint</li> <li>Uses <code>localhost:5001/api/tech-radar/json</code> in development</li> <li> <p>Uses <code>/api/tech-radar/json</code> in production</p> </li> <li> <p>Request Execution: Fetches data from the determined endpoint</p> </li> <li>Validates response status</li> <li> <p>Returns <code>null</code> for unsuccessful responses</p> </li> <li> <p>Response Parsing: Converts the JSON response to a JavaScript object</p> </li> <li> <p>Error Handling: Manages request failures</p> </li> <li>Catches and logs network errors</li> <li>Displays error toast notification</li> <li>Returns <code>null</code> to indicate failure</li> </ol>"},{"location":"utilities/techRadarData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch Tech Radar data on initial application load</li> <li>Refresh Tech Radar data when requested by the user</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getTechRadarData = useCallback(\n  async (forceRefresh = false) =&gt; {\n    // Check cache first unless forceRefresh is true\n    if (techRadarData &amp;&amp; !forceRefresh) {\n      return techRadarData;\n    }\n\n    // Check for pending request\n    if (pendingRequests.techRadar) {\n      return pendingRequests.techRadar;\n    }\n\n    // Create new request\n    const request = fetchTechRadarJSONFromS3();\n    pendingRequests.techRadar = request;\n\n    try {\n      const data = await request;\n      setTechRadarData(data);\n      return data;\n    } finally {\n      pendingRequests.techRadar = null;\n    }\n  },\n  [techRadarData, pendingRequests]\n);\n</code></pre>"},{"location":"utilities/techRadarData/#error-handling","title":"Error Handling","text":"<p>The utility implements error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Returns <code>null</code> when data is unavailable</li> </ul>"},{"location":"utilities/techRadarData/#usage-in-components","title":"Usage in Components","text":"<p>The Tech Radar data is used throughout the application to:</p> <ol> <li>Build the radar visualisation</li> <li>Display technology status in the Statistics view</li> <li>Highlight technologies in project listings</li> <li>Provide filtering options based on technology status</li> <li>Show historical movement of technologies between rings</li> </ol>"},{"location":"utilities/technologyStatus/","title":"Technology Status Utility","text":"<p>The Technology Status utility provides a React hook for accessing and determining the status of technologies in the Tech Radar. It centralises access to the radar data and optimises performance by supporting both synchronous and asynchronous operations.</p>"},{"location":"utilities/technologyStatus/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary hook:</p>"},{"location":"utilities/technologyStatus/#usetechnologystatus","title":"useTechnologyStatus","text":"<pre><code>export const useTechnologyStatus = () =&gt; {\n  // Implementation details\n  return getTechnologyStatus;\n};\n</code></pre> <p>This hook:</p> <ol> <li>Returns a function that determines a technology's status (adopt, trial, assess, hold)</li> <li>Accesses radar data via the DataContext</li> <li>Supports both synchronous access (when data is available) and asynchronous access (returns a Promise)</li> <li>Implements filtering to exclude technologies with \"review\" or \"ignore\" status</li> </ol>"},{"location":"utilities/technologyStatus/#function-returned-by-the-hook","title":"Function Returned by the Hook","text":"<p>The <code>useTechnologyStatus</code> hook returns a function with the following signature:</p> <pre><code>const getTechnologyStatus = (tech) =&gt; {\n  // Implementation details\n};\n</code></pre> Parameter Type Description <code>tech</code> string The technology name to check status for Returns string|null|Promise The status string (\"adopt\", \"trial\", \"assess\", \"hold\"), null if not found, or a Promise that resolves to status/null"},{"location":"utilities/technologyStatus/#implementation-details","title":"Implementation Details","text":"<p>The implementation follows a flexible, performance-optimised approach:</p> <ol> <li>Context Integration: Uses React's Context API via the DataContext</li> <li>Accesses cached radar data for immediate response when available</li> <li> <p>Automatically retrieves radar data when needed</p> </li> <li> <p>Synchronous Operation: Returns immediate results when data is available</p> </li> <li>Allows for direct usage in render functions without async handling</li> <li> <p>Prevents unnecessary re-renders</p> </li> <li> <p>Asynchronous Fallback: Returns a Promise when data needs to be fetched</p> </li> <li>Transparently handles data loading when necessary</li> <li> <p>Maintains API consistency regardless of data availability state</p> </li> <li> <p>Status Determination Logic: Identifies the current status of a technology</p> </li> <li>Finds the technology in radar entries by case-insensitive matching</li> <li>Retrieves the most recent timeline entry for status</li> <li>Filters out technologies with \"review\" or \"ignore\" status</li> <li>Returns a normalised lowercase status for consistent usage</li> </ol>"},{"location":"utilities/technologyStatus/#usage-in-components","title":"Usage in Components","text":"<p>The hook is designed for flexible usage within components:</p> <p>RadarPage:</p> <pre><code>/**\n * renderTechnologyList function to render the technology list.\n *\n * @param {string} technologies - The technologies to render.\n * @returns {JSX.Element|null} - The rendered technology list or null if not found.\n */\nconst renderTechnologyList = (technologies) =&gt; {\n  if (!technologies) return null;\n\n  return technologies.split(';').map((tech, index) =&gt; {\n    const trimmedTech = tech.trim();\n    const status = getTechnologyStatus(trimmedTech);\n\n    return (\n      &lt;span key={index}&gt;\n        {index &gt; 0 &amp;&amp; '; '}\n        {status ? (\n          &lt;span className={`clickable-tech ${status}`} onClick={() =&gt; handleTechClick(trimmedTech)}&gt;\n            {trimmedTech}\n          &lt;/span&gt;\n        ) : (\n          trimmedTech\n        )}\n      &lt;/span&gt;\n    );\n  });\n};\n</code></pre>"},{"location":"utilities/technologyStatus/#integration-with-radarpage-and-projectspage","title":"Integration with RadarPage and ProjectsPage","text":"<p>Both the RadarPage and ProjectsPage leverage this utility to:</p> <ol> <li>Determine if technologies should be clickable based on their status</li> <li>Apply appropriate styling based on the technology's status</li> <li>Create consistent visual indicators for technology adoption levels</li> <li>Filter out technologies that should not be highlighted (those with \"review\" or \"ignore\" status)</li> </ol>"},{"location":"utilities/technologyStatus/#special-technology-matching","title":"Special Technology Matching","text":"<p>The utility works alongside special technology matchers (<code>getSpecialTechMatchers.js</code>) to handle technology grouping:</p> <ul> <li>Purpose: Maps individual language variants (e.g., \"Javascript\", \"Typescript\") to their consolidated Tech Radar entries (e.g., \"Javascript/Typescript\")</li> <li>Usage in Statistics: The Statistics component uses these matchers to determine if a language is on the radar and should be clickable</li> <li>Usage in RadarPage: When navigating from Statistics to RadarPage, the mapped technology name is used to locate the correct radar entry</li> <li>Example: Clicking \"Javascript\" in Statistics will navigate to the \"Javascript/Typescript\" entry on the radar</li> </ul> <p>This ensures consistent technology grouping across all pages without requiring duplicate Tech Radar entries.</p>"},{"location":"utilities/technologyStatus/#error-handling","title":"Error Handling","text":"<p>The utility implements comprehensive error handling:</p> <ul> <li>Returns null for invalid or missing technology inputs</li> <li>Handles missing or incomplete radar data gracefully</li> <li>Maintains consistent behaviour in both synchronous and asynchronous modes</li> <li>Safely navigates potentially undefined properties in the radar data structure</li> </ul>"}]}